<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-run id="0" name="Jsonata.Net.Native.TestSuite.dll" fullname="C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\bin\Debug\net6.0\Jsonata.Net.Native.TestSuite.dll" runstate="Runnable" testcasecount="1611" result="Failed" total="1611" passed="1254" failed="220" inconclusive="0" skipped="137" asserts="1157" engine-version="3.12.0.0" clr-version="6.0.25" start-time="2024-02-19 13:49:35Z" end-time="2024-02-19 13:49:42Z" duration="7.340268">
  <command-line><![CDATA[C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\bin\Debug\net6.0\testhost.dll --port 58935 --endpoint 127.0.0.1:058935 --role client --parentprocessid 12460 --telemetryoptedin true]]></command-line>
  <filter>
    <or>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.array-constructor.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.blocks.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.blocks.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.blocks.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.blocks.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.blocks.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.blocks.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.blocks.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case029</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case030</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.closures.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.closures.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comments.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comments.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comments.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comments.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[17]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[18]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[19]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.conditionals.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.context.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.context.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.context.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.context.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.encoding.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.encoding.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.encoding.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.encoding.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.errors.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.fields.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.fields.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.fields.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.fields.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.fields.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.fields.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.fields.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.fields.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case029</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case030</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case031</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case032</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case033</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case034</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case034a</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case035</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case036</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case037</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case038</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case039</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case040</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case041</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case042</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case043</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case044</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.case045</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.large[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.large[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.sequence-of-arrays[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.sequence-of-arrays[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.sequence-of-arrays[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.flattening.sequence-of-arrays[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-abs.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-abs.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-abs.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-abs.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-append.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-append.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-append.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-append.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-append.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-append.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-applications.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-assert.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-assert.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-assert.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-assert.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-assert.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-assert.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-assert.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-assert.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-average.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-boolean.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-ceil.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-ceil.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-ceil.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-ceil.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-contains.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-contains.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-contains.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-contains.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-contains.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-contains.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-contains.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-count.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-decodeUrl.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-decodeUrl.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-decodeUrl.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-decodeUrlComponent.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-decodeUrlComponent.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-decodeUrlComponent.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-each.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-each.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-each.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-encodeUrl.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-encodeUrl.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-encodeUrl.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-encodeUrlComponent.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-encodeUrlComponent.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-encodeUrlComponent.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-error.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case008[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case008[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case008[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-eval.case008[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-exists.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-floor.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-floor.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-floor.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-floor.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[17]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[18]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[19]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[20]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[21]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[22]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[23]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[24]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[25]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[26]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[27]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[28]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[29]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[30]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[31]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[32]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[33]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[34]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[35]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[36]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[37]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[38]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[39]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[40]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[41]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[42]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[43]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[44]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[45]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[46]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[47]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[48]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[49]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[50]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[51]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[52]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[53]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[54]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[55]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[56]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[57]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[58]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[59]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[60]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[61]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[62]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[63]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[64]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[65]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case029</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case030</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case031</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case032</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case033</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case034</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case035</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case036</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[17]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[18]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[19]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[20]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[21]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[22]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[23]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[24]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[25]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[26]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[27]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[28]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[29]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[30]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[31]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[32]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[33]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[34]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[35]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[36]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[37]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[38]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[39]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[40]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[41]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[42]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[43]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[44]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[45]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[46]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[47]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[48]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[49]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[50]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[51]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[52]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[53]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[54]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[55]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[56]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[57]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[58]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[59]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[60]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[61]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[62]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[63]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[64]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[65]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[66]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[67]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[68]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[69]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[17]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[18]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[19]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-join.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-keys.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-keys.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-keys.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-keys.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-keys.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-keys.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-keys.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-length.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-lookup.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-lookup.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-lookup.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-lookup.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-lowercase.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-lowercase.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-max.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-merge.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-merge.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-merge.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-merge.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-merge.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case029</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-number.case030</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-pad.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[17]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[18]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[19]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[20]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[21]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[22]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[23]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[24]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[25]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[26]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[27]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[28]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[29]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[30]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[31]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[32]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[33]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[34]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[35]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[36]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[37]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[38]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[39]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[40]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[41]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[42]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[43]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[44]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[45]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[46]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[47]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[48]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[49]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[50]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[51]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[52]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[53]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[54]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[55]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[56]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[57]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[58]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[59]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[60]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[61]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-power.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-power.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-power.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-power.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-power.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-power.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-power.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-replace.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-reverse.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-reverse.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-reverse.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-reverse.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-round.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-shuffle.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-shuffle.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-shuffle.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-shuffle.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sift.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sift.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sift.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sift.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sift.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case029</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case030</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case031</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case032</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case033</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-signatures.case034</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sort.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-split.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-spread.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-spread.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-spread.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-spread.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sqrt.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sqrt.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sqrt.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sqrt.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-string.case029</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substring.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sum.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sum.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sum.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sum.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sum.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sum.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-sum.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[17]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[18]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[19]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[20]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[21]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[22]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[23]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[24]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[25]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[26]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[27]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[28]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[29]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[30]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[31]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[32]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[33]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[34]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[35]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[36]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[37]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[38]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[39]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[40]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[41]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[42]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[43]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[44]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[45]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[46]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-trim.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-trim.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-trim.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-uppercase.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-uppercase.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-zip.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-zip.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-zip.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-zip.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-zip.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.function-zip.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.higher-order-functions.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.higher-order-functions.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.higher-order-functions.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-filter.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-filter.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-filter.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-filter.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-map.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-single.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-zip-map.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-zip-map.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-zip-map.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.hof-zip-map.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.errors[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.errors[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.errors[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.errors[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.index[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.lambdas.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.array-inputs[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.array-inputs[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.array-inputs[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.array-inputs[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.literals.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.matchers.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.matchers.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.missing-paths.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.missing-paths.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.missing-paths.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.missing-paths.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.missing-paths.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.missing-paths.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.multiple-array-selectors.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.multiple-array-selectors.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.multiple-array-selectors.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.null.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.null.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.null.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.null.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.null.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.null.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.null.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.object-constructor.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[1]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[2]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[3]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[4]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[5]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[6]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[7]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[8]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[9]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[10]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[11]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[12]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[13]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[14]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[15]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[16]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[17]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[18]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[19]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[20]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[21]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[22]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[23]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[24]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[25]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[26]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[27]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[28]</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parentheses.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parentheses.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parentheses.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parentheses.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parentheses.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parentheses.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parentheses.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.parentheses.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.partial-application.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.partial-application.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.partial-application.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.partial-application.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.partial-application.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.predicates.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.predicates.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.predicates.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.predicates.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.range-operator.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case029</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case030</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case031</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case032</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case033</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case034</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case035</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case036</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case037</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.regex.case038</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.sorting.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.string-concat.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.token-conversion.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.token-conversion.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.token-conversion.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.token-conversion.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case015</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case016</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case017</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case018</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case019</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case020</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case021</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case022</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case023</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case024</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case025</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case026</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case027</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case028</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case029</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case030</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case031</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case032</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case033</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case034</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case035</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case036</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case037</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case038</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case039</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case040</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case041</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case042</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case043</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case044</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case045</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case046</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case047</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case048</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case049</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case050</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case051</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case052</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case053</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case054</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case055</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case056</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case057</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case058</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case059</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case060</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case061</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case062</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case063</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case064</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case065</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case066</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case067</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case068</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case069</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case070</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case071</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case072</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case073</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case074</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case075</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case076</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case077</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case078</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case079</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case080</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case081</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case082</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case083</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case084</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case085</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case086</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case087</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case088</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case089</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case090</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case091</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case092</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case093</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case094</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case095</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case096</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case097</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case098</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case099</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case100</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case101</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case102</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transform.case103</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case013</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.transforms.case014</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case009</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case010</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case011</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.variables.case012</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case000</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case001</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case002</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case003</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case004</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case005</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case006</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case007</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case008</test>
      <test>Jsonata.Net.Native.TestSuite.Tests.wildcards.case009</test>
    </or>
  </filter>
  <test-suite type="Assembly" id="0-2613" name="Jsonata.Net.Native.TestSuite.dll" fullname="C:/Dev/VSProjects/jsonata.net.native/src/Jsonata.Net.Native.TestSuite/bin/Debug/net6.0/Jsonata.Net.Native.TestSuite.dll" runstate="Runnable" testcasecount="1611" result="Failed" site="Child" start-time="2024-02-19T13:49:35.2127491Z" end-time="2024-02-19T13:49:42.3167110Z" duration="7.103933" total="1611" passed="1254" failed="220" warnings="0" inconclusive="0" skipped="137" asserts="1157">
    <environment framework-version="3.13.2.0" clr-version="6.0.25" os-version="Microsoft Windows 10.0.22621" platform="Win32NT" cwd="C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\bin\Debug\net6.0" machine-name="MIKENB-HONOR16" user="mikha" user-domain="MIKENB-HONOR16" culture="ru-RU" uiculture="en-US" os-architecture="x64" />
    <settings>
      <setting name="SynchronousEvents" value="False" />
      <setting name="RandomSeed" value="869252391" />
      <setting name="SkipNonTestAssemblies" value="True" />
      <setting name="ProcessModel" value="InProcess" />
      <setting name="DomainUsage" value="Single" />
      <setting name="DefaultTestNamePattern" value="{m}{a}" />
      <setting name="WorkDirectory" value="C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\bin\Debug\net6.0" />
      <setting name="NumberOfTestWorkers" value="12" />
    </settings>
    <properties>
      <property name="_PID" value="26088" />
      <property name="_APPDOMAIN" value="testhost" />
    </properties>
    <failure>
      <message><![CDATA[One or more child tests had errors]]></message>
    </failure>
    <test-suite type="TestSuite" id="0-2614" name="Jsonata" fullname="Jsonata" runstate="Runnable" testcasecount="1611" result="Failed" site="Child" start-time="2024-02-19T13:49:35.2155648Z" end-time="2024-02-19T13:49:42.3167080Z" duration="7.101143" total="1611" passed="1254" failed="220" warnings="0" inconclusive="0" skipped="137" asserts="1157">
      <failure>
        <message><![CDATA[One or more child tests had errors]]></message>
      </failure>
      <test-suite type="TestSuite" id="0-2615" name="Net" fullname="Jsonata.Net" runstate="Runnable" testcasecount="1611" result="Failed" site="Child" start-time="2024-02-19T13:49:35.2157642Z" end-time="2024-02-19T13:49:42.3167055Z" duration="7.100941" total="1611" passed="1254" failed="220" warnings="0" inconclusive="0" skipped="137" asserts="1157">
        <failure>
          <message><![CDATA[One or more child tests had errors]]></message>
        </failure>
        <test-suite type="TestSuite" id="0-2616" name="Native" fullname="Jsonata.Net.Native" runstate="Runnable" testcasecount="1611" result="Failed" site="Child" start-time="2024-02-19T13:49:35.2157730Z" end-time="2024-02-19T13:49:42.3167026Z" duration="7.100930" total="1611" passed="1254" failed="220" warnings="0" inconclusive="0" skipped="137" asserts="1157">
          <failure>
            <message><![CDATA[One or more child tests had errors]]></message>
          </failure>
          <test-suite type="TestSuite" id="0-2617" name="TestSuite" fullname="Jsonata.Net.Native.TestSuite" runstate="Runnable" testcasecount="1611" result="Failed" site="Child" start-time="2024-02-19T13:49:35.2157763Z" end-time="2024-02-19T13:49:42.3166988Z" duration="7.100923" total="1611" passed="1254" failed="220" warnings="0" inconclusive="0" skipped="137" asserts="1157">
            <failure>
              <message><![CDATA[One or more child tests had errors]]></message>
            </failure>
            <test-suite type="TestFixture" id="0-1000" name="Tests" fullname="Jsonata.Net.Native.TestSuite.Tests" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" testcasecount="1611" result="Failed" site="Child" start-time="2024-02-19T13:49:35.2164787Z" end-time="2024-02-19T13:49:42.3166871Z" duration="7.100208" total="1611" passed="1254" failed="220" warnings="0" inconclusive="0" skipped="137" asserts="1157">
              <failure>
                <message><![CDATA[One or more child tests had errors]]></message>
              </failure>
              <output><![CDATA[Loaded 27 datasets
]]></output>
              <test-suite type="ParameterizedMethod" id="0-2612" name="Test" fullname="Jsonata.Net.Native.TestSuite.Tests.Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" testcasecount="1611" result="Failed" site="Child" start-time="2024-02-19T13:49:35.2275615Z" end-time="2024-02-19T13:49:42.3159792Z" duration="7.088418" total="1611" passed="1254" failed="220" warnings="0" inconclusive="0" skipped="137" asserts="1156">
                <failure>
                  <message><![CDATA[One or more child tests had errors]]></message>
                </failure>
                <test-case id="0-1001" name="array-constructor.array-sequences[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="960960836" result="Passed" start-time="2024-02-19T13:49:35.2275959Z" end-time="2024-02-19T13:49:35.2527823Z" duration="0.025242" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.[value,epochSeconds][]';&#xA; result: [[3,1578381600],[5,1578381700]]" />
                  </properties>
                  <output><![CDATA[Expr is '$.[value,epochSeconds][]'
Result: '[[3,1578381600],[5,1578381700]]'
Expected: '[[3,1578381600],[5,1578381700]]'
]]></output>
                </test-case>
                <test-case id="0-1002" name="array-constructor.array-sequences[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="689239995" result="Passed" start-time="2024-02-19T13:49:35.2538979Z" end-time="2024-02-19T13:49:35.2539921Z" duration="0.000094" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.[value,epochSeconds][]';&#xA; result: [[3,1578381600]]" />
                  </properties>
                  <output><![CDATA[Expr is '$.[value,epochSeconds][]'
Result: '[[3,1578381600]]'
Expected: '[[3,1578381600]]'
]]></output>
                </test-case>
                <test-case id="0-1003" name="array-constructor.array-sequences[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1136955096" result="Passed" start-time="2024-02-19T13:49:35.2540041Z" end-time="2024-02-19T13:49:35.2540637Z" duration="0.000060" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.[value,epochSeconds]';&#xA; result: [3,1578381600]" />
                  </properties>
                  <output><![CDATA[Expr is '$.[value,epochSeconds]'
Result: '[3,1578381600]'
Expected: '[3,1578381600]'
]]></output>
                </test-case>
                <test-case id="0-1004" name="array-constructor.array-sequences[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="272811018" result="Passed" start-time="2024-02-19T13:49:35.2540697Z" end-time="2024-02-19T13:49:35.2554893Z" duration="0.001420" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'singleArray';&#xA; result: [{&quot;foo&quot;:&quot;bar&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'singleArray'
Result: '[{"foo":"bar"}]'
Expected: '[{"foo":"bar"}]'
]]></output>
                </test-case>
                <test-case id="0-1005" name="array-constructor.array-sequences[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.array-sequences[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="963737169" result="Passed" start-time="2024-02-19T13:49:35.2554988Z" end-time="2024-02-19T13:49:35.2555702Z" duration="0.000071" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'singleArray[]';&#xA; result: [{&quot;foo&quot;:&quot;bar&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'singleArray[]'
Result: '[{"foo":"bar"}]'
Expected: '[{"foo":"bar"}]'
]]></output>
                </test-case>
                <test-case id="0-1006" name="array-constructor.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="611823729" result="Passed" start-time="2024-02-19T13:49:35.2555768Z" end-time="2024-02-19T13:49:35.2559057Z" duration="0.000329" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[]';&#xA; result: []" />
                  </properties>
                  <output><![CDATA[Expr is '[]'
Result: '[]'
Expected: '[]'
]]></output>
                </test-case>
                <test-case id="0-1007" name="array-constructor.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1851288383" result="Passed" start-time="2024-02-19T13:49:35.2559145Z" end-time="2024-02-19T13:49:35.2565381Z" duration="0.000624" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1]';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is '[1]'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1008" name="array-constructor.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="927116533" result="Passed" start-time="2024-02-19T13:49:35.2565467Z" end-time="2024-02-19T13:49:35.2566205Z" duration="0.000074" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2]';&#xA; result: [1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2]'
Result: '[1,2]'
Expected: '[1,2]'
]]></output>
                </test-case>
                <test-case id="0-1009" name="array-constructor.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="453824747" result="Passed" start-time="2024-02-19T13:49:35.2566267Z" end-time="2024-02-19T13:49:35.2566935Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2,3]';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2,3]'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
                <test-case id="0-1010" name="array-constructor.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2045733128" result="Passed" start-time="2024-02-19T13:49:35.2566995Z" end-time="2024-02-19T13:49:35.2567632Z" duration="0.000064" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2, [3, 4]]';&#xA; result: [1,2,[3,4]]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2, [3, 4]]'
Result: '[1,2,[3,4]]'
Expected: '[1,2,[3,4]]'
]]></output>
                </test-case>
                <test-case id="0-1011" name="array-constructor.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="81863763" result="Passed" start-time="2024-02-19T13:49:35.2567688Z" end-time="2024-02-19T13:49:35.2579767Z" duration="0.001208" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, &quot;two&quot;, [&quot;three&quot;, 4]]';&#xA; result: [1,&quot;two&quot;,[&quot;three&quot;,4]]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, "two", ["three", 4]]'
Result: '[1,"two",["three",4]]'
Expected: '[1,"two",["three",4]]'
]]></output>
                </test-case>
                <test-case id="0-1012" name="array-constructor.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1432510175" result="Passed" start-time="2024-02-19T13:49:35.2579866Z" end-time="2024-02-19T13:49:35.2581511Z" duration="0.000165" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, $two, [&quot;three&quot;, $four]]';&#xA; result: [1,2,[&quot;three&quot;,&quot;four&quot;]]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, $two, ["three", $four]]'
Result: '[1,2,["three","four"]]'
Expected: '[1,2,["three","four"]]'
]]></output>
                </test-case>
                <test-case id="0-1013" name="array-constructor.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1942170003" result="Passed" start-time="2024-02-19T13:49:35.2581594Z" end-time="2024-02-19T13:49:35.2583418Z" duration="0.000183" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[&quot;foo.bar&quot;, foo.bar, [&quot;foo.baz&quot;, foo.blah.baz]]';&#xA; result: [&quot;foo.bar&quot;,42,[&quot;foo.baz&quot;,{&quot;fud&quot;:&quot;hello&quot;},{&quot;fud&quot;:&quot;world&quot;}]]" />
                  </properties>
                  <output><![CDATA[Expr is '["foo.bar", foo.bar, ["foo.baz", foo.blah.baz]]'
Result: '["foo.bar",42,["foo.baz",{"fud":"hello"},{"fud":"world"}]]'
Expected: '["foo.bar",42,["foo.baz",{"fud":"hello"},{"fud":"world"}]]'
]]></output>
                </test-case>
                <test-case id="0-1014" name="array-constructor.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2019158809" result="Passed" start-time="2024-02-19T13:49:35.2583503Z" end-time="2024-02-19T13:49:35.2594022Z" duration="0.001052" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2, 3][0]';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2, 3][0]'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1015" name="array-constructor.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="435886191" result="Passed" start-time="2024-02-19T13:49:35.2594114Z" end-time="2024-02-19T13:49:35.2597001Z" duration="0.000289" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2, [3, 4]][-1]';&#xA; result: [3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2, [3, 4]][-1]'
Result: '[3,4]'
Expected: '[3,4]'
]]></output>
                </test-case>
                <test-case id="0-1016" name="array-constructor.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1745632834" result="Passed" start-time="2024-02-19T13:49:35.2597084Z" end-time="2024-02-19T13:49:35.2597811Z" duration="0.000073" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2, [3, 4]][-1][-1]';&#xA; result: 4" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2, [3, 4]][-1][-1]'
Result: '4'
Expected: '4'
]]></output>
                </test-case>
                <test-case id="0-1017" name="array-constructor.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1613533444" result="Passed" start-time="2024-02-19T13:49:35.2597869Z" end-time="2024-02-19T13:49:35.2598540Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz.[fud, fud]';&#xA; result: [[&quot;hello&quot;,&quot;hello&quot;],[&quot;world&quot;,&quot;world&quot;]]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz.[fud, fud]'
Result: '[["hello","hello"],["world","world"]]'
Expected: '[["hello","hello"],["world","world"]]'
]]></output>
                </test-case>
                <test-case id="0-1018" name="array-constructor.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="44847149" result="Passed" start-time="2024-02-19T13:49:35.2598875Z" end-time="2024-02-19T13:49:35.2599569Z" duration="0.000069" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz.[[fud, fud]]';&#xA; result: [[[&quot;hello&quot;,&quot;hello&quot;]],[[&quot;world&quot;,&quot;world&quot;]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz.[[fud, fud]]'
Result: '[[["hello","hello"]],[["world","world"]]]'
Expected: '[[["hello","hello"]],[["world","world"]]]'
]]></output>
                </test-case>
                <test-case id="0-1019" name="array-constructor.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="157661196" result="Passed" start-time="2024-02-19T13:49:35.2599652Z" end-time="2024-02-19T13:49:35.2600561Z" duration="0.000091" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.[baz].fud';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.[baz].fud'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-1020" name="array-constructor.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="268857935" result="Passed" start-time="2024-02-19T13:49:35.2600631Z" end-time="2024-02-19T13:49:35.2601254Z" duration="0.000062" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.[baz, buz].fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.[baz, buz].fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1021" name="array-constructor.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1902056284" result="Passed" start-time="2024-02-19T13:49:35.2601308Z" end-time="2024-02-19T13:49:35.2604127Z" duration="0.000283" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[Address, Other.&quot;Alternative.Address&quot;].City';&#xA; result: [&quot;Winchester&quot;,&quot;London&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '[Address, Other."Alternative.Address"].City'
Result: '["Winchester","London"]'
Expected: '["Winchester","London"]'
]]></output>
                </test-case>
                <test-case id="0-1022" name="array-constructor.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1303736323" result="Passed" start-time="2024-02-19T13:49:35.2604316Z" end-time="2024-02-19T13:49:35.2606796Z" duration="0.000248" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[Address, Other.`Alternative.Address`].City';&#xA; result: [&quot;Winchester&quot;,&quot;London&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '[Address, Other.`Alternative.Address`].City'
Result: '["Winchester","London"]'
Expected: '["Winchester","London"]'
]]></output>
                </test-case>
                <test-case id="0-1023" name="array-constructor.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="7355020" result="Passed" start-time="2024-02-19T13:49:35.2606879Z" end-time="2024-02-19T13:49:35.2629791Z" duration="0.002291" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[0,1,2,3,4,5,6,7,8,9][$ % 2 = 0]';&#xA; result: [0,2,4,6,8]" />
                  </properties>
                  <output><![CDATA[Expr is '[0,1,2,3,4,5,6,7,8,9][$ % 2 = 0]'
Result: '[0,2,4,6,8]'
Expected: '[0,2,4,6,8]'
]]></output>
                </test-case>
                <test-case id="0-1024" name="array-constructor.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1069198955" result="Passed" start-time="2024-02-19T13:49:35.2629916Z" end-time="2024-02-19T13:49:35.2630982Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2, 3].$';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2, 3].$'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
                <test-case id="0-1025" name="array-constructor.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="477309903" result="Passed" start-time="2024-02-19T13:49:35.2631062Z" end-time="2024-02-19T13:49:35.2631706Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2, 3].$';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2, 3].$'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
                <test-case id="0-1026" name="array-constructor.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.array-constructor.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1206688486" result="Passed" start-time="2024-02-19T13:49:35.2631777Z" end-time="2024-02-19T13:49:35.2632554Z" duration="0.000078" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1, 2, 3].$';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is '[1, 2, 3].$'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
                <test-case id="0-1027" name="blocks.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.blocks.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1151012953" result="Passed" start-time="2024-02-19T13:49:35.2632649Z" end-time="2024-02-19T13:49:35.2637972Z" duration="0.000532" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '()';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '()'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1028" name="blocks.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.blocks.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="649607251" result="Passed" start-time="2024-02-19T13:49:35.2638072Z" end-time="2024-02-19T13:49:35.2638710Z" duration="0.000064" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(1; 2; 3)';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '(1; 2; 3)'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-1029" name="blocks.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.blocks.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2117310601" result="Passed" start-time="2024-02-19T13:49:35.2638794Z" end-time="2024-02-19T13:49:35.2639405Z" duration="0.000061" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(1; 2; 3;)';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '(1; 2; 3;)'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-1030" name="blocks.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.blocks.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="750852092" result="Passed" start-time="2024-02-19T13:49:35.2639471Z" end-time="2024-02-19T13:49:35.2643240Z" duration="0.000377" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($a:=1; $b:=2; $c:=($a:=4; $a+$b); $a+$c)';&#xA; result: 7" />
                  </properties>
                  <output><![CDATA[Expr is '($a:=1; $b:=2; $c:=($a:=4; $a+$b); $a+$c)'
Result: '7'
Expected: '7'
]]></output>
                </test-case>
                <test-case id="0-1031" name="blocks.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.blocks.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="112290226" result="Passed" start-time="2024-02-19T13:49:35.2643337Z" end-time="2024-02-19T13:49:35.2653619Z" duration="0.001028" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.($var1 := Price ; $var2:=Quantity; $var1 * $var2)';&#xA; result: [68.9,21.67,137.8,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.($var1 := Price ; $var2:=Quantity; $var1 * $var2)'
Result: '[68.9,21.67,137.8,107.99]'
Expected: '[68.9,21.67,137.8,107.99]'
]]></output>
                </test-case>
                <test-case id="0-1032" name="blocks.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.blocks.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1181770465" result="Passed" start-time="2024-02-19T13:49:35.2653730Z" end-time="2024-02-19T13:49:35.2682386Z" duration="0.002866" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $func := function($arg) {$arg.Account.Order[0].OrderID};  $func($))';&#xA; result: &quot;order103&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(  $func := function($arg) {$arg.Account.Order[0].OrderID};  $func($))'
Result: '"order103"'
Expected: '"order103"'
]]></output>
                </test-case>
                <test-case id="0-1033" name="blocks.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.blocks.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1556857266" result="Passed" start-time="2024-02-19T13:49:35.2682495Z" end-time="2024-02-19T13:49:35.2683564Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $func := function($arg) {$arg.Account.Order[0]};  $func($).OrderID)';&#xA; result: &quot;order103&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(  $func := function($arg) {$arg.Account.Order[0]};  $func($).OrderID)'
Result: '"order103"'
Expected: '"order103"'
]]></output>
                </test-case>
                <test-case id="0-1034" name="boolean-expresssions.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="524152854" result="Passed" start-time="2024-02-19T13:49:35.2683680Z" end-time="2024-02-19T13:49:35.2686638Z" duration="0.000296" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'true';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'true'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1035" name="boolean-expresssions.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="580711371" result="Passed" start-time="2024-02-19T13:49:35.2686729Z" end-time="2024-02-19T13:49:35.2687309Z" duration="0.000058" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'false';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'false'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1036" name="boolean-expresssions.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="268809747" result="Passed" start-time="2024-02-19T13:49:35.2687366Z" end-time="2024-02-19T13:49:35.2692364Z" duration="0.000500" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'false or false';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'false or false'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1037" name="boolean-expresssions.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="25112872" result="Passed" start-time="2024-02-19T13:49:35.2692453Z" end-time="2024-02-19T13:49:35.2693053Z" duration="0.000060" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'false or true';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'false or true'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1038" name="boolean-expresssions.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1225482856" result="Passed" start-time="2024-02-19T13:49:35.2693113Z" end-time="2024-02-19T13:49:35.2693594Z" duration="0.000048" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'true or false';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'true or false'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1039" name="boolean-expresssions.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="575235622" result="Passed" start-time="2024-02-19T13:49:35.2693647Z" end-time="2024-02-19T13:49:35.2694098Z" duration="0.000045" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'true or true';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'true or true'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1040" name="boolean-expresssions.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="734775715" result="Passed" start-time="2024-02-19T13:49:35.2694147Z" end-time="2024-02-19T13:49:35.2694593Z" duration="0.000045" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'false and false';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'false and false'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1041" name="boolean-expresssions.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1899202827" result="Passed" start-time="2024-02-19T13:49:35.2694642Z" end-time="2024-02-19T13:49:35.2695077Z" duration="0.000044" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'false and true';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'false and true'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1042" name="boolean-expresssions.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1894298658" result="Passed" start-time="2024-02-19T13:49:35.2695126Z" end-time="2024-02-19T13:49:35.2695566Z" duration="0.000044" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'true and false';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'true and false'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1043" name="boolean-expresssions.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="180877188" result="Passed" start-time="2024-02-19T13:49:35.2695615Z" end-time="2024-02-19T13:49:35.2696052Z" duration="0.000044" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'true and true';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'true and true'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1044" name="boolean-expresssions.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1711751850" result="Passed" start-time="2024-02-19T13:49:35.2696099Z" end-time="2024-02-19T13:49:35.2714579Z" duration="0.001848" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$not(false)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$not(false)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1045" name="boolean-expresssions.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="388538166" result="Passed" start-time="2024-02-19T13:49:35.2714719Z" end-time="2024-02-19T13:49:35.2715613Z" duration="0.000089" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$not(true)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$not(true)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1046" name="boolean-expresssions.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1292830963" result="Passed" start-time="2024-02-19T13:49:35.2715678Z" end-time="2024-02-19T13:49:35.2720893Z" duration="0.000522" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'and=1 and or=2';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'and=1 and or=2'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1047" name="boolean-expresssions.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="861790902" result="Passed" start-time="2024-02-19T13:49:35.2720981Z" end-time="2024-02-19T13:49:35.2723038Z" duration="0.000206" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'and&gt;1 or or&lt;=2';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'and>1 or or<=2'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1048" name="boolean-expresssions.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="984119961" result="Passed" start-time="2024-02-19T13:49:35.2723127Z" end-time="2024-02-19T13:49:35.2723751Z" duration="0.000062" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'and&gt;1 or or!=2';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'and>1 or or!=2'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1049" name="boolean-expresssions.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1443325969" result="Passed" start-time="2024-02-19T13:49:35.2723815Z" end-time="2024-02-19T13:49:35.2724315Z" duration="0.000050" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'and and and';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'and and and'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1050" name="boolean-expresssions.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2073038229" result="Passed" start-time="2024-02-19T13:49:35.2724381Z" end-time="2024-02-19T13:49:35.2725546Z" duration="0.000117" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[].content.origin.$lowercase(name)';&#xA; result: [&quot;fakeintegrationname&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$[].content.origin.$lowercase(name)'
Result: '["fakeintegrationname"]'
Expected: '["fakeintegrationname"]'
]]></output>
                </test-case>
                <test-case id="0-1051" name="boolean-expresssions.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="143742387" result="Passed" start-time="2024-02-19T13:49:35.2725625Z" end-time="2024-02-19T13:49:35.2726129Z" duration="0.000050" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'true or foo';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'true or foo'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1052" name="boolean-expresssions.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="486850566" result="Passed" start-time="2024-02-19T13:49:35.2726182Z" end-time="2024-02-19T13:49:35.2726601Z" duration="0.000042" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo or true';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'foo or true'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1053" name="boolean-expresssions.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1874967003" result="Passed" start-time="2024-02-19T13:49:35.2726650Z" end-time="2024-02-19T13:49:35.2727066Z" duration="0.000042" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'false or foo';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'false or foo'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1054" name="boolean-expresssions.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1833385969" result="Passed" start-time="2024-02-19T13:49:35.2727116Z" end-time="2024-02-19T13:49:35.2727519Z" duration="0.000040" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo or false';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'foo or false'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1055" name="boolean-expresssions.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="103242685" result="Passed" start-time="2024-02-19T13:49:35.2727569Z" end-time="2024-02-19T13:49:35.2727968Z" duration="0.000040" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo or bar';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'foo or bar'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1056" name="boolean-expresssions.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1804708160" result="Passed" start-time="2024-02-19T13:49:35.2728017Z" end-time="2024-02-19T13:49:35.2728415Z" duration="0.000040" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'true and foo';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'true and foo'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1057" name="boolean-expresssions.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="681884975" result="Passed" start-time="2024-02-19T13:49:35.2728464Z" end-time="2024-02-19T13:49:35.2728852Z" duration="0.000039" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo and true';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'foo and true'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1058" name="boolean-expresssions.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="67756141" result="Passed" start-time="2024-02-19T13:49:35.2728910Z" end-time="2024-02-19T13:49:35.2729291Z" duration="0.000038" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'false and foo';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'false and foo'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1059" name="boolean-expresssions.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1942984762" result="Passed" start-time="2024-02-19T13:49:35.2729337Z" end-time="2024-02-19T13:49:35.2729725Z" duration="0.000039" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo and false';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'foo and false'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1060" name="boolean-expresssions.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1904532330" result="Passed" start-time="2024-02-19T13:49:35.2729771Z" end-time="2024-02-19T13:49:35.2730168Z" duration="0.000040" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo and bar';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'foo and bar'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1061" name="boolean-expresssions.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1608294423" result="Passed" start-time="2024-02-19T13:49:35.2730214Z" end-time="2024-02-19T13:49:35.2730641Z" duration="0.000043" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$not(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$not(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1062" name="boolean-expresssions.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1201681132" result="Passed" start-time="2024-02-19T13:49:35.2730694Z" end-time="2024-02-19T13:49:35.2734553Z" duration="0.000386" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo = '' or $number(foo) = 0';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Description: 'will not evaluate rhs (which would error) because lhs is true'
Expr is 'foo = '' or $number(foo) = 0'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1063" name="boolean-expresssions.case029" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case029" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="957289579" result="Passed" start-time="2024-02-19T13:49:35.2734639Z" end-time="2024-02-19T13:49:35.2736482Z" duration="0.000184" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$type(data) = 'number' and data &gt; 10';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Description: 'will not evaluate rhs (which would error) because lhs is false'
Expr is '$type(data) = 'number' and data > 10'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1064" name="boolean-expresssions.case030" fullname="Jsonata.Net.Native.TestSuite.Tests.boolean-expresssions.case030" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1850456302" result="Passed" start-time="2024-02-19T13:49:35.2736568Z" end-time="2024-02-19T13:49:35.2896911Z" duration="0.016035" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$type(age) = 'number' or $number(age) &gt; 0';&#xA; result: error D3030" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3030.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Description: 'throws error on right side of boolean expression (for CC of a catch)'
Expr is '$type(age) = 'number' or $number(age) > 0'
]]></output>
                </test-case>
                <test-case id="0-1065" name="closures.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.closures.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1933442902" result="Passed" start-time="2024-02-19T13:49:35.2897085Z" end-time="2024-02-19T13:49:35.2927543Z" duration="0.003046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.(  $AccName := function() { $.&quot;Account Name&quot; };  Order[OrderID = &quot;order104&quot;].Product{    &quot;Account&quot;: $AccName(),    &quot;SKU-&quot; &amp; $string(ProductID): $.&quot;Product Name&quot;  } )';&#xA; result: {&quot;Account&quot;:&quot;Firefly&quot;,&quot;SKU-858383&quot;:&quot;Bowler Hat&quot;,&quot;SKU-345664&quot;:&quot;Cloak&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.(  $AccName := function() { $."Account Name" };  Order[OrderID = "order104"].Product{    "Account": $AccName(),    "SKU-" & $string(ProductID): $."Product Name"  } )'
Result: '{"Account":"Firefly","SKU-858383":"Bowler Hat","SKU-345664":"Cloak"}'
Expected: '{"Account":"Firefly","SKU-858383":"Bowler Hat","SKU-345664":"Cloak"}'
]]></output>
                </test-case>
                <test-case id="0-1066" name="closures.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.closures.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1047576945" result="Passed" start-time="2024-02-19T13:49:35.2927716Z" end-time="2024-02-19T13:49:35.2930191Z" duration="0.000248" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.(  $AccName := function() { `Account Name` };  Order[OrderID = &quot;order104&quot;].Product{    &quot;Account&quot;: $AccName(),    &quot;SKU-&quot; &amp; $string(ProductID): `Product Name`  } )';&#xA; result: {&quot;Account&quot;:&quot;Firefly&quot;,&quot;SKU-858383&quot;:&quot;Bowler Hat&quot;,&quot;SKU-345664&quot;:&quot;Cloak&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.(  $AccName := function() { `Account Name` };  Order[OrderID = "order104"].Product{    "Account": $AccName(),    "SKU-" & $string(ProductID): `Product Name`  } )'
Result: '{"Account":"Firefly","SKU-858383":"Bowler Hat","SKU-345664":"Cloak"}'
Expected: '{"Account":"Firefly","SKU-858383":"Bowler Hat","SKU-345664":"Cloak"}'
]]></output>
                </test-case>
                <test-case id="0-1067" name="comments.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.comments.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2023136556" result="Passed" start-time="2024-02-19T13:49:35.2930286Z" end-time="2024-02-19T13:49:35.2931279Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '/* header comment */&#xD;&#xA;1 + 1&#xD;&#xA;';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '/* header comment */
1 + 1
'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-1068" name="comments.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.comments.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1418017149" result="Passed" start-time="2024-02-19T13:49:35.2931374Z" end-time="2024-02-19T13:49:35.2934046Z" duration="0.000267" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring('Hello, world', 0 /* start at index 0 */, 5/*length*/)&#xD;&#xA;';&#xA; result: &quot;Hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring('Hello, world', 0 /* start at index 0 */, 5/*length*/)
'
Result: '"Hello"'
Expected: '"Hello"'
]]></output>
                </test-case>
                <test-case id="0-1069" name="comments.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.comments.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1438447438" result="Passed" start-time="2024-02-19T13:49:35.2934158Z" end-time="2024-02-19T13:49:35.3020234Z" duration="0.008608" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring('Hello, world', 0 /* start at index 0 */, 5/*length*/)&#xD;&#xA;/* trailing comment - no closing tag should trigger an error&#xD;&#xA;';&#xA; result: error S0106" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0106.
Actually thrown S0106.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring('Hello, world', 0 /* start at index 0 */, 5/*length*/)
/* trailing comment - no closing tag should trigger an error
'
]]></output>
                </test-case>
                <test-case id="0-1070" name="comments.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.comments.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="167076444" result="Passed" start-time="2024-02-19T13:49:35.3020632Z" end-time="2024-02-19T13:49:35.3054482Z" duration="0.003385" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '/* An expression to return the square root of a number without using the $sqrt function */&#xD;&#xA;/* Pointless, but demonstrates capability */&#xD;&#xA;&#xD;&#xA;(&#xD;&#xA;  /**&#xD;&#xA;   * Implements the square root function&#xD;&#xA;   * Uses the Newton-Raphson method&#xD;&#xA;   */&#xD;&#xA;  $my_sqrt := function($n) {(&#xD;&#xA;&#xD;&#xA;    $good_enough := function($guess) {&#xD;&#xA;      $abs($guess * $guess - $n) &lt; 0.000000000001&#xD;&#xA;    };&#xD;&#xA;    $improve_guess := function($guess) {&#xD;&#xA;      ($guess + $n / $guess) / 2&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    /* Iterate using a tail-recursive function until convergence */&#xD;&#xA;    $sqrt_iter := function($guess) {&#xD;&#xA;      $good_enough($guess) ? $guess : $sqrt_iter($improve_guess($guess))&#xD;&#xA;    };&#xD;&#xA;    $n &gt;= 0 ? $sqrt_iter(1) : &quot;no complex numbers today&quot;&#xD;&#xA;  )};&#xD;&#xA;  $my_sqrt($$)&#xD;&#xA;)&#xD;&#xA;';&#xA; result: 16" />
                  </properties>
                  <output><![CDATA[Expr is '/* An expression to return the square root of a number without using the $sqrt function */
/* Pointless, but demonstrates capability */

(
  /**
   * Implements the square root function
   * Uses the Newton-Raphson method
   */
  $my_sqrt := function($n) {(

    $good_enough := function($guess) {
      $abs($guess * $guess - $n) < 0.000000000001
    };
    $improve_guess := function($guess) {
      ($guess + $n / $guess) / 2
    };

    /* Iterate using a tail-recursive function until convergence */
    $sqrt_iter := function($guess) {
      $good_enough($guess) ? $guess : $sqrt_iter($improve_guess($guess))
    };
    $n >= 0 ? $sqrt_iter(1) : "no complex numbers today"
  )};
  $my_sqrt($$)
)
'
Result: '16'
Expected: '16'
]]></output>
                </test-case>
                <test-case id="0-1071" name="comparison-operators.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1720519962" result="Passed" start-time="2024-02-19T13:49:35.3054787Z" end-time="2024-02-19T13:49:35.3059978Z" duration="0.000519" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '3&gt;-3';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '3>-3'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1072" name="comparison-operators.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="388050588" result="Passed" start-time="2024-02-19T13:49:35.3060111Z" end-time="2024-02-19T13:49:35.3061018Z" duration="0.000091" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '3&gt;3';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '3>3'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1073" name="comparison-operators.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1617095174" result="Passed" start-time="2024-02-19T13:49:35.3061116Z" end-time="2024-02-19T13:49:35.3061950Z" duration="0.000084" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '3=3';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '3=3'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1074" name="comparison-operators.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1570369128" result="Passed" start-time="2024-02-19T13:49:35.3062041Z" end-time="2024-02-19T13:49:35.3062646Z" duration="0.000061" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;3&quot;=&quot;3&quot;';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '"3"="3"'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1075" name="comparison-operators.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="517138755" result="Passed" start-time="2024-02-19T13:49:35.3062708Z" end-time="2024-02-19T13:49:35.3063250Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;3&quot;=3';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '"3"=3'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1076" name="comparison-operators.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="7757626" result="Passed" start-time="2024-02-19T13:49:35.3063306Z" end-time="2024-02-19T13:49:35.3063827Z" duration="0.000052" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello&quot; = &quot;hello&quot;';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '"hello" = "hello"'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1077" name="comparison-operators.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1122859135" result="Passed" start-time="2024-02-19T13:49:35.3063879Z" end-time="2024-02-19T13:49:35.3064364Z" duration="0.000049" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello&quot; != &quot;world&quot;';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '"hello" != "world"'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1078" name="comparison-operators.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="443086817" result="Passed" start-time="2024-02-19T13:49:35.3064446Z" end-time="2024-02-19T13:49:35.3066637Z" duration="0.000219" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello&quot; &lt; &quot;world&quot;';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '"hello" < "world"'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1079" name="comparison-operators.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="680660789" result="Passed" start-time="2024-02-19T13:49:35.3066749Z" end-time="2024-02-19T13:49:35.3074154Z" duration="0.000741" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '&quot;32&quot; &lt; 42';&#xA; result: error T2009" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2009.
Actually thrown T2009.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '"32" < 42'
]]></output>
                </test-case>
                <test-case id="0-1080" name="comparison-operators.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1331962587" result="Passed" start-time="2024-02-19T13:49:35.3074308Z" end-time="2024-02-19T13:49:35.3081152Z" duration="0.000685" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'null &lt;= &quot;world&quot;';&#xA; result: error T2010" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2010.
Actually thrown T2010.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'null <= "world"'
]]></output>
                </test-case>
                <test-case id="0-1081" name="comparison-operators.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="344897584" result="Passed" start-time="2024-02-19T13:49:35.3081294Z" end-time="2024-02-19T13:49:35.3089202Z" duration="0.000791" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '3 &gt;= true';&#xA; result: error T2010" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2010.
Actually thrown T2010.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '3 >= true'
]]></output>
                </test-case>
                <test-case id="0-1082" name="comparison-operators.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="166892992" result="Passed" start-time="2024-02-19T13:49:35.3089321Z" end-time="2024-02-19T13:49:35.3090461Z" duration="0.000114" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar &gt; bar';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar > bar'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1083" name="comparison-operators.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1353764929" result="Passed" start-time="2024-02-19T13:49:35.3090538Z" end-time="2024-02-19T13:49:35.3091284Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar &gt;= bar';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar >= bar'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1084" name="comparison-operators.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="44272372" result="Passed" start-time="2024-02-19T13:49:35.3091344Z" end-time="2024-02-19T13:49:35.3092588Z" duration="0.000125" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar&lt;bar';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar<bar'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1085" name="comparison-operators.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="607109705" result="Passed" start-time="2024-02-19T13:49:35.3092701Z" end-time="2024-02-19T13:49:35.3093945Z" duration="0.000125" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar&lt;=bar';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar<=bar'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1086" name="comparison-operators.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1772923307" result="Passed" start-time="2024-02-19T13:49:35.3094045Z" end-time="2024-02-19T13:49:35.3095138Z" duration="0.000109" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar&gt;foo.bar';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'bar>foo.bar'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1087" name="comparison-operators.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1454287109" result="Passed" start-time="2024-02-19T13:49:35.3095223Z" end-time="2024-02-19T13:49:35.3096066Z" duration="0.000084" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar &lt; foo.bar';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'bar < foo.bar'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1088" name="comparison-operators.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1870954944" result="Passed" start-time="2024-02-19T13:49:35.3096136Z" end-time="2024-02-19T13:49:35.3096753Z" duration="0.000062" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar = bar';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar = bar'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1089" name="comparison-operators.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="420910169" result="Passed" start-time="2024-02-19T13:49:35.3096815Z" end-time="2024-02-19T13:49:35.3097726Z" duration="0.000091" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar!= bar';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar!= bar'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1090" name="comparison-operators.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="923486858" result="Passed" start-time="2024-02-19T13:49:35.3097813Z" end-time="2024-02-19T13:49:35.3098768Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar = foo.bar + 56';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'bar = foo.bar + 56'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1091" name="comparison-operators.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1734408419" result="Passed" start-time="2024-02-19T13:49:35.3098862Z" end-time="2024-02-19T13:49:35.3099858Z" duration="0.000100" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar !=foo.bar + 56';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'bar !=foo.bar + 56'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1092" name="comparison-operators.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2104840378" result="Passed" start-time="2024-02-19T13:49:35.3099990Z" end-time="2024-02-19T13:49:35.3101166Z" duration="0.000118" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz[fud = &quot;hello&quot;]';&#xA; result: {&quot;fud&quot;:&quot;hello&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz[fud = "hello"]'
Result: '{"fud":"hello"}'
Expected: '{"fud":"hello"}'
]]></output>
                </test-case>
                <test-case id="0-1093" name="comparison-operators.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1429981741" result="Passed" start-time="2024-02-19T13:49:35.3101265Z" end-time="2024-02-19T13:49:35.3102550Z" duration="0.000129" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz[fud != &quot;world&quot;]';&#xA; result: {&quot;fud&quot;:&quot;hello&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz[fud != "world"]'
Result: '{"fud":"hello"}'
Expected: '{"fud":"hello"}'
]]></output>
                </test-case>
                <test-case id="0-1094" name="comparison-operators.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="818186939" result="Passed" start-time="2024-02-19T13:49:35.3102650Z" end-time="2024-02-19T13:49:35.3104374Z" duration="0.000173" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product[Price &gt; 30].Price';&#xA; result: [34.45,34.45,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product[Price > 30].Price'
Result: '[34.45,34.45,107.99]'
Expected: '[34.45,34.45,107.99]'
]]></output>
                </test-case>
                <test-case id="0-1095" name="comparison-operators.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1273964939" result="Passed" start-time="2024-02-19T13:49:35.3104597Z" end-time="2024-02-19T13:49:35.3106178Z" duration="0.000158" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Price[$&lt;=35]';&#xA; result: [34.45,21.67,34.45]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Price[$<=35]'
Result: '[34.45,21.67,34.45]'
Expected: '[34.45,21.67,34.45]'
]]></output>
                </test-case>
                <test-case id="0-1096" name="comparison-operators.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="697521695" result="Passed" start-time="2024-02-19T13:49:35.3106274Z" end-time="2024-02-19T13:49:35.3113402Z" duration="0.000713" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'false &gt; 1';&#xA; result: error T2010" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2010.
Actually thrown T2010.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'false > 1'
]]></output>
                </test-case>
                <test-case id="0-1097" name="comparison-operators.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="937009079" result="Passed" start-time="2024-02-19T13:49:35.3113500Z" end-time="2024-02-19T13:49:35.3124353Z" duration="0.001085" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'false &gt; $x';&#xA; result: error T2010" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2010.
Actually thrown T2010.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'false > $x'
]]></output>
                </test-case>
                <test-case id="0-1098" name="comparison-operators.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="477904533" result="Passed" start-time="2024-02-19T13:49:35.3124608Z" end-time="2024-02-19T13:49:35.3125724Z" duration="0.000112" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '3 &gt; $x';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '3 > $x'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1099" name="comparison-operators.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1925792595" result="Passed" start-time="2024-02-19T13:49:35.3128475Z" end-time="2024-02-19T13:49:35.3129342Z" duration="0.000086" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$x &lt;= 'hello'';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$x <= 'hello''
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1100" name="comparison-operators.deep-equals[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1488444868" result="Passed" start-time="2024-02-19T13:49:35.3129429Z" end-time="2024-02-19T13:49:35.3132746Z" duration="0.000332" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1,2,3,4] = [1, 2, 3, 4]';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '[1,2,3,4] = [1, 2, 3, 4]'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1101" name="comparison-operators.deep-equals[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1417178054" result="Passed" start-time="2024-02-19T13:49:35.3132847Z" end-time="2024-02-19T13:49:35.3133837Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1,2] != [1, 2]';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '[1,2] != [1, 2]'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1102" name="comparison-operators.deep-equals[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1591257400" result="Passed" start-time="2024-02-19T13:49:35.3133914Z" end-time="2024-02-19T13:49:35.3134752Z" duration="0.000084" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1,2,[3],4] = [1, 2, [3], 4]';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '[1,2,[3],4] = [1, 2, [3], 4]'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1103" name="comparison-operators.deep-equals[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1693156170" result="Passed" start-time="2024-02-19T13:49:35.3134820Z" end-time="2024-02-19T13:49:35.3135590Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1,2,3,4] = [1, 2, [3], 4]';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '[1,2,3,4] = [1, 2, [3], 4]'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1104" name="comparison-operators.deep-equals[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1276249525" result="Passed" start-time="2024-02-19T13:49:35.3135650Z" end-time="2024-02-19T13:49:35.3136229Z" duration="0.000058" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1,2,3,4] = [2, 3, 4]';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '[1,2,3,4] = [2, 3, 4]'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1105" name="comparison-operators.deep-equals[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="352518267" result="Passed" start-time="2024-02-19T13:49:35.3136280Z" end-time="2024-02-19T13:49:35.3137097Z" duration="0.000082" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'data = [1, 2, 3, 4]';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'data = [1, 2, 3, 4]'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1106" name="comparison-operators.deep-equals[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1903175446" result="Passed" start-time="2024-02-19T13:49:35.3137167Z" end-time="2024-02-19T13:49:35.3137954Z" duration="0.000079" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'data[2] = 3';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'data[2] = 3'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1107" name="comparison-operators.deep-equals[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1017239039" result="Passed" start-time="2024-02-19T13:49:35.3138026Z" end-time="2024-02-19T13:49:35.3141256Z" duration="0.000323" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{ 'one': 1, 'two': 2 } = { 'two': 2, 'one': 1 }';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '{ 'one': 1, 'two': 2 } = { 'two': 2, 'one': 1 }'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1108" name="comparison-operators.deep-equals[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="304597875" result="Passed" start-time="2024-02-19T13:49:35.3141350Z" end-time="2024-02-19T13:49:35.3142182Z" duration="0.000083" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{ 'one': 1, 'two': 2 } = { 'too': 2, 'one': 1 }';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '{ 'one': 1, 'two': 2 } = { 'too': 2, 'one': 1 }'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1109" name="comparison-operators.deep-equals[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1316247214" result="Passed" start-time="2024-02-19T13:49:35.3142296Z" end-time="2024-02-19T13:49:35.3142920Z" duration="0.000063" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{ 'one': 1, 'two': 3 } = { 'two': 2, 'one': 1 }';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '{ 'one': 1, 'two': 3 } = { 'two': 2, 'one': 1 }'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1110" name="comparison-operators.deep-equals[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="95485059" result="Passed" start-time="2024-02-19T13:49:35.3142982Z" end-time="2024-02-19T13:49:35.3143696Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{ 'one': 1, 'two': 2, 'three': 3 } = { 'two': 2, 'one': 1 }';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '{ 'one': 1, 'two': 2, 'three': 3 } = { 'two': 2, 'one': 1 }'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1111" name="comparison-operators.deep-equals[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="681849025" result="Passed" start-time="2024-02-19T13:49:35.3143836Z" end-time="2024-02-19T13:49:35.3145273Z" duration="0.000144" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'two = 2';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'two = 2'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1112" name="comparison-operators.deep-equals[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="238798158" result="Passed" start-time="2024-02-19T13:49:35.3145372Z" end-time="2024-02-19T13:49:35.3157836Z" duration="0.001247" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'one + one = two';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'one + one = two'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1113" name="comparison-operators.deep-equals[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1534578999" result="Passed" start-time="2024-02-19T13:49:35.3158024Z" end-time="2024-02-19T13:49:35.3159489Z" duration="0.000147" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'null = null';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'null = null'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1114" name="comparison-operators.deep-equals[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="611022175" result="Passed" start-time="2024-02-19T13:49:35.3159604Z" end-time="2024-02-19T13:49:35.3160583Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'null != null';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'null != null'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1115" name="comparison-operators.deep-equals[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1559634746" result="Passed" start-time="2024-02-19T13:49:35.3160672Z" end-time="2024-02-19T13:49:35.3162163Z" duration="0.000149" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'null = nothing';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'null = nothing'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1116" name="comparison-operators.deep-equals[17]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[17]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1441401431" result="Passed" start-time="2024-02-19T13:49:35.3162333Z" end-time="2024-02-19T13:49:35.3163309Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nothing = nothing';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'nothing = nothing'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1117" name="comparison-operators.deep-equals[18]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[18]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1995399850" result="Passed" start-time="2024-02-19T13:49:35.3163396Z" end-time="2024-02-19T13:49:35.3165040Z" duration="0.000165" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].Product[0].Description = Account.Order[1].Product[0].Description';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order[0].Product[0].Description = Account.Order[1].Product[0].Description'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1118" name="comparison-operators.deep-equals[19]" fullname="Jsonata.Net.Native.TestSuite.Tests.comparison-operators.deep-equals[19]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="913017207" result="Passed" start-time="2024-02-19T13:49:35.3165149Z" end-time="2024-02-19T13:49:35.3167006Z" duration="0.000186" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].Product[0] = Account.Order[1].Product[0]';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order[0].Product[0] = Account.Order[1].Product[0]'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1119" name="conditionals.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1243346597" result="Passed" start-time="2024-02-19T13:49:35.3167116Z" end-time="2024-02-19T13:49:35.3168866Z" duration="0.000175" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[&quot;Red&quot;[$$=&quot;Bus&quot;], &quot;White&quot;[$$=&quot;Police Car&quot;]][0]';&#xA; result: &quot;Red&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '["Red"[$$="Bus"], "White"[$$="Police Car"]][0]'
Result: '"Red"'
Expected: '"Red"'
]]></output>
                </test-case>
                <test-case id="0-1120" name="conditionals.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="160519595" result="Passed" start-time="2024-02-19T13:49:35.3169171Z" end-time="2024-02-19T13:49:35.3171003Z" duration="0.000183" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[&quot;Red&quot;[$$=&quot;Bus&quot;], &quot;White&quot;[$$=&quot;Police Car&quot;]][0]';&#xA; result: &quot;White&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '["Red"[$$="Bus"], "White"[$$="Police Car"]][0]'
Result: '"White"'
Expected: '"White"'
]]></output>
                </test-case>
                <test-case id="0-1121" name="conditionals.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1740773483" result="Passed" start-time="2024-02-19T13:49:35.3171116Z" end-time="2024-02-19T13:49:35.3172896Z" duration="0.000178" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[&quot;Red&quot;[$$=&quot;Bus&quot;], &quot;White&quot;[$$=&quot;Police Car&quot;]][0]';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '["Red"[$$="Bus"], "White"[$$="Police Car"]][0]'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1122" name="conditionals.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="152181612" result="Passed" start-time="2024-02-19T13:49:35.3172999Z" end-time="2024-02-19T13:49:35.3177185Z" duration="0.000419" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lookup({&quot;Bus&quot;: &quot;Red&quot;, &quot;Police Car&quot;: &quot;White&quot;}, $$)';&#xA; result: &quot;Red&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lookup({"Bus": "Red", "Police Car": "White"}, $$)'
Result: '"Red"'
Expected: '"Red"'
]]></output>
                </test-case>
                <test-case id="0-1123" name="conditionals.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="997106980" result="Passed" start-time="2024-02-19T13:49:35.3177306Z" end-time="2024-02-19T13:49:35.3178408Z" duration="0.000110" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lookup({&quot;Bus&quot;: &quot;Red&quot;, &quot;Police Car&quot;: &quot;White&quot;}, $$)';&#xA; result: &quot;White&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lookup({"Bus": "Red", "Police Car": "White"}, $$)'
Result: '"White"'
Expected: '"White"'
]]></output>
                </test-case>
                <test-case id="0-1124" name="conditionals.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="514960580" result="Passed" start-time="2024-02-19T13:49:35.3178508Z" end-time="2024-02-19T13:49:35.3179975Z" duration="0.000147" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lookup({&quot;Bus&quot;: &quot;Red&quot;, &quot;Police Car&quot;: &quot;White&quot;}, $$)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$lookup({"Bus": "Red", "Police Car": "White"}, $$)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1125" name="conditionals.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="580151672" result="Passed" start-time="2024-02-19T13:49:35.3180170Z" end-time="2024-02-19T13:49:35.3181723Z" duration="0.000155" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.(Price &lt; 30 ? &quot;Cheap&quot;)';&#xA; result: &quot;Cheap&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.(Price < 30 ? "Cheap")'
Result: '"Cheap"'
Expected: '"Cheap"'
]]></output>
                </test-case>
                <test-case id="0-1126" name="conditionals.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1763163231" result="Passed" start-time="2024-02-19T13:49:35.3181816Z" end-time="2024-02-19T13:49:35.3186808Z" duration="0.000499" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.(Price &lt; 30 ? &quot;Cheap&quot; : &quot;Expensive&quot;)';&#xA; result: [&quot;Expensive&quot;,&quot;Cheap&quot;,&quot;Expensive&quot;,&quot;Expensive&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.(Price < 30 ? "Cheap" : "Expensive")'
Result: '["Expensive","Cheap","Expensive","Expensive"]'
Expected: '["Expensive","Cheap","Expensive","Expensive"]'
]]></output>
                </test-case>
                <test-case id="0-1127" name="conditionals.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.conditionals.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1105552494" result="Passed" start-time="2024-02-19T13:49:35.3186941Z" end-time="2024-02-19T13:49:35.3190034Z" duration="0.000309" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.(Price &lt; 30 ? &quot;Cheap&quot; : Price &lt; 100 ? &quot;Expensive&quot; : &quot;Rip off&quot;)';&#xA; result: [&quot;Expensive&quot;,&quot;Cheap&quot;,&quot;Expensive&quot;,&quot;Rip off&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.(Price < 30 ? "Cheap" : Price < 100 ? "Expensive" : "Rip off")'
Result: '["Expensive","Cheap","Expensive","Rip off"]'
Expected: '["Expensive","Cheap","Expensive","Rip off"]'
]]></output>
                </test-case>
                <test-case id="0-1128" name="context.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.context.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="798908235" result="Passed" start-time="2024-02-19T13:49:35.3190139Z" end-time="2024-02-19T13:49:35.3192122Z" duration="0.000199" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number()';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '$number()'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-1129" name="context.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.context.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="296404189" result="Passed" start-time="2024-02-19T13:49:35.3192234Z" end-time="2024-02-19T13:49:35.3200958Z" duration="0.000873" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..5].$string()';&#xA; result: [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '[1..5].$string()'
Result: '["1","2","3","4","5"]'
Expected: '["1","2","3","4","5"]'
]]></output>
                </test-case>
                <test-case id="0-1130" name="context.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.context.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1967100707" result="Passed" start-time="2024-02-19T13:49:35.3201067Z" end-time="2024-02-19T13:49:35.3202605Z" duration="0.000154" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..5].(&quot;Item &quot; &amp; $string())';&#xA; result: [&quot;Item 1&quot;,&quot;Item 2&quot;,&quot;Item 3&quot;,&quot;Item 4&quot;,&quot;Item 5&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '[1..5].("Item " & $string())'
Result: '["Item 1","Item 2","Item 3","Item 4","Item 5"]'
Expected: '["Item 1","Item 2","Item 3","Item 4","Item 5"]'
]]></output>
                </test-case>
                <test-case id="0-1131" name="context.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.context.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1218232194" result="Passed" start-time="2024-02-19T13:49:35.3202686Z" end-time="2024-02-19T13:49:35.3207208Z" duration="0.000453" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.&quot;Product Name&quot;.$uppercase().$substringBefore(&quot; &quot;)';&#xA; result: [&quot;BOWLER&quot;,&quot;TRILBY&quot;,&quot;BOWLER&quot;,&quot;CLOAK&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product."Product Name".$uppercase().$substringBefore(" ")'
Result: '["BOWLER","TRILBY","BOWLER","CLOAK"]'
Expected: '["BOWLER","TRILBY","BOWLER","CLOAK"]'
]]></output>
                </test-case>
                <test-case id="0-1132" name="descendent-operator.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="644954602" result="Passed" start-time="2024-02-19T13:49:35.3207334Z" end-time="2024-02-19T13:49:35.3213797Z" duration="0.000646" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.**.blah';&#xA; result: [{&quot;baz&quot;:{&quot;fud&quot;:&quot;hello&quot;}},{&quot;baz&quot;:{&quot;fud&quot;:&quot;world&quot;}},{&quot;bazz&quot;:&quot;gotcha&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.**.blah'
Result: '[{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"}]'
Expected: '[{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"}]'
]]></output>
                </test-case>
                <test-case id="0-1133" name="descendent-operator.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="664777869" result="Passed" start-time="2024-02-19T13:49:35.3213903Z" end-time="2024-02-19T13:49:35.3214923Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.**.baz';&#xA; result: [{&quot;fud&quot;:&quot;hello&quot;},{&quot;fud&quot;:&quot;world&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.**.baz'
Result: '[{"fud":"hello"},{"fud":"world"}]'
Expected: '[{"fud":"hello"},{"fud":"world"}]'
]]></output>
                </test-case>
                <test-case id="0-1134" name="descendent-operator.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1339699568" result="Passed" start-time="2024-02-19T13:49:35.3215025Z" end-time="2024-02-19T13:49:35.3216165Z" duration="0.000114" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.**.fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.**.fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1135" name="descendent-operator.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2062268180" result="Passed" start-time="2024-02-19T13:49:35.3216257Z" end-time="2024-02-19T13:49:35.3217321Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;foo&quot;.**.fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '"foo".**.fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1136" name="descendent-operator.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="901123831" result="Passed" start-time="2024-02-19T13:49:35.3217417Z" end-time="2024-02-19T13:49:35.3218487Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.**.&quot;fud&quot;';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.**."fud"'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1137" name="descendent-operator.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="621220469" result="Passed" start-time="2024-02-19T13:49:35.3218577Z" end-time="2024-02-19T13:49:35.3219685Z" duration="0.000111" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;foo&quot;.**.&quot;fud&quot;';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '"foo".**."fud"'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1138" name="descendent-operator.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="77515404" result="Passed" start-time="2024-02-19T13:49:35.3219774Z" end-time="2024-02-19T13:49:35.3233843Z" duration="0.001407" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.*.**.fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.*.**.fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1139" name="descendent-operator.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1839237752" result="Passed" start-time="2024-02-19T13:49:35.3234003Z" end-time="2024-02-19T13:49:35.3235588Z" duration="0.000159" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.**.*.fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.**.*.fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1140" name="descendent-operator.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="851417906" result="Passed" start-time="2024-02-19T13:49:35.3235694Z" end-time="2024-02-19T13:49:35.3236803Z" duration="0.000111" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.**.Colour';&#xA; result: [&quot;Purple&quot;,&quot;Orange&quot;,&quot;Purple&quot;,&quot;Black&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.**.Colour'
Result: '["Purple","Orange","Purple","Black"]'
Expected: '["Purple","Orange","Purple","Black"]'
]]></output>
                </test-case>
                <test-case id="0-1141" name="descendent-operator.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="755684268" result="Passed" start-time="2024-02-19T13:49:35.3236870Z" end-time="2024-02-19T13:49:35.3237668Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.**.fud[0]';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.**.fud[0]'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1142" name="descendent-operator.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1149689234" result="Passed" start-time="2024-02-19T13:49:35.3237731Z" end-time="2024-02-19T13:49:35.3238655Z" duration="0.000093" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.**.fud)[0]';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.**.fud)[0]'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-1143" name="descendent-operator.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="554707730" result="Passed" start-time="2024-02-19T13:49:35.3238726Z" end-time="2024-02-19T13:49:35.3239499Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(**.fud)[0]';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(**.fud)[0]'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-1144" name="descendent-operator.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="325425110" result="Passed" start-time="2024-02-19T13:49:35.3239561Z" end-time="2024-02-19T13:49:35.3240501Z" duration="0.000094" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '**.Price';&#xA; result: [34.45,21.67,34.45,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is '**.Price'
Result: '[34.45,21.67,34.45,107.99]'
Expected: '[34.45,21.67,34.45,107.99]'
]]></output>
                </test-case>
                <test-case id="0-1145" name="descendent-operator.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="241637833" result="Passed" start-time="2024-02-19T13:49:35.3240562Z" end-time="2024-02-19T13:49:35.3241578Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '**.Price[0]';&#xA; result: [34.45,21.67,34.45,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is '**.Price[0]'
Result: '[34.45,21.67,34.45,107.99]'
Expected: '[34.45,21.67,34.45,107.99]'
]]></output>
                </test-case>
                <test-case id="0-1146" name="descendent-operator.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1495610261" result="Passed" start-time="2024-02-19T13:49:35.3241667Z" end-time="2024-02-19T13:49:35.3242736Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(**.Price)[0]';&#xA; result: 34.45" />
                  </properties>
                  <output><![CDATA[Expr is '(**.Price)[0]'
Result: '34.45'
Expected: '34.45'
]]></output>
                </test-case>
                <test-case id="0-1147" name="descendent-operator.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="570261379" result="Passed" start-time="2024-02-19T13:49:35.3242806Z" end-time="2024-02-19T13:49:35.3243537Z" duration="0.000073" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.blah.**';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.blah.**'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1148" name="descendent-operator.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.descendent-operator.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="818959566" result="Passed" start-time="2024-02-19T13:49:35.3243593Z" end-time="2024-02-19T13:49:35.3244046Z" duration="0.000045" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '**';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '**'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1149" name="encoding.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.encoding.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1406035840" result="Passed" start-time="2024-02-19T13:49:35.3244092Z" end-time="2024-02-19T13:49:35.3247463Z" duration="0.000337" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$base64encode(&quot;hello:world&quot;)';&#xA; result: &quot;aGVsbG86d29ybGQ=&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$base64encode("hello:world")'
Result: '"aGVsbG86d29ybGQ="'
Expected: '"aGVsbG86d29ybGQ="'
]]></output>
                </test-case>
                <test-case id="0-1150" name="encoding.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.encoding.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1980047155" result="Passed" start-time="2024-02-19T13:49:35.3247567Z" end-time="2024-02-19T13:49:35.3248683Z" duration="0.000112" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$base64encode()';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$base64encode()'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1151" name="encoding.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.encoding.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="849605492" result="Passed" start-time="2024-02-19T13:49:35.3248752Z" end-time="2024-02-19T13:49:35.3266343Z" duration="0.001759" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$base64decode(&quot;aGVsbG86d29ybGQ=&quot;)';&#xA; result: &quot;hello:world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$base64decode("aGVsbG86d29ybGQ=")'
Result: '"hello:world"'
Expected: '"hello:world"'
]]></output>
                </test-case>
                <test-case id="0-1152" name="encoding.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.encoding.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="23991872" result="Passed" start-time="2024-02-19T13:49:35.3266537Z" end-time="2024-02-19T13:49:35.3268891Z" duration="0.000236" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$base64decode()';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$base64decode()'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1153" name="errors.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1382041583" result="Passed" start-time="2024-02-19T13:49:35.3269008Z" end-time="2024-02-19T13:49:35.3278829Z" duration="0.000982" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '&quot;s&quot; - 1';&#xA; result: error T2001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2001.
Actually thrown T2001.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '"s" - 1'
]]></output>
                </test-case>
                <test-case id="0-1154" name="errors.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1765273000" result="Passed" start-time="2024-02-19T13:49:35.3278960Z" end-time="2024-02-19T13:49:35.3286605Z" duration="0.000765" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '1 + null';&#xA; result: error T2002" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2002.
Actually thrown T2002.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '1 + null'
]]></output>
                </test-case>
                <test-case id="0-1155" name="errors.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1895155032" result="Passed" start-time="2024-02-19T13:49:35.3286745Z" end-time="2024-02-19T13:49:35.3291003Z" duration="0.000426" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '&quot;no closing quote';&#xA; result: error S0101" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0101.
Actually thrown S0101.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '"no closing quote'
]]></output>
                </test-case>
                <test-case id="0-1156" name="errors.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1264996442" result="Passed" start-time="2024-02-19T13:49:35.3291112Z" end-time="2024-02-19T13:49:35.3296575Z" duration="0.000546" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '`no closing backtick';&#xA; result: error S0105" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0105.
Actually thrown S0105.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '`no closing backtick'
]]></output>
                </test-case>
                <test-case id="0-1157" name="errors.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="594150420" result="Passed" start-time="2024-02-19T13:49:35.3296706Z" end-time="2024-02-19T13:49:35.3305944Z" duration="0.000924" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '- &quot;s&quot;';&#xA; result: error D1002" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D1002.
Actually thrown D1002.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '- "s"'
]]></output>
                </test-case>
                <test-case id="0-1158" name="errors.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1178195590" result="Passed" start-time="2024-02-19T13:49:35.3306062Z" end-time="2024-02-19T13:49:35.3316250Z" duration="0.001019" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'unknown(function)';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'unknown(function)'
]]></output>
                </test-case>
                <test-case id="0-1159" name="errors.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="696097853" result="Passed" start-time="2024-02-19T13:49:35.3316366Z" end-time="2024-02-19T13:49:35.3320965Z" duration="0.000460" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'sum(Account.Order.OrderID)';&#xA; result: error T1005" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1005.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'sum(Account.Order.OrderID)'
]]></output>
                </test-case>
                <test-case id="0-1160" name="errors.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="736838683" result="Passed" start-time="2024-02-19T13:49:35.3321080Z" end-time="2024-02-19T13:49:35.3327629Z" duration="0.000655" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1,2)';&#xA; result: error S0202" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0202.
Actually thrown S0202.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1,2)'
]]></output>
                </test-case>
                <test-case id="0-1161" name="errors.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="797622952" result="Passed" start-time="2024-02-19T13:49:35.3327754Z" end-time="2024-02-19T13:49:35.3331539Z" duration="0.000379" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1:2]';&#xA; result: error S0202" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0202.
Actually thrown S0202.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1:2]'
]]></output>
                </test-case>
                <test-case id="0-1162" name="errors.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="218330804" result="Passed" start-time="2024-02-19T13:49:35.3331635Z" end-time="2024-02-19T13:49:35.3334615Z" duration="0.000298" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;foo&quot;, &quot;o, &quot;rr&quot;)';&#xA; result: error S0202" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0202.
Actually thrown S0202.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$replace("foo", "o, "rr")'
]]></output>
                </test-case>
                <test-case id="0-1163" name="errors.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="8193686" result="Passed" start-time="2024-02-19T13:49:35.3334704Z" end-time="2024-02-19T13:49:35.3338022Z" duration="0.000332" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1!2]';&#xA; result: error S0204" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0204.
Actually thrown S0202.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1!2]'
]]></output>
                </test-case>
                <test-case id="0-1164" name="errors.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1496630154" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:35.3338119Z" end-time="2024-02-19T13:49:35.3387686Z" duration="0.004957" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '@ bar';&#xA; result: error S0211" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '@ bar'
]]></output>
                </test-case>
                <test-case id="0-1165" name="errors.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1024736512" result="Passed" start-time="2024-02-19T13:49:35.3388657Z" end-time="2024-02-19T13:49:35.3393427Z" duration="0.000477" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '2(blah)';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '2(blah)'
]]></output>
                </test-case>
                <test-case id="0-1166" name="errors.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="36894423" result="Passed" start-time="2024-02-19T13:49:35.3393539Z" end-time="2024-02-19T13:49:35.3397002Z" duration="0.000346" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '2()';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '2()'
]]></output>
                </test-case>
                <test-case id="0-1167" name="errors.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1721503936" result="Passed" start-time="2024-02-19T13:49:35.3397108Z" end-time="2024-02-19T13:49:35.3408806Z" duration="0.001170" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '3(?)';&#xA; result: error T1008" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1008.
Actually thrown T1008.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '3(?)'
]]></output>
                </test-case>
                <test-case id="0-1168" name="errors.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="194879431" result="Passed" start-time="2024-02-19T13:49:35.3408939Z" end-time="2024-02-19T13:49:35.3412368Z" duration="0.000343" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '1=';&#xA; result: error S0207" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0207.
Actually thrown S0207.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '1='
]]></output>
                </test-case>
                <test-case id="0-1169" name="errors.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="696237642" result="Passed" start-time="2024-02-19T13:49:35.3412476Z" end-time="2024-02-19T13:49:35.3416018Z" duration="0.000354" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'function(x){$x}(3)';&#xA; result: error S0208" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0208.
Actually thrown ????.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'function(x){$x}(3)'
]]></output>
                </test-case>
                <test-case id="0-1170" name="errors.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="658510915" result="Passed" start-time="2024-02-19T13:49:35.3416125Z" end-time="2024-02-19T13:49:35.3420954Z" duration="0.000483" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'x:=1';&#xA; result: error S0212" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0212.
Actually thrown S0212.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'x:=1'
]]></output>
                </test-case>
                <test-case id="0-1171" name="errors.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="820180962" result="Passed" start-time="2024-02-19T13:49:35.3421089Z" end-time="2024-02-19T13:49:35.3426447Z" duration="0.000536" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '2:=1';&#xA; result: error S0212" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0212.
Actually thrown S0212.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '2:=1'
]]></output>
                </test-case>
                <test-case id="0-1172" name="errors.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1917884446" result="Passed" start-time="2024-02-19T13:49:35.3426564Z" end-time="2024-02-19T13:49:35.3433819Z" duration="0.000726" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$foo()';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$foo()'
]]></output>
                </test-case>
                <test-case id="0-1173" name="errors.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1221263102" result="Passed" start-time="2024-02-19T13:49:35.3433979Z" end-time="2024-02-19T13:49:35.3440251Z" duration="0.000627" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '55=&gt;5';&#xA; result: error S0211" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0211.
Actually thrown S0211.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '55=>5'
]]></output>
                </test-case>
                <test-case id="0-1174" name="errors.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="391928691" result="Passed" start-time="2024-02-19T13:49:35.3440375Z" end-time="2024-02-19T13:49:35.3445171Z" duration="0.000480" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Ssum(:)';&#xA; result: error S0211" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0211.
Actually thrown S0211.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Ssum(:)'
]]></output>
                </test-case>
                <test-case id="0-1175" name="errors.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1552318974" result="Passed" start-time="2024-02-19T13:49:35.3445297Z" end-time="2024-02-19T13:49:35.3451242Z" duration="0.000595" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1,2,3]{&quot;num&quot;: $}[true]';&#xA; result: error S0209" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0209.
Actually thrown S0209.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1,2,3]{"num": $}[true]'
]]></output>
                </test-case>
                <test-case id="0-1176" name="errors.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="591084249" result="Passed" start-time="2024-02-19T13:49:35.3451349Z" end-time="2024-02-19T13:49:35.3456973Z" duration="0.000563" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1,2,3]{&quot;num&quot;: $}{&quot;num&quot;: $}';&#xA; result: error S0210" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0210.
Actually thrown S0210.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1,2,3]{"num": $}{"num": $}'
]]></output>
                </test-case>
                <test-case id="0-1177" name="errors.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1744957529" result="Passed" start-time="2024-02-19T13:49:35.3457095Z" end-time="2024-02-19T13:49:35.3468246Z" duration="0.001115" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].Product;';&#xA; result: error S0201" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0201.
Actually thrown S0201.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order[0].Product;'
]]></output>
                </test-case>
                <test-case id="0-1178" name="errors.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="671681870" result="Passed" start-time="2024-02-19T13:49:35.3468360Z" end-time="2024-02-19T13:49:35.3473932Z" duration="0.000557" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $A := function(){$min(2, 3)}; $A() )';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '( $A := function(){$min(2, 3)}; $A() )'
]]></output>
                </test-case>
                <test-case id="0-1179" name="errors.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.errors.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="273322747" result="Passed" start-time="2024-02-19T13:49:35.3474062Z" end-time="2024-02-19T13:49:35.3476275Z" duration="0.000221" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $B := function(){''}; $A := function(){2 + $B()}; $A() )';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '( $B := function(){''}; $A := function(){2 + $B()}; $A() )'
]]></output>
                </test-case>
                <test-case id="0-1180" name="fields.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.fields.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1232025058" result="Passed" start-time="2024-02-19T13:49:35.3476432Z" end-time="2024-02-19T13:49:35.3477763Z" duration="0.000133" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar';&#xA; result: 42" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar'
Result: '42'
Expected: '42'
]]></output>
                </test-case>
                <test-case id="0-1181" name="fields.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.fields.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1192901852" result="Passed" start-time="2024-02-19T13:49:35.3477867Z" end-time="2024-02-19T13:49:35.3479042Z" duration="0.000118" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah';&#xA; result: [{&quot;baz&quot;:{&quot;fud&quot;:&quot;hello&quot;}},{&quot;baz&quot;:{&quot;fud&quot;:&quot;world&quot;}},{&quot;bazz&quot;:&quot;gotcha&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah'
Result: '[{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"}]'
Expected: '[{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"}]'
]]></output>
                </test-case>
                <test-case id="0-1182" name="fields.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.fields.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="286592928" result="Passed" start-time="2024-02-19T13:49:35.3479123Z" end-time="2024-02-19T13:49:35.3497669Z" duration="0.001855" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.bazz';&#xA; result: &quot;gotcha&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.bazz'
Result: '"gotcha"'
Expected: '"gotcha"'
]]></output>
                </test-case>
                <test-case id="0-1183" name="fields.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.fields.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1540356042" result="Passed" start-time="2024-02-19T13:49:35.3497842Z" end-time="2024-02-19T13:49:35.3499208Z" duration="0.000137" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz';&#xA; result: [{&quot;fud&quot;:&quot;hello&quot;},{&quot;fud&quot;:&quot;world&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz'
Result: '[{"fud":"hello"},{"fud":"world"}]'
Expected: '[{"fud":"hello"},{"fud":"world"}]'
]]></output>
                </test-case>
                <test-case id="0-1184" name="fields.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.fields.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="463840681" result="Passed" start-time="2024-02-19T13:49:35.3499310Z" end-time="2024-02-19T13:49:35.3500302Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz.fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz.fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1185" name="fields.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.fields.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1117495215" result="Passed" start-time="2024-02-19T13:49:35.3500417Z" end-time="2024-02-19T13:49:35.3502270Z" duration="0.000186" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Other.Misc';&#xA; result: null" />
                  </properties>
                  <output><![CDATA[Expr is 'Other.Misc'
Result: 'null'
Expected: 'null'
]]></output>
                </test-case>
                <test-case id="0-1186" name="fields.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.fields.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1194240322" result="Passed" start-time="2024-02-19T13:49:35.3502366Z" end-time="2024-02-19T13:49:35.3503075Z" duration="0.000071" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bazz';&#xA; result: &quot;gotcha&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'bazz'
Result: '"gotcha"'
Expected: '"gotcha"'
]]></output>
                </test-case>
                <test-case id="0-1187" name="fields.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.fields.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1410396666" result="Passed" start-time="2024-02-19T13:49:35.3503144Z" end-time="2024-02-19T13:49:35.3503978Z" duration="0.000084" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-1188" name="flattening.array-inputs[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1046988516" result="Passed" start-time="2024-02-19T13:49:35.3504099Z" end-time="2024-02-19T13:49:35.3505058Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'phone';&#xA; result: [{&quot;number&quot;:0},{&quot;number&quot;:1},{&quot;number&quot;:2}]" />
                  </properties>
                  <output><![CDATA[Expr is 'phone'
Result: '[{"number":0},{"number":1},{"number":2}]'
Expected: '[{"number":0},{"number":1},{"number":2}]'
]]></output>
                </test-case>
                <test-case id="0-1189" name="flattening.array-inputs[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1592028183" result="Passed" start-time="2024-02-19T13:49:35.3505154Z" end-time="2024-02-19T13:49:35.3505947Z" duration="0.000079" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'phone[0]';&#xA; result: {&quot;number&quot;:0}" />
                  </properties>
                  <output><![CDATA[Expr is 'phone[0]'
Result: '{"number":0}'
Expected: '{"number":0}'
]]></output>
                </test-case>
                <test-case id="0-1190" name="flattening.array-inputs[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="797271738" result="Passed" start-time="2024-02-19T13:49:35.3506020Z" end-time="2024-02-19T13:49:35.3506808Z" duration="0.000079" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'phone[0][]';&#xA; result: [{&quot;number&quot;:0}]" />
                  </properties>
                  <output><![CDATA[Expr is 'phone[0][]'
Result: '[{"number":0}]'
Expected: '[{"number":0}]'
]]></output>
                </test-case>
                <test-case id="0-1191" name="flattening.array-inputs[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="306973411" result="Passed" start-time="2024-02-19T13:49:35.3506893Z" end-time="2024-02-19T13:49:35.3507761Z" duration="0.000087" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'phone[0].number';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is 'phone[0].number'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1192" name="flattening.array-inputs[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1590508526" result="Passed" start-time="2024-02-19T13:49:35.3507850Z" end-time="2024-02-19T13:49:35.3508707Z" duration="0.000086" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(phone)[0].number';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '(phone)[0].number'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1193" name="flattening.array-inputs[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1528901198" result="Passed" start-time="2024-02-19T13:49:35.3508784Z" end-time="2024-02-19T13:49:35.3509458Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.phone[0].number';&#xA; result: [0,1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '$.phone[0].number'
Result: '[0,1,2]'
Expected: '[0,1,2]'
]]></output>
                </test-case>
                <test-case id="0-1194" name="flattening.array-inputs[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1102399069" result="Passed" start-time="2024-02-19T13:49:35.3509516Z" end-time="2024-02-19T13:49:35.3510082Z" duration="0.000057" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{'Hello':'World'}';&#xA; result: {&quot;Hello&quot;:&quot;World&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is '{'Hello':'World'}'
Result: '{"Hello":"World"}'
Expected: '{"Hello":"World"}'
]]></output>
                </test-case>
                <test-case id="0-1195" name="flattening.array-inputs[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.array-inputs[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="53794954" result="Passed" start-time="2024-02-19T13:49:35.3510143Z" end-time="2024-02-19T13:49:35.3510603Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.{'Hello':'World'}';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$.{'Hello':'World'}'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1196" name="flattening.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="537353464" result="Passed" start-time="2024-02-19T13:49:35.3510654Z" end-time="2024-02-19T13:49:35.3511950Z" duration="0.000130" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.[Product.Price]';&#xA; result: [[34.45,21.67],[34.45,107.99]]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.[Product.Price]'
Result: '[[34.45,21.67],[34.45,107.99]]'
Expected: '[[34.45,21.67],[34.45,107.99]]'
]]></output>
                </test-case>
                <test-case id="0-1197" name="flattening.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1141495548" result="Passed" start-time="2024-02-19T13:49:35.3512041Z" end-time="2024-02-19T13:49:35.3512701Z" duration="0.000066" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.nest0';&#xA; result: [1,2,3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '$.nest0'
Result: '[1,2,3,4]'
Expected: '[1,2,3,4]'
]]></output>
                </test-case>
                <test-case id="0-1198" name="flattening.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1205561223" result="Passed" start-time="2024-02-19T13:49:35.3512787Z" end-time="2024-02-19T13:49:35.3513405Z" duration="0.000062" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0';&#xA; result: [1,2,3,4]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0'
Result: '[1,2,3,4]'
Expected: '[1,2,3,4]'
]]></output>
                </test-case>
                <test-case id="0-1199" name="flattening.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1448172245" result="Passed" start-time="2024-02-19T13:49:35.3513475Z" end-time="2024-02-19T13:49:35.3514139Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[0]';&#xA; result: {&quot;nest0&quot;:[1,2]}" />
                  </properties>
                  <output><![CDATA[Expr is '$[0]'
Result: '{"nest0":[1,2]}'
Expected: '{"nest0":[1,2]}'
]]></output>
                </test-case>
                <test-case id="0-1200" name="flattening.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="204743410" result="Passed" start-time="2024-02-19T13:49:35.3514233Z" end-time="2024-02-19T13:49:35.3514877Z" duration="0.000064" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[1]';&#xA; result: {&quot;nest0&quot;:[3,4]}" />
                  </properties>
                  <output><![CDATA[Expr is '$[1]'
Result: '{"nest0":[3,4]}'
Expected: '{"nest0":[3,4]}'
]]></output>
                </test-case>
                <test-case id="0-1201" name="flattening.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1921589972" result="Passed" start-time="2024-02-19T13:49:35.3514942Z" end-time="2024-02-19T13:49:35.3515505Z" duration="0.000056" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[-1]';&#xA; result: {&quot;nest0&quot;:[3,4]}" />
                  </properties>
                  <output><![CDATA[Expr is '$[-1]'
Result: '{"nest0":[3,4]}'
Expected: '{"nest0":[3,4]}'
]]></output>
                </test-case>
                <test-case id="0-1202" name="flattening.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="375381948" result="Passed" start-time="2024-02-19T13:49:35.3515563Z" end-time="2024-02-19T13:49:35.3516104Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[0].nest0';&#xA; result: [1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '$[0].nest0'
Result: '[1,2]'
Expected: '[1,2]'
]]></output>
                </test-case>
                <test-case id="0-1203" name="flattening.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="122721924" result="Passed" start-time="2024-02-19T13:49:35.3516160Z" end-time="2024-02-19T13:49:35.3516685Z" duration="0.000053" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[1].nest0';&#xA; result: [3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '$[1].nest0'
Result: '[3,4]'
Expected: '[3,4]'
]]></output>
                </test-case>
                <test-case id="0-1204" name="flattening.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="747524925" result="Passed" start-time="2024-02-19T13:49:35.3516740Z" end-time="2024-02-19T13:49:35.3517342Z" duration="0.000060" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[0].nest0[0]';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$[0].nest0[0]'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1205" name="flattening.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1159866193" result="Passed" start-time="2024-02-19T13:49:35.3517429Z" end-time="2024-02-19T13:49:35.3518791Z" duration="0.000136" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.[nest1.[nest2.[nest3]]]';&#xA; result: [[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.[nest1.[nest2.[nest3]]]'
Result: '[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]'
Expected: '[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]'
]]></output>
                </test-case>
                <test-case id="0-1206" name="flattening.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1079204693" result="Passed" start-time="2024-02-19T13:49:35.3518894Z" end-time="2024-02-19T13:49:35.3520037Z" duration="0.000114" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1.[nest2.[nest3]]';&#xA; result: [[[1],[2]],[[3],[4]],[[5],[6]],[[7],[8]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1.[nest2.[nest3]]'
Result: '[[[1],[2]],[[3],[4]],[[5],[6]],[[7],[8]]]'
Expected: '[[[1],[2]],[[3],[4]],[[5],[6]],[[7],[8]]]'
]]></output>
                </test-case>
                <test-case id="0-1207" name="flattening.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="950212417" result="Passed" start-time="2024-02-19T13:49:35.3520120Z" end-time="2024-02-19T13:49:35.3521266Z" duration="0.000115" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.[nest1.nest2.[nest3]]';&#xA; result: [[[1],[2],[3],[4]],[[5],[6],[7],[8]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.[nest1.nest2.[nest3]]'
Result: '[[[1],[2],[3],[4]],[[5],[6],[7],[8]]]'
Expected: '[[[1],[2],[3],[4]],[[5],[6],[7],[8]]]'
]]></output>
                </test-case>
                <test-case id="0-1208" name="flattening.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="990112892" result="Passed" start-time="2024-02-19T13:49:35.3521344Z" end-time="2024-02-19T13:49:35.3522580Z" duration="0.000124" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.[nest1.[nest2.nest3]]';&#xA; result: [[[1,2],[3,4]],[[5,6],[7,8]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.[nest1.[nest2.nest3]]'
Result: '[[[1,2],[3,4]],[[5,6],[7,8]]]'
Expected: '[[[1,2],[3,4]],[[5,6],[7,8]]]'
]]></output>
                </test-case>
                <test-case id="0-1209" name="flattening.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="212954026" result="Passed" start-time="2024-02-19T13:49:35.3522681Z" end-time="2024-02-19T13:49:35.3523738Z" duration="0.000106" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.[nest1.nest2.nest3]';&#xA; result: [[1,2,3,4],[5,6,7,8]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.[nest1.nest2.nest3]'
Result: '[[1,2,3,4],[5,6,7,8]]'
Expected: '[[1,2,3,4],[5,6,7,8]]'
]]></output>
                </test-case>
                <test-case id="0-1210" name="flattening.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1304070783" result="Passed" start-time="2024-02-19T13:49:35.3523827Z" end-time="2024-02-19T13:49:35.3525322Z" duration="0.000150" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1.[nest2.nest3]';&#xA; result: [[1,2],[3,4],[5,6],[7,8]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1.[nest2.nest3]'
Result: '[[1,2],[3,4],[5,6],[7,8]]'
Expected: '[[1,2],[3,4],[5,6],[7,8]]'
]]></output>
                </test-case>
                <test-case id="0-1211" name="flattening.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1667522560" result="Passed" start-time="2024-02-19T13:49:35.3525435Z" end-time="2024-02-19T13:49:35.3527032Z" duration="0.000160" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1.nest2.[nest3]';&#xA; result: [[1],[2],[3],[4],[5],[6],[7],[8]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1.nest2.[nest3]'
Result: '[[1],[2],[3],[4],[5],[6],[7],[8]]'
Expected: '[[1],[2],[3],[4],[5],[6],[7],[8]]'
]]></output>
                </test-case>
                <test-case id="0-1212" name="flattening.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2069952197" result="Passed" start-time="2024-02-19T13:49:35.3527138Z" end-time="2024-02-19T13:49:35.3528206Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1.nest2.nest3';&#xA; result: [1,2,3,4,5,6,7,8]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1.nest2.nest3'
Result: '[1,2,3,4,5,6,7,8]'
Expected: '[1,2,3,4,5,6,7,8]'
]]></output>
                </test-case>
                <test-case id="0-1213" name="flattening.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="904872843" result="Passed" start-time="2024-02-19T13:49:35.3528287Z" end-time="2024-02-19T13:49:35.3529598Z" duration="0.000131" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.[nest1.[nest2.[nest3]]]';&#xA; result: [[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.[nest1.[nest2.[nest3]]]'
Result: '[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]'
Expected: '[[[[1],[2]],[[3],[4]]],[[[5],[6]],[[7],[8]]]]'
]]></output>
                </test-case>
                <test-case id="0-1214" name="flattening.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1611556442" result="Passed" start-time="2024-02-19T13:49:35.3529809Z" end-time="2024-02-19T13:49:35.3531055Z" duration="0.000125" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1.[nest2.[nest3]]';&#xA; result: [[[1],[2]],[[3],[4]],[[5],[6]],[[7],[8]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1.[nest2.[nest3]]'
Result: '[[[1],[2]],[[3],[4]],[[5],[6]],[[7],[8]]]'
Expected: '[[[1],[2]],[[3],[4]],[[5],[6]],[[7],[8]]]'
]]></output>
                </test-case>
                <test-case id="0-1215" name="flattening.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1691420478" result="Passed" start-time="2024-02-19T13:49:35.3531128Z" end-time="2024-02-19T13:49:35.3532292Z" duration="0.000117" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.[nest1.nest2.[nest3]]';&#xA; result: [[[1],[2],[3],[4]],[[5],[6],[7],[8]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.[nest1.nest2.[nest3]]'
Result: '[[[1],[2],[3],[4]],[[5],[6],[7],[8]]]'
Expected: '[[[1],[2],[3],[4]],[[5],[6],[7],[8]]]'
]]></output>
                </test-case>
                <test-case id="0-1216" name="flattening.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="511030024" result="Passed" start-time="2024-02-19T13:49:35.3532364Z" end-time="2024-02-19T13:49:35.3533422Z" duration="0.000106" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.[nest1.[nest2.nest3]]';&#xA; result: [[[1,2],[3,4]],[[5,6],[7,8]]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.[nest1.[nest2.nest3]]'
Result: '[[[1,2],[3,4]],[[5,6],[7,8]]]'
Expected: '[[[1,2],[3,4]],[[5,6],[7,8]]]'
]]></output>
                </test-case>
                <test-case id="0-1217" name="flattening.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="825458409" result="Passed" start-time="2024-02-19T13:49:35.3533500Z" end-time="2024-02-19T13:49:35.3534455Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.[nest1.nest2.nest3]';&#xA; result: [[1,2,3,4],[5,6,7,8]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.[nest1.nest2.nest3]'
Result: '[[1,2,3,4],[5,6,7,8]]'
Expected: '[[1,2,3,4],[5,6,7,8]]'
]]></output>
                </test-case>
                <test-case id="0-1218" name="flattening.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1691836652" result="Passed" start-time="2024-02-19T13:49:35.3534544Z" end-time="2024-02-19T13:49:35.3535689Z" duration="0.000115" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1.[nest2.nest3]';&#xA; result: [[1,2],[3,4],[5,6],[7,8]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1.[nest2.nest3]'
Result: '[[1,2],[3,4],[5,6],[7,8]]'
Expected: '[[1,2],[3,4],[5,6],[7,8]]'
]]></output>
                </test-case>
                <test-case id="0-1219" name="flattening.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="379134939" result="Passed" start-time="2024-02-19T13:49:35.3535771Z" end-time="2024-02-19T13:49:35.3536716Z" duration="0.000095" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1.nest2.[nest3]';&#xA; result: [[1],[2],[3],[4],[5],[6],[7],[8]]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1.nest2.[nest3]'
Result: '[[1],[2],[3],[4],[5],[6],[7],[8]]'
Expected: '[[1],[2],[3],[4],[5],[6],[7],[8]]'
]]></output>
                </test-case>
                <test-case id="0-1220" name="flattening.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1977979837" result="Passed" start-time="2024-02-19T13:49:35.3536788Z" end-time="2024-02-19T13:49:35.3537474Z" duration="0.000069" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1.nest2.nest3';&#xA; result: [1,2,3,4,5,6,7,8]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1.nest2.nest3'
Result: '[1,2,3,4,5,6,7,8]'
Expected: '[1,2,3,4,5,6,7,8]'
]]></output>
                </test-case>
                <test-case id="0-1221" name="flattening.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="773981404" result="Passed" start-time="2024-02-19T13:49:35.3537534Z" end-time="2024-02-19T13:49:35.3538070Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;a&quot;: 1 }.a';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '{"a": 1 }.a'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1222" name="flattening.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="674515420" result="Passed" start-time="2024-02-19T13:49:35.3538130Z" end-time="2024-02-19T13:49:35.3538661Z" duration="0.000053" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'a';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is 'a'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1223" name="flattening.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="750334895" result="Passed" start-time="2024-02-19T13:49:35.3538739Z" end-time="2024-02-19T13:49:35.3539592Z" duration="0.000085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;a&quot;: [1] }.a';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is '{"a": [1] }.a'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1224" name="flattening.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2046449551" result="Passed" start-time="2024-02-19T13:49:35.3539676Z" end-time="2024-02-19T13:49:35.3540357Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'a';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is 'a'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1225" name="flattening.case029" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case029" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="351537504" result="Passed" start-time="2024-02-19T13:49:35.3540422Z" end-time="2024-02-19T13:49:35.3541117Z" duration="0.000070" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;a&quot;: [[1]] }.a';&#xA; result: [[1]]" />
                  </properties>
                  <output><![CDATA[Expr is '{"a": [[1]] }.a'
Result: '[[1]]'
Expected: '[[1]]'
]]></output>
                </test-case>
                <test-case id="0-1226" name="flattening.case030" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case030" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1377156083" result="Passed" start-time="2024-02-19T13:49:35.3541205Z" end-time="2024-02-19T13:49:35.3541941Z" duration="0.000074" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'a';&#xA; result: [[1]]" />
                  </properties>
                  <output><![CDATA[Expr is 'a'
Result: '[[1]]'
Expected: '[[1]]'
]]></output>
                </test-case>
                <test-case id="0-1227" name="flattening.case031" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case031" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="388983248" result="Passed" start-time="2024-02-19T13:49:35.3542050Z" end-time="2024-02-19T13:49:35.3542799Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[{&quot;a&quot;:[1,2]}, {&quot;a&quot;:[3]}].a';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is '[{"a":[1,2]}, {"a":[3]}].a'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
                <test-case id="0-1228" name="flattening.case032" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case032" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="118864033" result="Passed" start-time="2024-02-19T13:49:35.3542866Z" end-time="2024-02-19T13:49:35.3543382Z" duration="0.000052" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'a';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is 'a'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
                <test-case id="0-1229" name="flattening.case033" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case033" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="338133737" result="Passed" start-time="2024-02-19T13:49:35.3543461Z" end-time="2024-02-19T13:49:35.3544360Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[{&quot;a&quot;:[{&quot;b&quot;:[1]}, {&quot;b&quot;:[2]}]}, {&quot;a&quot;:[{&quot;b&quot;:[3]}, {&quot;b&quot;:[4]}]}].a[0].b';&#xA; result: [1,3]" />
                  </properties>
                  <output><![CDATA[Expr is '[{"a":[{"b":[1]}, {"b":[2]}]}, {"a":[{"b":[3]}, {"b":[4]}]}].a[0].b'
Result: '[1,3]'
Expected: '[1,3]'
]]></output>
                </test-case>
                <test-case id="0-1230" name="flattening.case034" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case034" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1014965510" result="Passed" start-time="2024-02-19T13:49:35.3544453Z" end-time="2024-02-19T13:49:35.3545376Z" duration="0.000093" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'a[0].b';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is 'a[0].b'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1231" name="flattening.case034a" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case034a" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1597072348" result="Passed" start-time="2024-02-19T13:49:35.3545481Z" end-time="2024-02-19T13:49:35.3546480Z" duration="0.000100" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.a[0].b';&#xA; result: [1,3]" />
                  </properties>
                  <output><![CDATA[Expr is '$.a[0].b'
Result: '[1,3]'
Expected: '[1,3]'
]]></output>
                </test-case>
                <test-case id="0-1232" name="flattening.case035" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case035" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="539396306" result="Passed" start-time="2024-02-19T13:49:35.3546577Z" end-time="2024-02-19T13:49:35.3547589Z" duration="0.000101" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'a.b[0]';&#xA; result: [1,2,3,4]" />
                  </properties>
                  <output><![CDATA[Expr is 'a.b[0]'
Result: '[1,2,3,4]'
Expected: '[1,2,3,4]'
]]></output>
                </test-case>
                <test-case id="0-1233" name="flattening.case036" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case036" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1370993272" result="Passed" start-time="2024-02-19T13:49:35.3547689Z" end-time="2024-02-19T13:49:35.3549033Z" duration="0.000135" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Phone[type=&quot;mobile&quot;].number';&#xA; result: &quot;077 7700 1234&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Phone[type="mobile"].number'
Result: '"077 7700 1234"'
Expected: '"077 7700 1234"'
]]></output>
                </test-case>
                <test-case id="0-1234" name="flattening.case037" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case037" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="68579337" result="Passed" start-time="2024-02-19T13:49:35.3549140Z" end-time="2024-02-19T13:49:35.3550237Z" duration="0.000110" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Phone[type=&quot;mobile&quot;][].number';&#xA; result: [&quot;077 7700 1234&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Phone[type="mobile"][].number'
Result: '["077 7700 1234"]'
Expected: '["077 7700 1234"]'
]]></output>
                </test-case>
                <test-case id="0-1235" name="flattening.case038" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case038" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1457918733" result="Passed" start-time="2024-02-19T13:49:35.3550317Z" end-time="2024-02-19T13:49:35.3551310Z" duration="0.000100" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Phone[][type=&quot;mobile&quot;].number';&#xA; result: [&quot;077 7700 1234&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Phone[][type="mobile"].number'
Result: '["077 7700 1234"]'
Expected: '["077 7700 1234"]'
]]></output>
                </test-case>
                <test-case id="0-1236" name="flattening.case039" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case039" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="817519904" result="Passed" start-time="2024-02-19T13:49:35.3551391Z" end-time="2024-02-19T13:49:35.3552366Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Phone[type=&quot;office&quot;][].number';&#xA; result: [&quot;01962 001234&quot;,&quot;01962 001235&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Phone[type="office"][].number'
Result: '["01962 001234","01962 001235"]'
Expected: '["01962 001234","01962 001235"]'
]]></output>
                </test-case>
                <test-case id="0-1237" name="flattening.case040" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case040" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="163871004" result="Passed" start-time="2024-02-19T13:49:35.3552441Z" end-time="2024-02-19T13:49:35.3557193Z" duration="0.000475" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Phone{type: number}';&#xA; result: {&quot;home&quot;:&quot;0203 544 1234&quot;,&quot;office&quot;:[&quot;01962 001234&quot;,&quot;01962 001235&quot;],&quot;mobile&quot;:&quot;077 7700 1234&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'Phone{type: number}'
Result: '{"home":"0203 544 1234","office":["01962 001234","01962 001235"],"mobile":"077 7700 1234"}'
Expected: '{"home":"0203 544 1234","office":["01962 001234","01962 001235"],"mobile":"077 7700 1234"}'
]]></output>
                </test-case>
                <test-case id="0-1238" name="flattening.case041" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case041" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="792831117" result="Passed" start-time="2024-02-19T13:49:35.3557291Z" end-time="2024-02-19T13:49:35.3558690Z" duration="0.000140" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Phone{type: number[]}';&#xA; result: {&quot;home&quot;:[&quot;0203 544 1234&quot;],&quot;office&quot;:[&quot;01962 001234&quot;,&quot;01962 001235&quot;],&quot;mobile&quot;:[&quot;077 7700 1234&quot;]}" />
                  </properties>
                  <output><![CDATA[Expr is 'Phone{type: number[]}'
Result: '{"home":["0203 544 1234"],"office":["01962 001234","01962 001235"],"mobile":["077 7700 1234"]}'
Expected: '{"home":["0203 544 1234"],"office":["01962 001234","01962 001235"],"mobile":["077 7700 1234"]}'
]]></output>
                </test-case>
                <test-case id="0-1239" name="flattening.case042" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case042" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1451458135" result="Passed" start-time="2024-02-19T13:49:35.3558915Z" end-time="2024-02-19T13:49:35.3560309Z" duration="0.000139" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[type='command'][]';&#xA; result: [{&quot;type&quot;:&quot;command&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is '$[type='command'][]'
Result: '[{"type":"command"}]'
Expected: '[{"type":"command"}]'
]]></output>
                </test-case>
                <test-case id="0-1240" name="flattening.case043" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case043" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="38290522" result="Passed" start-time="2024-02-19T13:49:35.3560539Z" end-time="2024-02-19T13:49:35.3561651Z" duration="0.000111" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[][type='command']';&#xA; result: [{&quot;type&quot;:&quot;command&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is '$[][type='command']'
Result: '[{"type":"command"}]'
Expected: '[{"type":"command"}]'
]]></output>
                </test-case>
                <test-case id="0-1241" name="flattening.case044" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case044" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="244027905" result="Passed" start-time="2024-02-19T13:49:35.3561764Z" end-time="2024-02-19T13:49:35.3568695Z" duration="0.000693" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$filter($, function($e) { $e != 0 })[]';&#xA; result: [5]" />
                  </properties>
                  <output><![CDATA[Expr is '$filter($, function($e) { $e != 0 })[]'
Result: '[5]'
Expected: '[5]'
]]></output>
                </test-case>
                <test-case id="0-1242" name="flattening.case045" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.case045" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="420283774" result="Passed" start-time="2024-02-19T13:49:35.3568837Z" end-time="2024-02-19T13:49:35.3569925Z" duration="0.000109" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.tags[title='example'][]';&#xA; result: [{&quot;title&quot;:&quot;example&quot;,&quot;description&quot;:&quot;Hello&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is '$.tags[title='example'][]'
Result: '[{"title":"example","description":"Hello"}]'
Expected: '[{"title":"example","description":"Hello"}]'
]]></output>
                </test-case>
                <test-case id="0-1243" name="flattening.large[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.large[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="834034490" result="Passed" start-time="2024-02-19T13:49:35.3570020Z" end-time="2024-02-19T13:49:36.8194380Z" duration="1.462437" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $data := { 'number': [1..2e5].$string() }; $values := $data.number; $count($values) )';&#xA; result: 200000" />
                  </properties>
                  <output><![CDATA[Expr is '( $data := { 'number': [1..2e5].$string() }; $values := $data.number; $count($values) )'
Result: '200000'
Expected: '200000'
]]></output>
                </test-case>
                <test-case id="0-1244" name="flattening.large[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.large[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="287957400" result="Passed" start-time="2024-02-19T13:49:36.8194791Z" end-time="2024-02-19T13:49:38.2490341Z" duration="1.429555" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $data := { 'number': [1..2e5].$string() }; $values := $lookup($data, 'number'); $count($values) )';&#xA; result: 200000" />
                  </properties>
                  <output><![CDATA[Expr is '( $data := { 'number': [1..2e5].$string() }; $values := $lookup($data, 'number'); $count($values) )'
Result: '200000'
Expected: '200000'
]]></output>
                </test-case>
                <test-case id="0-1245" name="flattening.sequence-of-arrays[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.sequence-of-arrays[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1277232825" result="Passed" start-time="2024-02-19T13:49:38.2490714Z" end-time="2024-02-19T13:49:38.2492395Z" duration="0.000168" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.[value,epochSeconds]';&#xA; result: [[3,1578381600],[5,1578381700]]" />
                  </properties>
                  <output><![CDATA[Expr is '$.[value,epochSeconds]'
Result: '[[3,1578381600],[5,1578381700]]'
Expected: '[[3,1578381600],[5,1578381700]]'
]]></output>
                </test-case>
                <test-case id="0-1246" name="flattening.sequence-of-arrays[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.sequence-of-arrays[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="384504861" result="Passed" start-time="2024-02-19T13:49:38.2492475Z" end-time="2024-02-19T13:49:38.2493090Z" duration="0.000062" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.[value,epochSeconds]';&#xA; result: [3,1578381600]" />
                  </properties>
                  <output><![CDATA[Expr is '$.[value,epochSeconds]'
Result: '[3,1578381600]'
Expected: '[3,1578381600]'
]]></output>
                </test-case>
                <test-case id="0-1247" name="flattening.sequence-of-arrays[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.sequence-of-arrays[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="685635683" result="Passed" start-time="2024-02-19T13:49:38.2493157Z" end-time="2024-02-19T13:49:38.2493787Z" duration="0.000063" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.[value,epochSeconds][]';&#xA; result: [[3,1578381600],[5,1578381700]]" />
                  </properties>
                  <output><![CDATA[Expr is '$.[value,epochSeconds][]'
Result: '[[3,1578381600],[5,1578381700]]'
Expected: '[[3,1578381600],[5,1578381700]]'
]]></output>
                </test-case>
                <test-case id="0-1248" name="flattening.sequence-of-arrays[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.flattening.sequence-of-arrays[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2064828403" result="Passed" start-time="2024-02-19T13:49:38.2493855Z" end-time="2024-02-19T13:49:38.2494438Z" duration="0.000058" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.[value,epochSeconds][]';&#xA; result: [[3,1578381600]]" />
                  </properties>
                  <output><![CDATA[Expr is '$.[value,epochSeconds][]'
Result: '[[3,1578381600]]'
Expected: '[[3,1578381600]]'
]]></output>
                </test-case>
                <test-case id="0-1249" name="function-abs.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-abs.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1558462238" result="Passed" start-time="2024-02-19T13:49:38.2494505Z" end-time="2024-02-19T13:49:38.2495228Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$abs(3.7)';&#xA; result: 3.7" />
                  </properties>
                  <output><![CDATA[Expr is '$abs(3.7)'
Result: '3.7'
Expected: '3.7'
]]></output>
                </test-case>
                <test-case id="0-1250" name="function-abs.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-abs.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1690248577" result="Passed" start-time="2024-02-19T13:49:38.2495292Z" end-time="2024-02-19T13:49:38.2495862Z" duration="0.000057" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$abs(-3.7)';&#xA; result: 3.7" />
                  </properties>
                  <output><![CDATA[Expr is '$abs(-3.7)'
Result: '3.7'
Expected: '3.7'
]]></output>
                </test-case>
                <test-case id="0-1251" name="function-abs.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-abs.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1859378702" result="Passed" start-time="2024-02-19T13:49:38.2495926Z" end-time="2024-02-19T13:49:38.2496417Z" duration="0.000049" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$abs(0)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$abs(0)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1252" name="function-abs.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-abs.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1597142543" result="Passed" start-time="2024-02-19T13:49:38.2496477Z" end-time="2024-02-19T13:49:38.2496948Z" duration="0.000047" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$abs(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$abs(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1253" name="function-append.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-append.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="826426284" result="Passed" start-time="2024-02-19T13:49:38.2497038Z" end-time="2024-02-19T13:49:38.2499294Z" duration="0.000226" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$append([1,2], [3,4])';&#xA; result: [1,2,3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '$append([1,2], [3,4])'
Result: '[1,2,3,4]'
Expected: '[1,2,3,4]'
]]></output>
                </test-case>
                <test-case id="0-1254" name="function-append.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-append.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1617676055" result="Passed" start-time="2024-02-19T13:49:38.2499406Z" end-time="2024-02-19T13:49:38.2500382Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$append(1, [3,4])';&#xA; result: [1,3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '$append(1, [3,4])'
Result: '[1,3,4]'
Expected: '[1,3,4]'
]]></output>
                </test-case>
                <test-case id="0-1255" name="function-append.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-append.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1578245653" result="Passed" start-time="2024-02-19T13:49:38.2500458Z" end-time="2024-02-19T13:49:38.2501246Z" duration="0.000079" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$append(1,2)';&#xA; result: [1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '$append(1,2)'
Result: '[1,2]'
Expected: '[1,2]'
]]></output>
                </test-case>
                <test-case id="0-1256" name="function-append.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-append.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1247074552" result="Passed" start-time="2024-02-19T13:49:38.2501311Z" end-time="2024-02-19T13:49:38.2501973Z" duration="0.000066" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$append(1,notexist)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$append(1,notexist)'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1257" name="function-append.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-append.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1772530700" result="Passed" start-time="2024-02-19T13:49:38.2502039Z" end-time="2024-02-19T13:49:38.2502888Z" duration="0.000085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$append(notexist, [2,3,4])';&#xA; result: [2,3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '$append(notexist, [2,3,4])'
Result: '[2,3,4]'
Expected: '[2,3,4]'
]]></output>
                </test-case>
                <test-case id="0-1258" name="function-append.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-append.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="223756020" result="Passed" start-time="2024-02-19T13:49:38.2502998Z" end-time="2024-02-19T13:49:38.2504412Z" duration="0.000141" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($append($data.a, [2]); $data.a)';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is '($append($data.a, [2]); $data.a)'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1259" name="function-applications.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="395987421" result="Passed" start-time="2024-02-19T13:49:38.2504505Z" end-time="2024-02-19T13:49:38.2512124Z" duration="0.000762" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].OrderID ~&gt; $uppercase()';&#xA; result: &quot;ORDER103&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order[0].OrderID ~> $uppercase()'
Result: '"ORDER103"'
Expected: '"ORDER103"'
]]></output>
                </test-case>
                <test-case id="0-1260" name="function-applications.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1930193757" result="Passed" start-time="2024-02-19T13:49:38.2512238Z" end-time="2024-02-19T13:49:38.2516242Z" duration="0.000401" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].OrderID ~&gt; $uppercase() ~&gt; $lowercase()';&#xA; result: &quot;order103&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order[0].OrderID ~> $uppercase() ~> $lowercase()'
Result: '"order103"'
Expected: '"order103"'
]]></output>
                </test-case>
                <test-case id="0-1261" name="function-applications.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="690221445" result="Passed" start-time="2024-02-19T13:49:38.2516355Z" end-time="2024-02-19T13:49:38.2521201Z" duration="0.000485" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.OrderID ~&gt; $join()';&#xA; result: &quot;order103order104&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.OrderID ~> $join()'
Result: '"order103order104"'
Expected: '"order103order104"'
]]></output>
                </test-case>
                <test-case id="0-1262" name="function-applications.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="831348384" result="Passed" start-time="2024-02-19T13:49:38.2521366Z" end-time="2024-02-19T13:49:38.2522661Z" duration="0.000129" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.OrderID ~&gt; $join(&quot;, &quot;)';&#xA; result: &quot;order103, order104&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.OrderID ~> $join(", ")'
Result: '"order103, order104"'
Expected: '"order103, order104"'
]]></output>
                </test-case>
                <test-case id="0-1263" name="function-applications.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="651979155" result="Passed" start-time="2024-02-19T13:49:38.2522776Z" end-time="2024-02-19T13:49:38.2535833Z" duration="0.001306" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.(Price * Quantity) ~&gt; $sum()';&#xA; result: 336.36" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.(Price * Quantity) ~> $sum()'
Result: '336.36'
Expected: '336.36'
]]></output>
                </test-case>
                <test-case id="0-1264" name="function-applications.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1345472163" result="Passed" start-time="2024-02-19T13:49:38.2536002Z" end-time="2024-02-19T13:49:38.2598395Z" duration="0.006240" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $uppertrim := $trim ~&gt; $uppercase;  $uppertrim(&quot;   Hello    World   &quot;) )';&#xA; result: &quot;HELLO WORLD&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '( $uppertrim := $trim ~> $uppercase;  $uppertrim("   Hello    World   ") )'
Result: '"HELLO WORLD"'
Expected: '"HELLO WORLD"'
]]></output>
                </test-case>
                <test-case id="0-1265" name="function-applications.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1854482082" result="Passed" start-time="2024-02-19T13:49:38.2598727Z" end-time="2024-02-19T13:49:38.2601384Z" duration="0.000266" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;john@example.com&quot; ~&gt; $substringAfter(&quot;@&quot;) ~&gt; $substringBefore(&quot;.&quot;) ';&#xA; result: &quot;example&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"john@example.com" ~> $substringAfter("@") ~> $substringBefore(".") '
Result: '"example"'
Expected: '"example"'
]]></output>
                </test-case>
                <test-case id="0-1266" name="function-applications.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1128126254" result="Passed" start-time="2024-02-19T13:49:38.2601541Z" end-time="2024-02-19T13:49:38.2602482Z" duration="0.000094" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;&quot; ~&gt; $substringAfter(&quot;@&quot;) ~&gt; $substringBefore(&quot;.&quot;) ';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"" ~> $substringAfter("@") ~> $substringBefore(".") '
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1267" name="function-applications.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="698958925" result="Passed" start-time="2024-02-19T13:49:38.2602578Z" end-time="2024-02-19T13:49:38.2603224Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo ~&gt; $substringAfter(&quot;@&quot;) ~&gt; $substringBefore(&quot;.&quot;) ';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'foo ~> $substringAfter("@") ~> $substringBefore(".") '
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1268" name="function-applications.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="836293506" result="Passed" start-time="2024-02-19T13:49:38.2603290Z" end-time="2024-02-19T13:49:38.2616102Z" duration="0.001282" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $domain := $substringAfter(?,&quot;@&quot;) ~&gt; $substringBefore(?,&quot;.&quot;); $domain(&quot;john@example.com&quot;) )';&#xA; result: &quot;example&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '( $domain := $substringAfter(?,"@") ~> $substringBefore(?,"."); $domain("john@example.com") )'
Result: '"example"'
Expected: '"example"'
]]></output>
                </test-case>
                <test-case id="0-1269" name="function-applications.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="153637709" result="Passed" start-time="2024-02-19T13:49:38.2616329Z" end-time="2024-02-19T13:49:38.2619500Z" duration="0.000317" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $square := function($x){$x*$x}; [1..5] ~&gt; $map($square) ) ';&#xA; result: [1,4,9,16,25]" />
                  </properties>
                  <output><![CDATA[Expr is '( $square := function($x){$x*$x}; [1..5] ~> $map($square) ) '
Result: '[1,4,9,16,25]'
Expected: '[1,4,9,16,25]'
]]></output>
                </test-case>
                <test-case id="0-1270" name="function-applications.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="873900574" result="Passed" start-time="2024-02-19T13:49:38.2619694Z" end-time="2024-02-19T13:49:38.2622603Z" duration="0.000291" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $square := function($x){$x*$x}; [1..5] ~&gt; $map($square) ~&gt; $sum() ) ';&#xA; result: 55" />
                  </properties>
                  <output><![CDATA[Expr is '( $square := function($x){$x*$x}; [1..5] ~> $map($square) ~> $sum() ) '
Result: '55'
Expected: '55'
]]></output>
                </test-case>
                <test-case id="0-1271" name="function-applications.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="347159020" result="Passed" start-time="2024-02-19T13:49:38.2622764Z" end-time="2024-02-19T13:49:38.2624378Z" duration="0.000162" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($betweenBackets := $substringAfter(?, &quot;(&quot;) ~&gt; $substringBefore(?, &quot;)&quot;);$betweenBackets(&quot;test(foo)bar&quot;)) ';&#xA; result: &quot;foo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($betweenBackets := $substringAfter(?, "(") ~> $substringBefore(?, ")");$betweenBackets("test(foo)bar")) '
Result: '"foo"'
Expected: '"foo"'
]]></output>
                </test-case>
                <test-case id="0-1272" name="function-applications.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="32627292" result="Passed" start-time="2024-02-19T13:49:38.2624475Z" end-time="2024-02-19T13:49:38.2631022Z" duration="0.000655" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($square := function($x){$x*$x};$chain := λ($f, $g){λ($x){$g($f($x))}};$instructions := [$sum, $square];$sumsq := $instructions ~&gt; $reduce($chain);[1..5] ~&gt; $sumsq()) ';&#xA; result: 225" />
                  </properties>
                  <output><![CDATA[Expr is '($square := function($x){$x*$x};$chain := λ($f, $g){λ($x){$g($f($x))}};$instructions := [$sum, $square];$sumsq := $instructions ~> $reduce($chain);[1..5] ~> $sumsq()) '
Result: '225'
Expected: '225'
]]></output>
                </test-case>
                <test-case id="0-1273" name="function-applications.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="240378517" result="Passed" start-time="2024-02-19T13:49:38.2631178Z" end-time="2024-02-19T13:49:38.2633121Z" duration="0.000194" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($square := function($x){$x*$x};$chain := λ($f, $g){λ($x){ $x ~&gt; $f ~&gt; $g }};$instructions := [$sum, $square, $string];$sumsq := $instructions ~&gt; $reduce($chain);[1..5] ~&gt; $sumsq()) ';&#xA; result: &quot;225&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($square := function($x){$x*$x};$chain := λ($f, $g){λ($x){ $x ~> $f ~> $g }};$instructions := [$sum, $square, $string];$sumsq := $instructions ~> $reduce($chain);[1..5] ~> $sumsq()) '
Result: '"225"'
Expected: '"225"'
]]></output>
                </test-case>
                <test-case id="0-1274" name="function-applications.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="340844417" result="Passed" start-time="2024-02-19T13:49:38.2633240Z" end-time="2024-02-19T13:49:38.2634631Z" duration="0.000139" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($square := function($x){$x*$x};$instructions := $sum ~&gt; $square;[1..5] ~&gt; $instructions())  ';&#xA; result: 225" />
                  </properties>
                  <output><![CDATA[Expr is '($square := function($x){$x*$x};$instructions := $sum ~> $square;[1..5] ~> $instructions())  '
Result: '225'
Expected: '225'
]]></output>
                </test-case>
                <test-case id="0-1275" name="function-applications.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1733951932" result="Passed" start-time="2024-02-19T13:49:38.2634720Z" end-time="2024-02-19T13:49:38.2635812Z" duration="0.000109" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($square := function($x){$x*$x};$sum_of_squares := $map(?, $square) ~&gt; $sum;[1..5] ~&gt; $sum_of_squares())  ';&#xA; result: 55" />
                  </properties>
                  <output><![CDATA[Expr is '($square := function($x){$x*$x};$sum_of_squares := $map(?, $square) ~> $sum;[1..5] ~> $sum_of_squares())  '
Result: '55'
Expected: '55'
]]></output>
                </test-case>
                <test-case id="0-1276" name="function-applications.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="353697630" result="Passed" start-time="2024-02-19T13:49:38.2635883Z" end-time="2024-02-19T13:49:38.2637193Z" duration="0.000131" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($times := λ($x, $y) { $x * $y };$product := $reduce(?, $times);$square := function($x){$x*$x};$product_of_squares := $map(?, $square) ~&gt; $product;[1..5] ~&gt; $product_of_squares())';&#xA; result: 14400" />
                  </properties>
                  <output><![CDATA[Expr is '($times := λ($x, $y) { $x * $y };$product := $reduce(?, $times);$square := function($x){$x*$x};$product_of_squares := $map(?, $square) ~> $product;[1..5] ~> $product_of_squares())'
Result: '14400'
Expected: '14400'
]]></output>
                </test-case>
                <test-case id="0-1277" name="function-applications.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1987964577" result="Passed" start-time="2024-02-19T13:49:38.2637298Z" end-time="2024-02-19T13:49:38.2638321Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($square := function($x){$x*$x};[1..5] ~&gt; $map($square) ~&gt; $reduce(λ($x, $y) { $x * $y });)';&#xA; result: 14400" />
                  </properties>
                  <output><![CDATA[Expr is '($square := function($x){$x*$x};[1..5] ~> $map($square) ~> $reduce(λ($x, $y) { $x * $y });)'
Result: '14400'
Expected: '14400'
]]></output>
                </test-case>
                <test-case id="0-1278" name="function-applications.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="462377495" result="Passed" start-time="2024-02-19T13:49:38.2638398Z" end-time="2024-02-19T13:49:38.2648191Z" duration="0.000980" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($prices := Account.Order.Product.Price;$quantities := Account.Order.Product.Quantity;$product := λ($arr) { $arr[0] * $arr[1] };$zip($prices, $quantities) ~&gt; $map($product) ~&gt; $sum())';&#xA; result: 336.36" />
                  </properties>
                  <output><![CDATA[Expr is '($prices := Account.Order.Product.Price;$quantities := Account.Order.Product.Quantity;$product := λ($arr) { $arr[0] * $arr[1] };$zip($prices, $quantities) ~> $map($product) ~> $sum())'
Result: '336.36'
Expected: '336.36'
]]></output>
                </test-case>
                <test-case id="0-1279" name="function-applications.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="769216726" result="Passed" start-time="2024-02-19T13:49:38.2648390Z" end-time="2024-02-19T13:49:38.2655991Z" duration="0.000760" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '42 ~&gt; &quot;hello&quot;';&#xA; result: error T2006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2006.
Actually thrown T2006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '42 ~> "hello"'
]]></output>
                </test-case>
                <test-case id="0-1280" name="function-applications.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.function-applications.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2114516290" result="Passed" start-time="2024-02-19T13:49:38.2656155Z" end-time="2024-02-19T13:49:38.2677745Z" duration="0.002160" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product[$.&quot;Product Name&quot; ~&gt; /hat/i].ProductID';&#xA; result: [858383,858236,858383]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product[$."Product Name" ~> /hat/i].ProductID'
Result: '[858383,858236,858383]'
Expected: '[858383,858236,858383]'
]]></output>
                </test-case>
                <test-case id="0-1281" name="function-assert.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-assert.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="691520400" result="Passed" start-time="2024-02-19T13:49:38.2678074Z" end-time="2024-02-19T13:49:38.2688121Z" duration="0.001005" asserts="2">
                  <properties>
                    <property name="Description" value="expr: '$assert(Account.Order[0].Product[0].Price &lt; 34, 'Too Expensive')';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '$assert(Account.Order[0].Product[0].Price < 34, 'Too Expensive')'
]]></output>
                </test-case>
                <test-case id="0-1282" name="function-assert.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-assert.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="471638492" result="Passed" start-time="2024-02-19T13:49:38.2688360Z" end-time="2024-02-19T13:49:38.2689884Z" duration="0.000152" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$assert(Account.Order[0].Product[0].Price &lt; 35, 'Too Expensive')';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$assert(Account.Order[0].Product[0].Price < 35, 'Too Expensive')'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1283" name="function-assert.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-assert.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="707885442" result="Passed" start-time="2024-02-19T13:49:38.2689988Z" end-time="2024-02-19T13:49:38.2691291Z" duration="0.000131" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($assert(Account.Order[0].Product[0].Price &lt; 35, 'Too Expensive'); Account.Order[0].Product[0].Price)';&#xA; result: 34.45" />
                  </properties>
                  <output><![CDATA[Expr is '($assert(Account.Order[0].Product[0].Price < 35, 'Too Expensive'); Account.Order[0].Product[0].Price)'
Result: '34.45'
Expected: '34.45'
]]></output>
                </test-case>
                <test-case id="0-1284" name="function-assert.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-assert.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="795368807" result="Passed" start-time="2024-02-19T13:49:38.2691391Z" end-time="2024-02-19T13:49:38.2696181Z" duration="0.000479" asserts="2">
                  <properties>
                    <property name="Description" value="expr: '($assert(Account.Order[0].Product[0].Price &lt; 34, 'Too Expensive'); Account.Order[0].Product[0].Price)';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '($assert(Account.Order[0].Product[0].Price < 34, 'Too Expensive'); Account.Order[0].Product[0].Price)'
]]></output>
                </test-case>
                <test-case id="0-1285" name="function-assert.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-assert.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1303070455" result="Passed" start-time="2024-02-19T13:49:38.2696335Z" end-time="2024-02-19T13:49:38.2706629Z" duration="0.001030" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$assert(null)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$assert(null)'
]]></output>
                </test-case>
                <test-case id="0-1286" name="function-assert.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-assert.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2147413452" result="Passed" start-time="2024-02-19T13:49:38.2706909Z" end-time="2024-02-19T13:49:38.2711103Z" duration="0.000420" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$assert(5)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$assert(5)'
]]></output>
                </test-case>
                <test-case id="0-1287" name="function-assert.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-assert.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1860453669" result="Passed" start-time="2024-02-19T13:49:38.2711272Z" end-time="2024-02-19T13:49:38.2715780Z" duration="0.000451" asserts="2">
                  <properties>
                    <property name="Description" value="expr: '$assert(false)';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '$assert(false)'
]]></output>
                </test-case>
                <test-case id="0-1288" name="function-assert.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-assert.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1900800864" result="Passed" start-time="2024-02-19T13:49:38.2715923Z" end-time="2024-02-19T13:49:38.2737991Z" duration="0.002207" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$assert(true)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$assert(true)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1289" name="function-average.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="637817331" result="Passed" start-time="2024-02-19T13:49:38.2738231Z" end-time="2024-02-19T13:49:38.2746604Z" duration="0.000838" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$average(Account.Order.Product.(Price * Quantity))';&#xA; result: 84.09" />
                  </properties>
                  <output><![CDATA[Expr is '$average(Account.Order.Product.(Price * Quantity))'
Result: '84.09'
Expected: '84.09'
]]></output>
                </test-case>
                <test-case id="0-1290" name="function-average.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="210844181" result="Passed" start-time="2024-02-19T13:49:38.2746784Z" end-time="2024-02-19T13:49:38.2748619Z" duration="0.000184" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.$average(Product.(Price * Quantity))';&#xA; result: [45.285000000000004,122.89500000000001]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.$average(Product.(Price * Quantity))'
Result: '[45.285,122.895]'
Expected: '[45.285000000000004,122.89500000000001]'
]]></output>
                </test-case>
                <test-case id="0-1291" name="function-average.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1192472851" result="Passed" start-time="2024-02-19T13:49:38.2748735Z" end-time="2024-02-19T13:49:38.2753009Z" duration="0.000428" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.(OrderID &amp; &quot;: &quot; &amp; $average(Product.(Price*Quantity)))';&#xA; result: [&quot;order103: 45.285&quot;,&quot;order104: 122.895&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.(OrderID & ": " & $average(Product.(Price*Quantity)))'
Result: '["order103: 45.285","order104: 122.895"]'
Expected: '["order103: 45.285","order104: 122.895"]'
]]></output>
                </test-case>
                <test-case id="0-1292" name="function-average.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2087598631" result="Passed" start-time="2024-02-19T13:49:38.2753117Z" end-time="2024-02-19T13:49:38.2753766Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$average([])';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$average([])'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1293" name="function-average.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="396843696" result="Passed" start-time="2024-02-19T13:49:38.2753830Z" end-time="2024-02-19T13:49:38.2754524Z" duration="0.000070" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$average([1,2,3])';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '$average([1,2,3])'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-1294" name="function-average.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1668748025" result="Passed" start-time="2024-02-19T13:49:38.2754618Z" end-time="2024-02-19T13:49:38.2766000Z" duration="0.001138" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$average([&quot;1&quot;,&quot;2&quot;,&quot;3&quot;])';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$average(["1","2","3"])'
]]></output>
                </test-case>
                <test-case id="0-1295" name="function-average.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1495552724" result="Passed" start-time="2024-02-19T13:49:38.2766208Z" end-time="2024-02-19T13:49:38.2774661Z" duration="0.000845" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$average([&quot;1&quot;,&quot;2&quot;,3])';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$average(["1","2",3])'
]]></output>
                </test-case>
                <test-case id="0-1296" name="function-average.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1560163168" result="Passed" start-time="2024-02-19T13:49:38.2774831Z" end-time="2024-02-19T13:49:38.2775847Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$average(1)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$average(1)'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1297" name="function-average.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1915788266" result="Passed" start-time="2024-02-19T13:49:38.2861449Z" end-time="2024-02-19T13:49:38.2868715Z" duration="0.000726" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$average([],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$average([],[])'
]]></output>
                </test-case>
                <test-case id="0-1298" name="function-average.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1636045974" result="Passed" start-time="2024-02-19T13:49:38.2869025Z" end-time="2024-02-19T13:49:38.2873585Z" duration="0.000456" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$average([1,2,3],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$average([1,2,3],[])'
]]></output>
                </test-case>
                <test-case id="0-1299" name="function-average.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="580958965" result="Passed" start-time="2024-02-19T13:49:38.2873718Z" end-time="2024-02-19T13:49:38.2878220Z" duration="0.000450" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$average([],[],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$average([],[],[])'
]]></output>
                </test-case>
                <test-case id="0-1300" name="function-average.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="149106571" result="Passed" start-time="2024-02-19T13:49:38.2878366Z" end-time="2024-02-19T13:49:38.2884184Z" duration="0.000582" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$average([1,2],[],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$average([1,2],[],[])'
]]></output>
                </test-case>
                <test-case id="0-1301" name="function-average.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-average.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1833029583" result="Passed" start-time="2024-02-19T13:49:38.2884330Z" end-time="2024-02-19T13:49:38.3023725Z" duration="0.013940" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$average(undefined)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$average(undefined)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1302" name="function-boolean.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1996825824" result="Passed" start-time="2024-02-19T13:49:38.3024074Z" end-time="2024-02-19T13:49:38.3025543Z" duration="0.000147" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(&quot;Hello World&quot;)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean("Hello World")'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1303" name="function-boolean.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1911190694" result="Passed" start-time="2024-02-19T13:49:38.3025616Z" end-time="2024-02-19T13:49:38.3026318Z" duration="0.000070" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(&quot;&quot;)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean("")'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1304" name="function-boolean.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="684561664" result="Passed" start-time="2024-02-19T13:49:38.3026381Z" end-time="2024-02-19T13:49:38.3027050Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(true)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(true)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1305" name="function-boolean.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1343089557" result="Passed" start-time="2024-02-19T13:49:38.3027108Z" end-time="2024-02-19T13:49:38.3027761Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(false)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(false)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1306" name="function-boolean.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1826751410" result="Passed" start-time="2024-02-19T13:49:38.3027820Z" end-time="2024-02-19T13:49:38.3028482Z" duration="0.000066" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(0)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(0)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1307" name="function-boolean.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1356764026" result="Passed" start-time="2024-02-19T13:49:38.3028545Z" end-time="2024-02-19T13:49:38.3029185Z" duration="0.000064" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(10)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(10)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1308" name="function-boolean.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="485581867" result="Passed" start-time="2024-02-19T13:49:38.3029246Z" end-time="2024-02-19T13:49:38.3029929Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(-0.5)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(-0.5)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1309" name="function-boolean.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2031207770" result="Passed" start-time="2024-02-19T13:49:38.3029989Z" end-time="2024-02-19T13:49:38.3030894Z" duration="0.000091" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(null)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(null)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1310" name="function-boolean.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1224548023" result="Passed" start-time="2024-02-19T13:49:38.3030974Z" end-time="2024-02-19T13:49:38.3031820Z" duration="0.000085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean([])';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean([])'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1311" name="function-boolean.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1406593622" result="Passed" start-time="2024-02-19T13:49:38.3031888Z" end-time="2024-02-19T13:49:38.3032611Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean([0])';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean([0])'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1312" name="function-boolean.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1310153205" result="Passed" start-time="2024-02-19T13:49:38.3032674Z" end-time="2024-02-19T13:49:38.3033538Z" duration="0.000087" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean([1])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean([1])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1313" name="function-boolean.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1602022941" result="Passed" start-time="2024-02-19T13:49:38.3033612Z" end-time="2024-02-19T13:49:38.3034307Z" duration="0.000070" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean([1,2,3])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean([1,2,3])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1314" name="function-boolean.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="428954778" result="Passed" start-time="2024-02-19T13:49:38.3034369Z" end-time="2024-02-19T13:49:38.3034988Z" duration="0.000062" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean([0,0])';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean([0,0])'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1315" name="function-boolean.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1238673357" result="Passed" start-time="2024-02-19T13:49:38.3035045Z" end-time="2024-02-19T13:49:38.3035854Z" duration="0.000081" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean([[]])';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean([[]])'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1316" name="function-boolean.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="218582953" result="Passed" start-time="2024-02-19T13:49:38.3035931Z" end-time="2024-02-19T13:49:38.3036906Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean([[null]])';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean([[null]])'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1317" name="function-boolean.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="123462942" result="Passed" start-time="2024-02-19T13:49:38.3036995Z" end-time="2024-02-19T13:49:38.3037811Z" duration="0.000082" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean([[[true]]])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean([[[true]]])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1318" name="function-boolean.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2004093995" result="Passed" start-time="2024-02-19T13:49:38.3037880Z" end-time="2024-02-19T13:49:38.3038742Z" duration="0.000086" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean({})';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean({})'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1319" name="function-boolean.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="42401708" result="Passed" start-time="2024-02-19T13:49:38.3038828Z" end-time="2024-02-19T13:49:38.3039647Z" duration="0.000082" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean({&quot;hello&quot;:&quot;world&quot;})';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean({"hello":"world"})'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1320" name="function-boolean.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1854552277" result="Passed" start-time="2024-02-19T13:49:38.3039714Z" end-time="2024-02-19T13:49:38.3040350Z" duration="0.000064" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(Account)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(Account)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1321" name="function-boolean.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1415156232" result="Passed" start-time="2024-02-19T13:49:38.3040406Z" end-time="2024-02-19T13:49:38.3041111Z" duration="0.000071" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(Account.Order.Product.Price)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(Account.Order.Product.Price)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1322" name="function-boolean.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="945641708" result="Passed" start-time="2024-02-19T13:49:38.3041169Z" end-time="2024-02-19T13:49:38.3041808Z" duration="0.000064" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(Account.blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(Account.blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1323" name="function-boolean.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="198476175" result="Passed" start-time="2024-02-19T13:49:38.3041866Z" end-time="2024-02-19T13:49:38.3042584Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean($boolean)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean($boolean)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1324" name="function-boolean.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2090277175" result="Passed" start-time="2024-02-19T13:49:38.3042653Z" end-time="2024-02-19T13:49:38.3043401Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$boolean(function(){true})';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$boolean(function(){true})'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1325" name="function-boolean.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.function-boolean.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1828911370" result="Passed" start-time="2024-02-19T13:49:38.3043474Z" end-time="2024-02-19T13:49:38.3048529Z" duration="0.000506" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$boolean(2,3)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$boolean(2,3)'
]]></output>
                </test-case>
                <test-case id="0-1326" name="function-ceil.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-ceil.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="407044036" result="Passed" start-time="2024-02-19T13:49:38.3048632Z" end-time="2024-02-19T13:49:38.3050713Z" duration="0.000208" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ceil(3.7)';&#xA; result: 4" />
                  </properties>
                  <output><![CDATA[Expr is '$ceil(3.7)'
Result: '4'
Expected: '4'
]]></output>
                </test-case>
                <test-case id="0-1327" name="function-ceil.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-ceil.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1783267243" result="Passed" start-time="2024-02-19T13:49:38.3050821Z" end-time="2024-02-19T13:49:38.3051452Z" duration="0.000063" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ceil(-3.7)';&#xA; result: -3" />
                  </properties>
                  <output><![CDATA[Expr is '$ceil(-3.7)'
Result: '-3'
Expected: '-3'
]]></output>
                </test-case>
                <test-case id="0-1328" name="function-ceil.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-ceil.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="719114139" result="Passed" start-time="2024-02-19T13:49:38.3051516Z" end-time="2024-02-19T13:49:38.3051972Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ceil(0)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$ceil(0)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1329" name="function-ceil.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-ceil.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="992775340" result="Passed" start-time="2024-02-19T13:49:38.3052029Z" end-time="2024-02-19T13:49:38.3052468Z" duration="0.000044" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ceil(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$ceil(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1330" name="function-contains.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-contains.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="173788764" result="Passed" start-time="2024-02-19T13:49:38.3052526Z" end-time="2024-02-19T13:49:38.3058398Z" duration="0.000587" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$contains(&quot;Hello World&quot;, &quot;lo&quot;)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$contains("Hello World", "lo")'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1331" name="function-contains.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-contains.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="585393011" result="Passed" start-time="2024-02-19T13:49:38.3058530Z" end-time="2024-02-19T13:49:38.3060047Z" duration="0.000152" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$contains(&quot;Hello World&quot;, &quot;World&quot;)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$contains("Hello World", "World")'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1332" name="function-contains.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-contains.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="351918603" result="Passed" start-time="2024-02-19T13:49:38.3060161Z" end-time="2024-02-19T13:49:38.3060995Z" duration="0.000084" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$contains(&quot;Hello World&quot;, &quot;world&quot;)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$contains("Hello World", "world")'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1333" name="function-contains.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-contains.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2028902177" result="Passed" start-time="2024-02-19T13:49:38.3061086Z" end-time="2024-02-19T13:49:38.3061873Z" duration="0.000079" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$contains(&quot;Hello World&quot;, &quot;Word&quot;)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$contains("Hello World", "Word")'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1334" name="function-contains.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-contains.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="620110155" result="Passed" start-time="2024-02-19T13:49:38.3061962Z" end-time="2024-02-19T13:49:38.3062740Z" duration="0.000078" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$contains(nothing, &quot;World&quot;)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$contains(nothing, "World")'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1335" name="function-contains.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-contains.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="281486707" result="Passed" start-time="2024-02-19T13:49:38.3062832Z" end-time="2024-02-19T13:49:38.3069815Z" duration="0.000698" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$contains(23, 3)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$contains(23, 3)'
]]></output>
                </test-case>
                <test-case id="0-1336" name="function-contains.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-contains.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="842178223" result="Passed" start-time="2024-02-19T13:49:38.3069953Z" end-time="2024-02-19T13:49:38.3078800Z" duration="0.000885" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$contains(&quot;23&quot;, 3)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$contains("23", 3)'
]]></output>
                </test-case>
                <test-case id="0-1337" name="function-count.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="707931445" result="Passed" start-time="2024-02-19T13:49:38.3078960Z" end-time="2024-02-19T13:49:38.3081396Z" duration="0.000244" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count(Account.Order.Product.(Price * Quantity))';&#xA; result: 4" />
                  </properties>
                  <output><![CDATA[Expr is '$count(Account.Order.Product.(Price * Quantity))'
Result: '4'
Expected: '4'
]]></output>
                </test-case>
                <test-case id="0-1338" name="function-count.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="23323778" result="Passed" start-time="2024-02-19T13:49:38.3081515Z" end-time="2024-02-19T13:49:38.3083063Z" duration="0.000155" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.$count(Product.(Price * Quantity))';&#xA; result: [2,2]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.$count(Product.(Price * Quantity))'
Result: '[2,2]'
Expected: '[2,2]'
]]></output>
                </test-case>
                <test-case id="0-1339" name="function-count.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1599762897" result="Passed" start-time="2024-02-19T13:49:38.3083156Z" end-time="2024-02-19T13:49:38.3084451Z" duration="0.000130" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.(OrderID &amp; &quot;: &quot; &amp; $count(Product.(Price*Quantity)))';&#xA; result: [&quot;order103: 2&quot;,&quot;order104: 2&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.(OrderID & ": " & $count(Product.(Price*Quantity)))'
Result: '["order103: 2","order104: 2"]'
Expected: '["order103: 2","order104: 2"]'
]]></output>
                </test-case>
                <test-case id="0-1340" name="function-count.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1623802692" result="Passed" start-time="2024-02-19T13:49:38.3084572Z" end-time="2024-02-19T13:49:38.3086551Z" duration="0.000198" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count([])';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$count([])'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1341" name="function-count.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="790649426" result="Passed" start-time="2024-02-19T13:49:38.3086904Z" end-time="2024-02-19T13:49:38.3087750Z" duration="0.000085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count([1,2,3])';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '$count([1,2,3])'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-1342" name="function-count.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1374871802" result="Passed" start-time="2024-02-19T13:49:38.3087838Z" end-time="2024-02-19T13:49:38.3088374Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count([&quot;1&quot;,&quot;2&quot;,&quot;3&quot;])';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '$count(["1","2","3"])'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-1343" name="function-count.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2017076741" result="Passed" start-time="2024-02-19T13:49:38.3088434Z" end-time="2024-02-19T13:49:38.3089013Z" duration="0.000058" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count([&quot;1&quot;,&quot;2&quot;,3])';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '$count(["1","2",3])'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-1344" name="function-count.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1560752955" result="Passed" start-time="2024-02-19T13:49:38.3089097Z" end-time="2024-02-19T13:49:38.3090080Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count(1)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$count(1)'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1345" name="function-count.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="951734206" result="Passed" start-time="2024-02-19T13:49:38.3090196Z" end-time="2024-02-19T13:49:38.3095796Z" duration="0.000560" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$count([],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$count([],[])'
]]></output>
                </test-case>
                <test-case id="0-1346" name="function-count.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2029803293" result="Passed" start-time="2024-02-19T13:49:38.3095910Z" end-time="2024-02-19T13:49:38.3100233Z" duration="0.000433" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$count([1,2,3],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$count([1,2,3],[])'
]]></output>
                </test-case>
                <test-case id="0-1347" name="function-count.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="485575690" result="Passed" start-time="2024-02-19T13:49:38.3100363Z" end-time="2024-02-19T13:49:38.3104474Z" duration="0.000411" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$count([],[],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$count([],[],[])'
]]></output>
                </test-case>
                <test-case id="0-1348" name="function-count.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2115372565" result="Passed" start-time="2024-02-19T13:49:38.3104601Z" end-time="2024-02-19T13:49:38.3111064Z" duration="0.000647" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$count([1,2],[],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$count([1,2],[],[])'
]]></output>
                </test-case>
                <test-case id="0-1349" name="function-count.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="430074668" result="Passed" start-time="2024-02-19T13:49:38.3111210Z" end-time="2024-02-19T13:49:38.3112225Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count(undefined)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$count(undefined)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1350" name="function-count.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-count.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1276969771" result="Passed" start-time="2024-02-19T13:49:38.3112334Z" end-time="2024-02-19T13:49:38.3113200Z" duration="0.000087" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count([1,2,3,4]) / 2';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '$count([1,2,3,4]) / 2'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-1351" name="function-decodeUrl.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-decodeUrl.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1436700226" result="Passed" start-time="2024-02-19T13:49:38.3113295Z" end-time="2024-02-19T13:49:38.3116944Z" duration="0.000365" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$decodeUrl(&quot;https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B&quot;)';&#xA; result: &quot;https://mozilla.org/?x=шеллы&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$decodeUrl("https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B")'
Result: '"https://mozilla.org/?x=шеллы"'
Expected: '"https://mozilla.org/?x=шеллы"'
]]></output>
                </test-case>
                <test-case id="0-1352" name="function-decodeUrl.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-decodeUrl.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2059177918" result="Passed" start-time="2024-02-19T13:49:38.3117043Z" end-time="2024-02-19T13:49:38.3117788Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$decodeUrl(blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$decodeUrl(blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1353" name="function-decodeUrl.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-decodeUrl.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1593644266" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3117853Z" end-time="2024-02-19T13:49:38.3121839Z" duration="0.000399" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$decodeUrl('%E0%A4%A')';&#xA; result: error " />
                  </properties>
                  <reason>
                    <message><![CDATA[JS function encodeURI throws URIError 'if one attempts to encode a surrogate which is not part of a high-low pair', which is seem to be not a case with C#]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$decodeUrl('%E0%A4%A')'
Result: '"%E0%A4%A"'
]]></output>
                </test-case>
                <test-case id="0-1354" name="function-decodeUrlComponent.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-decodeUrlComponent.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="873890335" result="Passed" start-time="2024-02-19T13:49:38.3121940Z" end-time="2024-02-19T13:49:38.3123395Z" duration="0.000146" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$decodeUrlComponent(&quot;%3Fx%3Dtest&quot;)';&#xA; result: &quot;?x=test&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$decodeUrlComponent("%3Fx%3Dtest")'
Result: '"?x=test"'
Expected: '"?x=test"'
]]></output>
                </test-case>
                <test-case id="0-1355" name="function-decodeUrlComponent.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-decodeUrlComponent.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="881433986" result="Passed" start-time="2024-02-19T13:49:38.3123506Z" end-time="2024-02-19T13:49:38.3124452Z" duration="0.000095" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$decodeUrlComponent(blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$decodeUrlComponent(blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1356" name="function-decodeUrlComponent.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-decodeUrlComponent.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="887387875" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3124534Z" end-time="2024-02-19T13:49:38.3128824Z" duration="0.000429" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$decodeUrlComponent('%E0%A4%A')';&#xA; result: error " />
                  </properties>
                  <reason>
                    <message><![CDATA[JS function encodeURIComponent throws URIError 'if one attempts to encode a surrogate which is not part of a high-low pair', which is seem to be not a case with C#]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$decodeUrlComponent('%E0%A4%A')'
Result: '"%E0%A4%A"'
]]></output>
                </test-case>
                <test-case id="0-1357" name="function-distinct.distinct[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1798349649" result="Passed" start-time="2024-02-19T13:49:38.3128932Z" end-time="2024-02-19T13:49:38.3136689Z" duration="0.000776" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$distinct([1,2,3,4])';&#xA; result: [1,2,3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '$distinct([1,2,3,4])'
Result: '[1,2,3,4]'
Expected: '[1,2,3,4]'
]]></output>
                </test-case>
                <test-case id="0-1358" name="function-distinct.distinct[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1968397166" result="Passed" start-time="2024-02-19T13:49:38.3136842Z" end-time="2024-02-19T13:49:38.3138084Z" duration="0.000124" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$distinct([1])';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is '$distinct([1])'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1359" name="function-distinct.distinct[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1003133941" result="Passed" start-time="2024-02-19T13:49:38.3138212Z" end-time="2024-02-19T13:49:38.3139184Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$distinct(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$distinct(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1360" name="function-distinct.distinct[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="936045521" result="Passed" start-time="2024-02-19T13:49:38.3139277Z" end-time="2024-02-19T13:49:38.3139903Z" duration="0.000063" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$distinct(null)';&#xA; result: null" />
                  </properties>
                  <output><![CDATA[Expr is '$distinct(null)'
Result: 'null'
Expected: 'null'
]]></output>
                </test-case>
                <test-case id="0-1361" name="function-distinct.distinct[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="43484167" result="Passed" start-time="2024-02-19T13:49:38.3139986Z" end-time="2024-02-19T13:49:38.3140528Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$distinct('hello')';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$distinct('hello')'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-1362" name="function-distinct.distinct[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="637649887" result="Passed" start-time="2024-02-19T13:49:38.3140620Z" end-time="2024-02-19T13:49:38.3141611Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$distinct(Account.Order.Product.SKU)';&#xA; result: [&quot;0406654608&quot;,&quot;0406634348&quot;,&quot;040657863&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$distinct(Account.Order.Product.SKU)'
Result: '["0406654608","0406634348","040657863","0406654603"]'
Expected: '["0406654608","0406634348","040657863","0406654603"]'
]]></output>
                </test-case>
                <test-case id="0-1363" name="function-distinct.distinct[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1640290174" result="Passed" start-time="2024-02-19T13:49:38.3141704Z" end-time="2024-02-19T13:49:38.3142898Z" duration="0.000119" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$distinct(Account.Order.Product.`Product Name`)';&#xA; result: [&quot;Bowler Hat&quot;,&quot;Trilby hat&quot;,&quot;Cloak&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$distinct(Account.Order.Product.`Product Name`)'
Result: '["Bowler Hat","Trilby hat","Cloak"]'
Expected: '["Bowler Hat","Trilby hat","Cloak"]'
]]></output>
                </test-case>
                <test-case id="0-1364" name="function-distinct.distinct[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-distinct.distinct[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1857419006" result="Passed" start-time="2024-02-19T13:49:38.3143013Z" end-time="2024-02-19T13:49:38.3144738Z" duration="0.000173" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$distinct(Account.Order.Product.Description)';&#xA; result: [{&quot;Colour&quot;:&quot;Purple&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.75},{&quot;Colour&quot;:&quot;Orange&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.6},{&quot;Colour&quot;:&quot;Black&quot;,&quot;Width&quot;:30,&quot;Height&quot;:20,&quot;Depth&quot;:210,&quot;Weight&quot;:2}]" />
                  </properties>
                  <output><![CDATA[Expr is '$distinct(Account.Order.Product.Description)'
Result: '[{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},{"Colour":"Orange","Width":300,"Height":200,"Depth":210,"Weight":0.6},{"Colour":"Black","Width":30,"Height":20,"Depth":210,"Weight":2}]'
Expected: '[{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},{"Colour":"Orange","Width":300,"Height":200,"Depth":210,"Weight":0.6},{"Colour":"Black","Width":30,"Height":20,"Depth":210,"Weight":2}]'
]]></output>
                </test-case>
                <test-case id="0-1365" name="function-each.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-each.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="639155012" result="Passed" start-time="2024-02-19T13:49:38.3144839Z" end-time="2024-02-19T13:49:38.3159808Z" duration="0.001497" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$each(Address, λ($v, $k) {$k &amp; &quot;: &quot; &amp; $v})';&#xA; result: [&quot;Street: Hursley Park&quot;,&quot;City: Winchester&quot;,&quot;Postcode: SO21 2JN&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$each(Address, λ($v, $k) {$k & ": " & $v})'
Result: '["Street: Hursley Park","City: Winchester","Postcode: SO21 2JN"]'
Expected: '["Street: Hursley Park","City: Winchester","Postcode: SO21 2JN"]'
]]></output>
                </test-case>
                <test-case id="0-1366" name="function-each.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-each.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1054675019" result="Passed" start-time="2024-02-19T13:49:38.3160010Z" end-time="2024-02-19T13:49:38.3162467Z" duration="0.000246" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$each({'a': 'hello', 'b': 'world'}, $uppercase)';&#xA; result: [&quot;HELLO&quot;,&quot;WORLD&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$each({'a': 'hello', 'b': 'world'}, $uppercase)'
Result: '["HELLO","WORLD"]'
Expected: '["HELLO","WORLD"]'
]]></output>
                </test-case>
                <test-case id="0-1367" name="function-each.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-each.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1428734675" result="Passed" start-time="2024-02-19T13:49:38.3162594Z" end-time="2024-02-19T13:49:38.3164738Z" duration="0.000215" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$each(function($v, $k) {$k[$v&gt;2]})';&#xA; result: [&quot;c&quot;,&quot;d&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$each(function($v, $k) {$k[$v>2]})'
Result: '["c","d"]'
Expected: '["c","d"]'
]]></output>
                </test-case>
                <test-case id="0-1368" name="function-encodeUrl.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-encodeUrl.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="981912786" result="Passed" start-time="2024-02-19T13:49:38.3164860Z" end-time="2024-02-19T13:49:38.3169985Z" duration="0.000513" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$encodeUrl(&quot;https://mozilla.org/?x=шеллы&quot;)';&#xA; result: &quot;https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$encodeUrl("https://mozilla.org/?x=шеллы")'
Result: '"https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B"'
Expected: '"https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B"'
]]></output>
                </test-case>
                <test-case id="0-1369" name="function-encodeUrl.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-encodeUrl.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="147468071" result="Passed" start-time="2024-02-19T13:49:38.3170104Z" end-time="2024-02-19T13:49:38.3171515Z" duration="0.000141" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$encodeUrl(blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$encodeUrl(blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1370" name="function-encodeUrl.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-encodeUrl.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="396495134" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3171634Z" end-time="2024-02-19T13:49:38.3179650Z" duration="0.000802" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$encodeUrl('�')';&#xA; result: error " />
                  </properties>
                  <reason>
                    <message><![CDATA[JS function encodeURI throws URIError 'if one attempts to encode a surrogate which is not part of a high-low pair', which is seem to be not a case with C#]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$encodeUrl('�')'
Result: '"%EF%BF%BD"'
]]></output>
                </test-case>
                <test-case id="0-1371" name="function-encodeUrlComponent.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-encodeUrlComponent.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1658135155" result="Passed" start-time="2024-02-19T13:49:38.3179804Z" end-time="2024-02-19T13:49:38.3181800Z" duration="0.000200" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$encodeUrlComponent(&quot;?x=test&quot;)';&#xA; result: &quot;%3Fx%3Dtest&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$encodeUrlComponent("?x=test")'
Result: '"%3Fx%3Dtest"'
Expected: '"%3Fx%3Dtest"'
]]></output>
                </test-case>
                <test-case id="0-1372" name="function-encodeUrlComponent.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-encodeUrlComponent.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="100139164" result="Passed" start-time="2024-02-19T13:49:38.3181894Z" end-time="2024-02-19T13:49:38.3183122Z" duration="0.000123" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$encodeUrlComponent(blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$encodeUrlComponent(blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1373" name="function-encodeUrlComponent.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-encodeUrlComponent.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="404331098" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3183242Z" end-time="2024-02-19T13:49:38.3188086Z" duration="0.000485" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$encodeUrlComponent('�')';&#xA; result: error " />
                  </properties>
                  <reason>
                    <message><![CDATA[JS function encodeURIComponent throws URIError 'if one attempts to encode a surrogate which is not part of a high-low pair', which is seem to be not a case with C#]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$encodeUrlComponent('�')'
Result: '"%EF%BF%BD"'
]]></output>
                </test-case>
                <test-case id="0-1374" name="function-error.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="566082663" result="Passed" start-time="2024-02-19T13:49:38.3188212Z" end-time="2024-02-19T13:49:38.3193942Z" duration="0.000573" asserts="2">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].Product[0].Price &gt; 35 ? Account.Order[0].Product[0].Price : $error('Too Expensive')';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order[0].Product[0].Price > 35 ? Account.Order[0].Product[0].Price : $error('Too Expensive')'
]]></output>
                </test-case>
                <test-case id="0-1375" name="function-error.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1063902851" result="Passed" start-time="2024-02-19T13:49:38.3194078Z" end-time="2024-02-19T13:49:38.3196231Z" duration="0.000215" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].Product[0].Price &gt; 34 ? Account.Order[0].Product[0].Price : $error('Too Expensive')';&#xA; result: 34.45" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order[0].Product[0].Price > 34 ? Account.Order[0].Product[0].Price : $error('Too Expensive')'
Result: '34.45'
Expected: '34.45'
]]></output>
                </test-case>
                <test-case id="0-1376" name="function-error.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="40284430" result="Passed" start-time="2024-02-19T13:49:38.3196340Z" end-time="2024-02-19T13:49:38.3198750Z" duration="0.000241" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].Product[0].Price &gt; 35 ? $error('Too Expensive') : Account.Order[0].Product[0].Price';&#xA; result: 34.45" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order[0].Product[0].Price > 35 ? $error('Too Expensive') : Account.Order[0].Product[0].Price'
Result: '34.45'
Expected: '34.45'
]]></output>
                </test-case>
                <test-case id="0-1377" name="function-error.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1076048614" result="Passed" start-time="2024-02-19T13:49:38.3198876Z" end-time="2024-02-19T13:49:38.3203412Z" duration="0.000454" asserts="2">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[0].Product[0].Price &gt; 34 ? $error('Too Expensive') : Account.Order[0].Product[0].Price';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order[0].Product[0].Price > 34 ? $error('Too Expensive') : Account.Order[0].Product[0].Price'
]]></output>
                </test-case>
                <test-case id="0-1378" name="function-error.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="785206867" result="Passed" start-time="2024-02-19T13:49:38.3203517Z" end-time="2024-02-19T13:49:38.3204559Z" duration="0.000104" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count(Account.Order[0].Product) &lt; 2 ? $error('Not enough products in orders')';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$count(Account.Order[0].Product) < 2 ? $error('Not enough products in orders')'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1379" name="function-error.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1138542969" result="Passed" start-time="2024-02-19T13:49:38.3204634Z" end-time="2024-02-19T13:49:38.3207470Z" duration="0.000284" asserts="2">
                  <properties>
                    <property name="Description" value="expr: '$count(Account.Order[0].Product) &lt; 3 ? $error('Not enough products in orders')';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '$count(Account.Order[0].Product) < 3 ? $error('Not enough products in orders')'
]]></output>
                </test-case>
                <test-case id="0-1380" name="function-error.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1946591724" result="Passed" start-time="2024-02-19T13:49:38.3207561Z" end-time="2024-02-19T13:49:38.3210445Z" duration="0.000289" asserts="2">
                  <properties>
                    <property name="Description" value="expr: '($msg:='My Message'; $error($msg); true)';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '($msg:='My Message'; $error($msg); true)'
]]></output>
                </test-case>
                <test-case id="0-1381" name="function-error.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2068951993" result="Passed" start-time="2024-02-19T13:49:38.3210540Z" end-time="2024-02-19T13:49:38.3214906Z" duration="0.000437" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$error(null)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$error(null)'
]]></output>
                </test-case>
                <test-case id="0-1382" name="function-error.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1815378325" result="Passed" start-time="2024-02-19T13:49:38.3215003Z" end-time="2024-02-19T13:49:38.3218353Z" duration="0.000335" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$error(5)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$error(5)'
]]></output>
                </test-case>
                <test-case id="0-1383" name="function-error.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="289039471" result="Passed" start-time="2024-02-19T13:49:38.3218447Z" end-time="2024-02-19T13:49:38.3220825Z" duration="0.000238" asserts="2">
                  <properties>
                    <property name="Description" value="expr: '$error()';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '$error()'
]]></output>
                </test-case>
                <test-case id="0-1384" name="function-error.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-error.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1863289216" result="Passed" start-time="2024-02-19T13:49:38.3220921Z" end-time="2024-02-19T13:49:38.3223252Z" duration="0.000233" asserts="2">
                  <properties>
                    <property name="Description" value="expr: '$error(foo)';&#xA; result: error " />
                  </properties>
                  <output><![CDATA[Expr is '$error(foo)'
]]></output>
                </test-case>
                <test-case id="0-1385" name="function-eval.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="884572185" result="Passed" start-time="2024-02-19T13:49:38.3223337Z" end-time="2024-02-19T13:49:38.3225830Z" duration="0.000249" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$eval('[1,2,3]')';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is '$eval('[1,2,3]')'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
                <test-case id="0-1386" name="function-eval.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="673698740" result="Passed" start-time="2024-02-19T13:49:38.3225919Z" end-time="2024-02-19T13:49:38.3226818Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$eval(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$eval(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1387" name="function-eval.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="905757984" result="Passed" start-time="2024-02-19T13:49:38.3226889Z" end-time="2024-02-19T13:49:38.3228043Z" duration="0.000116" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$eval('[1,$string(2),3]')';&#xA; result: [1,&quot;2&quot;,3]" />
                  </properties>
                  <output><![CDATA[Expr is '$eval('[1,$string(2),3]')'
Result: '[1,"2",3]'
Expected: '[1,"2",3]'
]]></output>
                </test-case>
                <test-case id="0-1388" name="function-eval.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1155011842" result="Passed" start-time="2024-02-19T13:49:38.3228116Z" end-time="2024-02-19T13:49:38.3229710Z" duration="0.000160" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$eval('Account.Order.Product.Quantity ~&gt; $sum()')';&#xA; result: 8" />
                  </properties>
                  <output><![CDATA[Expr is '$eval('Account.Order.Product.Quantity ~> $sum()')'
Result: '8'
Expected: '8'
]]></output>
                </test-case>
                <test-case id="0-1389" name="function-eval.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1886159816" result="Passed" start-time="2024-02-19T13:49:38.3229840Z" end-time="2024-02-19T13:49:38.3233943Z" duration="0.000411" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{'Name': `Product Name`, 'Total': $eval('Price * Quantity')}';&#xA; result: [{&quot;Name&quot;:&quot;Bowler Hat&quot;,&quot;Total&quot;:68.9},{&quot;Name&quot;:&quot;Trilby hat&quot;,&quot;Total&quot;:21.67},{&quot;Name&quot;:&quot;Bowler Hat&quot;,&quot;Total&quot;:137.8},{&quot;Name&quot;:&quot;Cloak&quot;,&quot;Total&quot;:107.99}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.{'Name': `Product Name`, 'Total': $eval('Price * Quantity')}'
Result: '[{"Name":"Bowler Hat","Total":68.9},{"Name":"Trilby hat","Total":21.67},{"Name":"Bowler Hat","Total":137.8},{"Name":"Cloak","Total":107.99}]'
Expected: '[{"Name":"Bowler Hat","Total":68.9},{"Name":"Trilby hat","Total":21.67},{"Name":"Bowler Hat","Total":137.8},{"Name":"Cloak","Total":107.99}]'
]]></output>
                </test-case>
                <test-case id="0-1390" name="function-eval.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1541582479" result="Passed" start-time="2024-02-19T13:49:38.3234045Z" end-time="2024-02-19T13:49:38.3236822Z" duration="0.000278" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{'Name': `Product Name`, 'Volume': $eval('Width*Height*Depth', Description)}';&#xA; result: [{&quot;Name&quot;:&quot;Bowler Hat&quot;,&quot;Volume&quot;:12600000},{&quot;Name&quot;:&quot;Trilby hat&quot;,&quot;Volume&quot;:12600000},{&quot;Name&quot;:&quot;Bowler Hat&quot;,&quot;Volume&quot;:12600000},{&quot;Name&quot;:&quot;Cloak&quot;,&quot;Volume&quot;:126000}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.{'Name': `Product Name`, 'Volume': $eval('Width*Height*Depth', Description)}'
Result: '[{"Name":"Bowler Hat","Volume":12600000},{"Name":"Trilby hat","Volume":12600000},{"Name":"Bowler Hat","Volume":12600000},{"Name":"Cloak","Volume":126000}]'
Expected: '[{"Name":"Bowler Hat","Volume":12600000},{"Name":"Trilby hat","Volume":12600000},{"Name":"Bowler Hat","Volume":12600000},{"Name":"Cloak","Volume":126000}]'
]]></output>
                </test-case>
                <test-case id="0-1391" name="function-eval.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1191312221" result="Passed" start-time="2024-02-19T13:49:38.3236939Z" end-time="2024-02-19T13:49:38.3250683Z" duration="0.001375" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$eval('[1,string(2),3]')';&#xA; result: error D3121" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3121.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$eval('[1,string(2),3]')'
]]></output>
                </test-case>
                <test-case id="0-1392" name="function-eval.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="887017926" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3250872Z" end-time="2024-02-19T13:49:38.3278583Z" duration="0.002772" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$eval('[1,#string(2),3]')';&#xA; result: error D3120" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'eval': Not supported yet: #
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$eval('[1,#string(2),3]')'
]]></output>
                </test-case>
                <test-case id="0-1393" name="function-eval.case008[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case008[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1167673484" result="Passed" start-time="2024-02-19T13:49:38.3278857Z" end-time="2024-02-19T13:49:38.3280844Z" duration="0.000199" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$eval(&quot;{ 'test': 1 }&quot;, [])';&#xA; result: {&quot;test&quot;:1}" />
                  </properties>
                  <output><![CDATA[Expr is '$eval("{ 'test': 1 }", [])'
Result: '{"test":1}'
Expected: '{"test":1}'
]]></output>
                </test-case>
                <test-case id="0-1394" name="function-eval.case008[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case008[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="663717376" result="Passed" start-time="2024-02-19T13:49:38.3280963Z" end-time="2024-02-19T13:49:38.3283206Z" duration="0.000224" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$eval(&quot;{ 'test': 1 }&quot;)';&#xA; result: {&quot;test&quot;:1}" />
                  </properties>
                  <output><![CDATA[Expr is '$eval("{ 'test': 1 }")'
Result: '{"test":1}'
Expected: '{"test":1}'
]]></output>
                </test-case>
                <test-case id="0-1395" name="function-eval.case008[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case008[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1580318525" result="Passed" start-time="2024-02-19T13:49:38.3283337Z" end-time="2024-02-19T13:49:38.3285740Z" duration="0.000240" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$eval(&quot;{ 'test': 1 }&quot;, [1,2,3])';&#xA; result: {&quot;test&quot;:1}" />
                  </properties>
                  <output><![CDATA[Expr is '$eval("{ 'test': 1 }", [1,2,3])'
Result: '{"test":1}'
Expected: '{"test":1}'
]]></output>
                </test-case>
                <test-case id="0-1396" name="function-eval.case008[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-eval.case008[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="152999539" result="Passed" start-time="2024-02-19T13:49:38.3285849Z" end-time="2024-02-19T13:49:38.3287785Z" duration="0.000194" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$eval(&quot;{ 'test': 1 }&quot;)';&#xA; result: {&quot;test&quot;:1}" />
                  </properties>
                  <output><![CDATA[Expr is '$eval("{ 'test': 1 }")'
Result: '{"test":1}'
Expected: '{"test":1}'
]]></output>
                </test-case>
                <test-case id="0-1397" name="function-exists.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1882065275" result="Passed" start-time="2024-02-19T13:49:38.3287899Z" end-time="2024-02-19T13:49:38.3291052Z" duration="0.000315" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(&quot;Hello World&quot;)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists("Hello World")'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1398" name="function-exists.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="159657735" result="Passed" start-time="2024-02-19T13:49:38.3291185Z" end-time="2024-02-19T13:49:38.3292343Z" duration="0.000116" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(&quot;&quot;)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists("")'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1399" name="function-exists.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="921597943" result="Passed" start-time="2024-02-19T13:49:38.3292454Z" end-time="2024-02-19T13:49:38.3293578Z" duration="0.000113" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(true)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(true)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1400" name="function-exists.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2044542834" result="Passed" start-time="2024-02-19T13:49:38.3293684Z" end-time="2024-02-19T13:49:38.3294787Z" duration="0.000110" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(false)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(false)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1401" name="function-exists.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="601068618" result="Passed" start-time="2024-02-19T13:49:38.3294897Z" end-time="2024-02-19T13:49:38.3295867Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(0)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(0)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1402" name="function-exists.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1651146551" result="Passed" start-time="2024-02-19T13:49:38.3295953Z" end-time="2024-02-19T13:49:38.3296792Z" duration="0.000084" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(-0.5)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(-0.5)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1403" name="function-exists.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1967904494" result="Passed" start-time="2024-02-19T13:49:38.3296861Z" end-time="2024-02-19T13:49:38.3297558Z" duration="0.000070" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(null)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(null)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1404" name="function-exists.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="33579534" result="Passed" start-time="2024-02-19T13:49:38.3297650Z" end-time="2024-02-19T13:49:38.3298681Z" duration="0.000103" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists([])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists([])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1405" name="function-exists.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1766318263" result="Passed" start-time="2024-02-19T13:49:38.3298783Z" end-time="2024-02-19T13:49:38.3299847Z" duration="0.000106" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists([0])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists([0])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1406" name="function-exists.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1336561062" result="Passed" start-time="2024-02-19T13:49:38.3299937Z" end-time="2024-02-19T13:49:38.3300965Z" duration="0.000103" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists([1,2,3])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists([1,2,3])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1407" name="function-exists.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1654846820" result="Passed" start-time="2024-02-19T13:49:38.3301077Z" end-time="2024-02-19T13:49:38.3302053Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists([[]])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists([[]])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1408" name="function-exists.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1027561603" result="Passed" start-time="2024-02-19T13:49:38.3302305Z" end-time="2024-02-19T13:49:38.3303813Z" duration="0.000151" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists([[null]])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists([[null]])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1409" name="function-exists.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1957471131" result="Passed" start-time="2024-02-19T13:49:38.3303913Z" end-time="2024-02-19T13:49:38.3305112Z" duration="0.000120" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists([[[true]]])';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists([[[true]]])'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1410" name="function-exists.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="841149556" result="Passed" start-time="2024-02-19T13:49:38.3305235Z" end-time="2024-02-19T13:49:38.3307131Z" duration="0.000190" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists({})';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists({})'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1411" name="function-exists.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1958822908" result="Passed" start-time="2024-02-19T13:49:38.3307379Z" end-time="2024-02-19T13:49:38.3308542Z" duration="0.000116" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists({&quot;hello&quot;:&quot;world&quot;})';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists({"hello":"world"})'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1412" name="function-exists.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1013142782" result="Passed" start-time="2024-02-19T13:49:38.3308658Z" end-time="2024-02-19T13:49:38.3309452Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(Account)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(Account)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1413" name="function-exists.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="829854197" result="Passed" start-time="2024-02-19T13:49:38.3309553Z" end-time="2024-02-19T13:49:38.3310525Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(Account.Order.Product.Price)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(Account.Order.Product.Price)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1414" name="function-exists.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1204025864" result="Passed" start-time="2024-02-19T13:49:38.3310622Z" end-time="2024-02-19T13:49:38.3311483Z" duration="0.000086" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists($exists)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists($exists)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1415" name="function-exists.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1014577175" result="Passed" start-time="2024-02-19T13:49:38.3311585Z" end-time="2024-02-19T13:49:38.3312541Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(function(){true})';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(function(){true})'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1416" name="function-exists.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="375589489" result="Passed" start-time="2024-02-19T13:49:38.3312635Z" end-time="2024-02-19T13:49:38.3313358Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(blah)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(blah)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1417" name="function-exists.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="348610416" result="Passed" start-time="2024-02-19T13:49:38.3313433Z" end-time="2024-02-19T13:49:38.3314047Z" duration="0.000061" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(Account.blah)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(Account.blah)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1418" name="function-exists.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1924484605" result="Passed" start-time="2024-02-19T13:49:38.3314106Z" end-time="2024-02-19T13:49:38.3314753Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(Account.Order[2])';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(Account.Order[2])'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1419" name="function-exists.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="972846821" result="Passed" start-time="2024-02-19T13:49:38.3314818Z" end-time="2024-02-19T13:49:38.3315584Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$exists(Account.Order[0].blah)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$exists(Account.Order[0].blah)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1420" name="function-exists.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2112939919" result="Passed" start-time="2024-02-19T13:49:38.3315651Z" end-time="2024-02-19T13:49:38.3322039Z" duration="0.000639" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$exists(2,3)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$exists(2,3)'
]]></output>
                </test-case>
                <test-case id="0-1421" name="function-exists.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.function-exists.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="148917035" result="Passed" start-time="2024-02-19T13:49:38.3322150Z" end-time="2024-02-19T13:49:38.3336794Z" duration="0.001465" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$exists()';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$exists()'
]]></output>
                </test-case>
                <test-case id="0-1422" name="function-floor.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-floor.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="273722833" result="Passed" start-time="2024-02-19T13:49:38.3336927Z" end-time="2024-02-19T13:49:38.3340948Z" duration="0.000402" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$floor(3.7)';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '$floor(3.7)'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-1423" name="function-floor.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-floor.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1243236617" result="Passed" start-time="2024-02-19T13:49:38.3341050Z" end-time="2024-02-19T13:49:38.3341758Z" duration="0.000071" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$floor(-3.7)';&#xA; result: -4" />
                  </properties>
                  <output><![CDATA[Expr is '$floor(-3.7)'
Result: '-4'
Expected: '-4'
]]></output>
                </test-case>
                <test-case id="0-1424" name="function-floor.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-floor.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="753369239" result="Passed" start-time="2024-02-19T13:49:38.3341831Z" end-time="2024-02-19T13:49:38.3342340Z" duration="0.000051" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$floor(0)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$floor(0)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1425" name="function-floor.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-floor.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1352666560" result="Passed" start-time="2024-02-19T13:49:38.3342404Z" end-time="2024-02-19T13:49:38.3342865Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$floor(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$floor(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1426" name="function-formatBase.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="771117229" result="Passed" start-time="2024-02-19T13:49:38.3342923Z" end-time="2024-02-19T13:49:38.3346301Z" duration="0.000338" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatBase(100)';&#xA; result: &quot;100&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatBase(100)'
Result: '"100"'
Expected: '"100"'
]]></output>
                </test-case>
                <test-case id="0-1427" name="function-formatBase.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1079949327" result="Passed" start-time="2024-02-19T13:49:38.3346402Z" end-time="2024-02-19T13:49:38.3347046Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatBase(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$formatBase(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1428" name="function-formatBase.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1888097369" result="Passed" start-time="2024-02-19T13:49:38.3347113Z" end-time="2024-02-19T13:49:38.3347640Z" duration="0.000053" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatBase(100, 2)';&#xA; result: &quot;1100100&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatBase(100, 2)'
Result: '"1100100"'
Expected: '"1100100"'
]]></output>
                </test-case>
                <test-case id="0-1429" name="function-formatBase.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1133247785" result="Passed" start-time="2024-02-19T13:49:38.3347703Z" end-time="2024-02-19T13:49:38.3348200Z" duration="0.000050" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatBase(-100, 2)';&#xA; result: &quot;-1100100&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatBase(-100, 2)'
Result: '"-1100100"'
Expected: '"-1100100"'
]]></output>
                </test-case>
                <test-case id="0-1430" name="function-formatBase.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="910903312" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3348258Z" end-time="2024-02-19T13:49:38.3357550Z" duration="0.000929" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatBase(100, 36)';&#xA; result: &quot;2s&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatBase': No support for radix=36 in formatBase() yet
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$formatBase(100, 36)'
]]></output>
                </test-case>
                <test-case id="0-1431" name="function-formatBase.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="305702802" result="Failed" start-time="2024-02-19T13:49:38.3357938Z" end-time="2024-02-19T13:49:38.3485177Z" duration="0.012724" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatBase(99.5, 2.5)';&#xA; result: &quot;1100100&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1100100"', got '"1100011"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatBase(99.5, 2.5)'
Result: '"1100011"'
Expected: '"1100100"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1100100"', got '"1100011"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1432" name="function-formatBase.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="916390879" result="Passed" start-time="2024-02-19T13:49:38.3485596Z" end-time="2024-02-19T13:49:38.3491799Z" duration="0.000620" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatBase(100, 1)';&#xA; result: error D3100" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3100.
Actually thrown D3100.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$formatBase(100, 1)'
]]></output>
                </test-case>
                <test-case id="0-1433" name="function-formatBase.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatBase.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2011092571" result="Passed" start-time="2024-02-19T13:49:38.3491952Z" end-time="2024-02-19T13:49:38.3497416Z" duration="0.000547" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatBase(100, 37)';&#xA; result: error D3100" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3100.
Actually thrown D3100.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$formatBase(100, 37)'
]]></output>
                </test-case>
                <test-case id="0-1434" name="function-formatInteger.formatInteger[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1241483782" result="Passed" start-time="2024-02-19T13:49:38.3497597Z" end-time="2024-02-19T13:49:38.3499804Z" duration="0.000221" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(undefined, '0')';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Description: 'should return result object'
Expr is '$formatInteger(undefined, '0')'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1435" name="function-formatInteger.formatInteger[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1345523106" result="Passed" start-time="2024-02-19T13:49:38.3499931Z" end-time="2024-02-19T13:49:38.3502349Z" duration="0.000242" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(123, '000')';&#xA; result: &quot;123&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should format a number'
Expr is '$formatInteger(123, '000')'
Result: '"123"'
Expected: '"123"'
]]></output>
                </test-case>
                <test-case id="0-1436" name="function-formatInteger.formatInteger[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="417805442" result="Passed" start-time="2024-02-19T13:49:38.3502454Z" end-time="2024-02-19T13:49:38.3503219Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(123, '0000')';&#xA; result: &quot;0123&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(123, '0000')'
Result: '"0123"'
Expected: '"0123"'
]]></output>
                </test-case>
                <test-case id="0-1437" name="function-formatInteger.formatInteger[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1994957478" result="Passed" start-time="2024-02-19T13:49:38.3503304Z" end-time="2024-02-19T13:49:38.3504087Z" duration="0.000079" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(-3, '0000')';&#xA; result: &quot;-0003&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(-3, '0000')'
Result: '"-0003"'
Expected: '"-0003"'
]]></output>
                </test-case>
                <test-case id="0-1438" name="function-formatInteger.formatInteger[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="255459937" result="Passed" start-time="2024-02-19T13:49:38.3504190Z" end-time="2024-02-19T13:49:38.3504867Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234, '0;c')';&#xA; result: &quot;1234&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(1234, '0;c')'
Result: '"1234"'
Expected: '"1234"'
]]></output>
                </test-case>
                <test-case id="0-1439" name="function-formatInteger.formatInteger[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="96970953" result="Passed" start-time="2024-02-19T13:49:38.3504939Z" end-time="2024-02-19T13:49:38.3505692Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234, '###0')';&#xA; result: &quot;1234&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(1234, '###0')'
Result: '"1234"'
Expected: '"1234"'
]]></output>
                </test-case>
                <test-case id="0-1440" name="function-formatInteger.formatInteger[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1695494770" result="Passed" start-time="2024-02-19T13:49:38.3505771Z" end-time="2024-02-19T13:49:38.3506335Z" duration="0.000056" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12, '###0')';&#xA; result: &quot;12&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(12, '###0')'
Result: '"12"'
Expected: '"12"'
]]></output>
                </test-case>
                <test-case id="0-1441" name="function-formatInteger.formatInteger[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1166335567" result="Passed" start-time="2024-02-19T13:49:38.3506395Z" end-time="2024-02-19T13:49:38.3506951Z" duration="0.000056" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12.6, '###0')';&#xA; result: &quot;12&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should round down floats'
Expr is '$formatInteger(12.6, '###0')'
Result: '"12"'
Expected: '"12"'
]]></output>
                </test-case>
                <test-case id="0-1442" name="function-formatInteger.formatInteger[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2025680028" result="Failed" start-time="2024-02-19T13:49:38.3507041Z" end-time="2024-02-19T13:49:38.3515220Z" duration="0.000818" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(123, '000;o')';&#xA; result: &quot;123rd&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"123rd"', got '"123"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should format a number'
Expr is '$formatInteger(123, '000;o')'
Result: '"123"'
Expected: '"123rd"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"123rd"', got '"123"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1443" name="function-formatInteger.formatInteger[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1345024358" result="Failed" start-time="2024-02-19T13:49:38.3515387Z" end-time="2024-02-19T13:49:38.3521858Z" duration="0.000647" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1, '0;o')';&#xA; result: &quot;1st&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1st"', got '"1"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(1, '0;o')'
Result: '"1"'
Expected: '"1st"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1st"', got '"1"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1444" name="function-formatInteger.formatInteger[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1045010260" result="Failed" start-time="2024-02-19T13:49:38.3521976Z" end-time="2024-02-19T13:49:38.3530964Z" duration="0.000899" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(28, '#0;o')';&#xA; result: &quot;28th&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"28th"', got '"28"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(28, '#0;o')'
Result: '"28"'
Expected: '"28th"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"28th"', got '"28"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1445" name="function-formatInteger.formatInteger[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1730243218" result="Failed" start-time="2024-02-19T13:49:38.3531081Z" end-time="2024-02-19T13:49:38.3536982Z" duration="0.000590" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234, '###0;o')';&#xA; result: &quot;1234th&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1234th"', got '"1234"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(1234, '###0;o')'
Result: '"1234"'
Expected: '"1234th"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1234th"', got '"1234"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1446" name="function-formatInteger.formatInteger[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="178169439" result="Failed" start-time="2024-02-19T13:49:38.3537092Z" end-time="2024-02-19T13:49:38.3544964Z" duration="0.000788" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12, '###0;o')';&#xA; result: &quot;12th&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"12th"', got '"12"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$formatInteger(12, '###0;o')'
Result: '"12"'
Expected: '"12th"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"12th"', got '"12"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1447" name="function-formatInteger.formatInteger[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="57163729" result="Failed" start-time="2024-02-19T13:49:38.3545267Z" end-time="2024-02-19T13:49:38.3552859Z" duration="0.000759" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12340, '###١')';&#xA; result: &quot;١٢٣٤٠&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"١٢٣٤٠"', got '"12340١"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$formatInteger(12340, '###١')'
Result: '"12340١"'
Expected: '"١٢٣٤٠"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"١٢٣٤٠"', got '"12340١"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1448" name="function-formatInteger.formatInteger[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2111131267" result="Failed" start-time="2024-02-19T13:49:38.3553064Z" end-time="2024-02-19T13:49:38.3560114Z" duration="0.000705" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12340, '###０')';&#xA; result: &quot;１２３４０&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"１２３４０"', got '"12340０"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$formatInteger(12340, '###０')'
Result: '"12340０"'
Expected: '"１２３４０"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"１２３４０"', got '"12340０"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1449" name="function-formatInteger.formatInteger[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1796623848" result="Failed" start-time="2024-02-19T13:49:38.3560296Z" end-time="2024-02-19T13:49:38.3568565Z" duration="0.000827" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12340, '##0０')';&#xA; result: error D3131" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3131 (), got '"12340０"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should throw error with mixed integer groups'
Expr is '$formatInteger(12340, '##0０')'
Result: '"12340０"'
Expected error D3131
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3131 (), got '"12340０"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1450" name="function-formatInteger.formatInteger[17]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[17]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1204729036" result="Passed" start-time="2024-02-19T13:49:38.3568752Z" end-time="2024-02-19T13:49:38.3569514Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12, '#,##0')';&#xA; result: &quot;12&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$formatInteger(12, '#,##0')'
Result: '"12"'
Expected: '"12"'
]]></output>
                </test-case>
                <test-case id="0-1451" name="function-formatInteger.formatInteger[18]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[18]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1951872770" result="Passed" start-time="2024-02-19T13:49:38.3569585Z" end-time="2024-02-19T13:49:38.3570129Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1200, '#,##0')';&#xA; result: &quot;1,200&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$formatInteger(1200, '#,##0')'
Result: '"1,200"'
Expected: '"1,200"'
]]></output>
                </test-case>
                <test-case id="0-1452" name="function-formatInteger.formatInteger[19]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[19]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2105064317" result="Passed" start-time="2024-02-19T13:49:38.3570190Z" end-time="2024-02-19T13:49:38.3570702Z" duration="0.000051" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(120000, '#,##0')';&#xA; result: &quot;120,000&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$formatInteger(120000, '#,##0')'
Result: '"120,000"'
Expected: '"120,000"'
]]></output>
                </test-case>
                <test-case id="0-1453" name="function-formatInteger.formatInteger[20]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[20]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1334294561" result="Passed" start-time="2024-02-19T13:49:38.3570761Z" end-time="2024-02-19T13:49:38.3571273Z" duration="0.000051" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12345678, '#,##0')';&#xA; result: &quot;12,345,678&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$formatInteger(12345678, '#,##0')'
Result: '"12,345,678"'
Expected: '"12,345,678"'
]]></output>
                </test-case>
                <test-case id="0-1454" name="function-formatInteger.formatInteger[21]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[21]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="956141671" result="Passed" start-time="2024-02-19T13:49:38.3571333Z" end-time="2024-02-19T13:49:38.3571821Z" duration="0.000049" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234567890, '#,##0')';&#xA; result: &quot;1,234,567,890&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$formatInteger(1234567890, '#,##0')'
Result: '"1,234,567,890"'
Expected: '"1,234,567,890"'
]]></output>
                </test-case>
                <test-case id="0-1455" name="function-formatInteger.formatInteger[22]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[22]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1895625799" result="Passed" start-time="2024-02-19T13:49:38.3571879Z" end-time="2024-02-19T13:49:38.3572398Z" duration="0.000052" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234567890, '#,###,##0')';&#xA; result: &quot;1,234,567,890&quot;" />
                  </properties>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$formatInteger(1234567890, '#,###,##0')'
Result: '"1,234,567,890"'
Expected: '"1,234,567,890"'
]]></output>
                </test-case>
                <test-case id="0-1456" name="function-formatInteger.formatInteger[23]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[23]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="327345785" result="Failed" start-time="2024-02-19T13:49:38.3572481Z" end-time="2024-02-19T13:49:38.3579544Z" duration="0.000706" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234567890, '#:###,##0')';&#xA; result: &quot;1234:567,890&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1234:567,890"', got '"1,234,:567,890"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should insert non-regular groups - different chars'
Expr is '$formatInteger(1234567890, '#:###,##0')'
Result: '"1,234,:567,890"'
Expected: '"1234:567,890"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1234:567,890"', got '"1,234,:567,890"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1457" name="function-formatInteger.formatInteger[24]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[24]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="407909934" result="Failed" start-time="2024-02-19T13:49:38.3579678Z" end-time="2024-02-19T13:49:38.3586384Z" duration="0.000671" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234567890, '##,##,##0')';&#xA; result: &quot;12345,67,890&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"12345,67,890"', got '"1,234,567,890"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should insert non-regular groups - different positions'
Expr is '$formatInteger(1234567890, '##,##,##0')'
Result: '"1,234,567,890"'
Expected: '"12345,67,890"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"12345,67,890"', got '"1,234,567,890"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1458" name="function-formatInteger.formatInteger[25]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[25]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1214535255" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3586532Z" end-time="2024-02-19T13:49:38.3599694Z" duration="0.001317" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(0, 'I')';&#xA; result: &quot;&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '0'
Expr is '$formatInteger(0, 'I')'
]]></output>
                </test-case>
                <test-case id="0-1459" name="function-formatInteger.formatInteger[26]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[26]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="828396621" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3599973Z" end-time="2024-02-19T13:49:38.3609539Z" duration="0.000957" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1984, 'I')';&#xA; result: &quot;MCMLXXXIV&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1984'
Expr is '$formatInteger(1984, 'I')'
]]></output>
                </test-case>
                <test-case id="0-1460" name="function-formatInteger.formatInteger[27]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[27]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="995201034" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3609736Z" end-time="2024-02-19T13:49:38.3616657Z" duration="0.000692" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(99, 'i')';&#xA; result: &quot;xcix&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '99'
Expr is '$formatInteger(99, 'i')'
]]></output>
                </test-case>
                <test-case id="0-1461" name="function-formatInteger.formatInteger[28]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[28]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="256611735" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3616791Z" end-time="2024-02-19T13:49:38.3624848Z" duration="0.000806" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12, 'w')';&#xA; result: &quot;twelve&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '12'
Expr is '$formatInteger(12, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1462" name="function-formatInteger.formatInteger[29]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[29]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1914233098" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3625064Z" end-time="2024-02-19T13:49:38.3648415Z" duration="0.002335" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(20, 'w')';&#xA; result: &quot;twenty&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '20'
Expr is '$formatInteger(20, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1463" name="function-formatInteger.formatInteger[30]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[30]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2041797465" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3648697Z" end-time="2024-02-19T13:49:38.3658161Z" duration="0.000947" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(34, 'w')';&#xA; result: &quot;thirty-four&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '34'
Expr is '$formatInteger(34, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1464" name="function-formatInteger.formatInteger[31]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[31]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1046567819" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3658385Z" end-time="2024-02-19T13:49:38.3665036Z" duration="0.000665" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(99, 'W')';&#xA; result: &quot;NINETY-NINE&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '99'
Expr is '$formatInteger(99, 'W')'
]]></output>
                </test-case>
                <test-case id="0-1465" name="function-formatInteger.formatInteger[32]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[32]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="535446754" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3665207Z" end-time="2024-02-19T13:49:38.3670511Z" duration="0.000531" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(100, 'w')';&#xA; result: &quot;one hundred&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '100'
Expr is '$formatInteger(100, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1466" name="function-formatInteger.formatInteger[33]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[33]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1042432029" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3670664Z" end-time="2024-02-19T13:49:38.3676293Z" duration="0.000563" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(555, 'W')';&#xA; result: &quot;FIVE HUNDRED AND FIFTY-FIVE&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '555'
Expr is '$formatInteger(555, 'W')'
]]></output>
                </test-case>
                <test-case id="0-1467" name="function-formatInteger.formatInteger[34]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[34]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1149533858" result="Failed" start-time="2024-02-19T13:49:38.3676450Z" end-time="2024-02-19T13:49:38.3682568Z" duration="0.000612" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(555, 'Ww')';&#xA; result: &quot;Five Hundred and Fifty-Five&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Five Hundred and Fifty-Five"', got '"Ww"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '555'
Expr is '$formatInteger(555, 'Ww')'
Result: '"Ww"'
Expected: '"Five Hundred and Fifty-Five"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Five Hundred and Fifty-Five"', got '"Ww"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1468" name="function-formatInteger.formatInteger[35]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[35]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1735854062" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3682730Z" end-time="2024-02-19T13:49:38.3688739Z" duration="0.000601" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(919, 'w')';&#xA; result: &quot;nine hundred and nineteen&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '919'
Expr is '$formatInteger(919, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1469" name="function-formatInteger.formatInteger[36]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[36]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2005986405" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3688909Z" end-time="2024-02-19T13:49:38.3694735Z" duration="0.000583" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(730, 'w')';&#xA; result: &quot;seven hundred and thirty&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '730'
Expr is '$formatInteger(730, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1470" name="function-formatInteger.formatInteger[37]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[37]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="596771733" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3694839Z" end-time="2024-02-19T13:49:38.3700615Z" duration="0.000578" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1000, 'w')';&#xA; result: &quot;one thousand&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1000'
Expr is '$formatInteger(1000, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1471" name="function-formatInteger.formatInteger[38]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[38]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="528115658" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3700724Z" end-time="2024-02-19T13:49:38.3707704Z" duration="0.000698" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(3730, 'w')';&#xA; result: &quot;three thousand, seven hundred and thirty&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '3730'
Expr is '$formatInteger(3730, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1472" name="function-formatInteger.formatInteger[39]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[39]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="93150479" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3707822Z" end-time="2024-02-19T13:49:38.3713222Z" duration="0.000540" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(327730, 'w')';&#xA; result: &quot;three hundred and twenty-seven thousand, seven hundred and thirty&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '327730'
Expr is '$formatInteger(327730, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1473" name="function-formatInteger.formatInteger[40]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[40]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1827513652" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3713372Z" end-time="2024-02-19T13:49:38.3719460Z" duration="0.000609" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(4327730, 'w')';&#xA; result: &quot;four million, three hundred and twenty-seven thousand, seven hundred and thirty&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '4327730'
Expr is '$formatInteger(4327730, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1474" name="function-formatInteger.formatInteger[41]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[41]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1424835698" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3719667Z" end-time="2024-02-19T13:49:38.3729461Z" duration="0.000980" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1000000000001, 'w')';&#xA; result: &quot;one trillion and one&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1e12 + 1'
Expr is '$formatInteger(1000000000001, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1475" name="function-formatInteger.formatInteger[42]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[42]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="946604352" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3729705Z" end-time="2024-02-19T13:49:38.3739133Z" duration="0.000943" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234567890123, 'w')';&#xA; result: &quot;one trillion, two hundred and thirty-four billion, five hundred and sixty-seven million, eight hundred and ninety thousand, one hundred and twenty-three&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1234567890123'
Expr is '$formatInteger(1234567890123, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1476" name="function-formatInteger.formatInteger[43]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[43]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="270720654" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3739394Z" end-time="2024-02-19T13:49:38.3747727Z" duration="0.000833" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1000000000000000, 'w')';&#xA; result: &quot;one thousand trillion&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1e15'
Expr is '$formatInteger(1000000000000000, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1477" name="function-formatInteger.formatInteger[44]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[44]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1076182122" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3747922Z" end-time="2024-02-19T13:49:38.3756023Z" duration="0.000810" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1e+46, 'w')';&#xA; result: &quot;ten billion trillion trillion trillion&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1e46'
Expr is '$formatInteger(1e+46, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1478" name="function-formatInteger.formatInteger[45]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[45]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="198226357" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3756324Z" end-time="2024-02-19T13:49:38.3764168Z" duration="0.000785" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1234567890123456, 'w')';&#xA; result: &quot;one thousand, two hundred and thirty-four trillion, five hundred and sixty-seven billion, eight hundred and ninety million, one hundred and twenty-three thousand, four hundred and fifty-six&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1234567890123456'
Expr is '$formatInteger(1234567890123456, 'w')'
]]></output>
                </test-case>
                <test-case id="0-1479" name="function-formatInteger.formatInteger[46]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[46]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1170609668" result="Failed" start-time="2024-02-19T13:49:38.3764310Z" end-time="2024-02-19T13:49:38.3769657Z" duration="0.000535" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12, 'w;o')';&#xA; result: &quot;twelfth&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"twelfth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '12'
Expr is '$formatInteger(12, 'w;o')'
Result: '"w"'
Expected: '"twelfth"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"twelfth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1480" name="function-formatInteger.formatInteger[47]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[47]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1174497121" result="Failed" start-time="2024-02-19T13:49:38.3769770Z" end-time="2024-02-19T13:49:38.3774582Z" duration="0.000481" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(20, 'w;o')';&#xA; result: &quot;twentieth&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"twentieth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '20'
Expr is '$formatInteger(20, 'w;o')'
Result: '"w"'
Expected: '"twentieth"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"twentieth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1481" name="function-formatInteger.formatInteger[48]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[48]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="713953500" result="Failed" start-time="2024-02-19T13:49:38.3774692Z" end-time="2024-02-19T13:49:38.3779152Z" duration="0.000446" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(34, 'w;o')';&#xA; result: &quot;thirty-fourth&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"thirty-fourth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '34'
Expr is '$formatInteger(34, 'w;o')'
Result: '"w"'
Expected: '"thirty-fourth"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"thirty-fourth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1482" name="function-formatInteger.formatInteger[49]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[49]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1116301707" result="Failed" start-time="2024-02-19T13:49:38.3779284Z" end-time="2024-02-19T13:49:38.3784437Z" duration="0.000515" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(99, 'W;o')';&#xA; result: &quot;NINETY-NINTH&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"NINETY-NINTH"', got '"W"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '99'
Expr is '$formatInteger(99, 'W;o')'
Result: '"W"'
Expected: '"NINETY-NINTH"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"NINETY-NINTH"', got '"W"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1483" name="function-formatInteger.formatInteger[50]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[50]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="91473521" result="Failed" start-time="2024-02-19T13:49:38.3784673Z" end-time="2024-02-19T13:49:38.3792142Z" duration="0.000747" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(100, 'w;o')';&#xA; result: &quot;one hundredth&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"one hundredth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '100'
Expr is '$formatInteger(100, 'w;o')'
Result: '"w"'
Expected: '"one hundredth"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"one hundredth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1484" name="function-formatInteger.formatInteger[51]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[51]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2076002396" result="Failed" start-time="2024-02-19T13:49:38.3792395Z" end-time="2024-02-19T13:49:38.3799736Z" duration="0.000734" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(555, 'W;o')';&#xA; result: &quot;FIVE HUNDRED AND FIFTY-FIFTH&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"FIVE HUNDRED AND FIFTY-FIFTH"', got '"W"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '555'
Expr is '$formatInteger(555, 'W;o')'
Result: '"W"'
Expected: '"FIVE HUNDRED AND FIFTY-FIFTH"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"FIVE HUNDRED AND FIFTY-FIFTH"', got '"W"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1485" name="function-formatInteger.formatInteger[52]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[52]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1106514189" result="Failed" start-time="2024-02-19T13:49:38.3799939Z" end-time="2024-02-19T13:49:38.3807052Z" duration="0.000711" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(919, 'w;o')';&#xA; result: &quot;nine hundred and nineteenth&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"nine hundred and nineteenth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '919'
Expr is '$formatInteger(919, 'w;o')'
Result: '"w"'
Expected: '"nine hundred and nineteenth"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"nine hundred and nineteenth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1486" name="function-formatInteger.formatInteger[53]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[53]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="348122132" result="Failed" start-time="2024-02-19T13:49:38.3807236Z" end-time="2024-02-19T13:49:38.3813468Z" duration="0.000623" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(730, 'w;o')';&#xA; result: &quot;seven hundred and thirtieth&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"seven hundred and thirtieth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '730'
Expr is '$formatInteger(730, 'w;o')'
Result: '"w"'
Expected: '"seven hundred and thirtieth"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"seven hundred and thirtieth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1487" name="function-formatInteger.formatInteger[54]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[54]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1729579965" result="Failed" start-time="2024-02-19T13:49:38.3813656Z" end-time="2024-02-19T13:49:38.3819346Z" duration="0.000569" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1000, 'w;o')';&#xA; result: &quot;one thousandth&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"one thousandth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '1000'
Expr is '$formatInteger(1000, 'w;o')'
Result: '"w"'
Expected: '"one thousandth"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"one thousandth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1488" name="function-formatInteger.formatInteger[55]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[55]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1054950900" result="Failed" start-time="2024-02-19T13:49:38.3819453Z" end-time="2024-02-19T13:49:38.3824552Z" duration="0.000510" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(3731, 'w;o')';&#xA; result: &quot;three thousand, seven hundred and thirty-first&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"three thousand, seven hundred and thirty-first"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '3730'
Expr is '$formatInteger(3731, 'w;o')'
Result: '"w"'
Expected: '"three thousand, seven hundred and thirty-first"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"three thousand, seven hundred and thirty-first"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1489" name="function-formatInteger.formatInteger[56]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[56]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1493341630" result="Failed" start-time="2024-02-19T13:49:38.3824733Z" end-time="2024-02-19T13:49:38.3830153Z" duration="0.000542" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(327713, 'w;o')';&#xA; result: &quot;three hundred and twenty-seven thousand, seven hundred and thirteenth&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"three hundred and twenty-seven thousand, seven hundred and thirteenth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '327730'
Expr is '$formatInteger(327713, 'w;o')'
Result: '"w"'
Expected: '"three hundred and twenty-seven thousand, seven hundred and thirteenth"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"three hundred and twenty-seven thousand, seven hundred and thirteenth"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1490" name="function-formatInteger.formatInteger[57]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[57]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1018177321" result="Failed" start-time="2024-02-19T13:49:38.3830331Z" end-time="2024-02-19T13:49:38.3836083Z" duration="0.000575" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(4327732, 'w;o')';&#xA; result: &quot;four million, three hundred and twenty-seven thousand, seven hundred and thirty-second&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"four million, three hundred and twenty-seven thousand, seven hundred and thirty-second"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '4327730'
Expr is '$formatInteger(4327732, 'w;o')'
Result: '"w"'
Expected: '"four million, three hundred and twenty-seven thousand, seven hundred and thirty-second"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"four million, three hundred and twenty-seven thousand, seven hundred and thirty-second"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1491" name="function-formatInteger.formatInteger[58]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[58]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="9895508" result="Failed" start-time="2024-02-19T13:49:38.3836302Z" end-time="2024-02-19T13:49:38.3842889Z" duration="0.000659" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1000000000001, 'w;o')';&#xA; result: &quot;one trillion and first&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"one trillion and first"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '1e12 + 1'
Expr is '$formatInteger(1000000000001, 'w;o')'
Result: '"w"'
Expected: '"one trillion and first"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"one trillion and first"', got '"w"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1492" name="function-formatInteger.formatInteger[59]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[59]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="780422223" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3843085Z" end-time="2024-02-19T13:49:38.3850244Z" duration="0.000716" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(1, 'A')';&#xA; result: &quot;A&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1'
Expr is '$formatInteger(1, 'A')'
]]></output>
                </test-case>
                <test-case id="0-1493" name="function-formatInteger.formatInteger[60]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[60]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1574546963" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3850430Z" end-time="2024-02-19T13:49:38.3858442Z" duration="0.000801" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(12, 'a')';&#xA; result: &quot;l&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '12'
Expr is '$formatInteger(12, 'a')'
]]></output>
                </test-case>
                <test-case id="0-1494" name="function-formatInteger.formatInteger[61]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[61]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1249253566" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3858641Z" end-time="2024-02-19T13:49:38.3866352Z" duration="0.000771" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(26, 'a')';&#xA; result: &quot;z&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '26'
Expr is '$formatInteger(26, 'a')'
]]></output>
                </test-case>
                <test-case id="0-1495" name="function-formatInteger.formatInteger[62]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[62]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1438883035" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3866556Z" end-time="2024-02-19T13:49:38.3873691Z" duration="0.000714" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(27, 'a')';&#xA; result: &quot;aa&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '27'
Expr is '$formatInteger(27, 'a')'
]]></output>
                </test-case>
                <test-case id="0-1496" name="function-formatInteger.formatInteger[63]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[63]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1399586116" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3873877Z" end-time="2024-02-19T13:49:38.3880457Z" duration="0.000658" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(300, 'A')';&#xA; result: &quot;KN&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '300'
Expr is '$formatInteger(300, 'A')'
]]></output>
                </test-case>
                <test-case id="0-1497" name="function-formatInteger.formatInteger[64]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[64]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2131366210" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.3880655Z" end-time="2024-02-19T13:49:38.3902648Z" duration="0.002200" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(123456, 'A')';&#xA; result: &quot;FZPH&quot;" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'formatInteger': Format specifier was invalid.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '123456'
Expr is '$formatInteger(123456, 'A')'
]]></output>
                </test-case>
                <test-case id="0-1498" name="function-formatInteger.formatInteger[65]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatInteger.formatInteger[65]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="298456539" result="Failed" start-time="2024-02-19T13:49:38.3902829Z" end-time="2024-02-19T13:49:38.3910830Z" duration="0.000800" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatInteger(123456, 'α')';&#xA; result: error D3130" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3130 (), got '"α"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'sequence starting with greek alpha, α'
Expr is '$formatInteger(123456, 'α')'
Result: '"α"'
Expected error D3130
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3130 (), got '"α"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1499" name="function-formatNumber.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="509563506" result="Passed" start-time="2024-02-19T13:49:38.3910991Z" end-time="2024-02-19T13:49:38.3920636Z" duration="0.000965" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(12345.6, &quot;#,###.00&quot;)';&#xA; result: &quot;12,345.60&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(12345.6, "#,###.00")'
Result: '"12,345.60"'
Expected: '"12,345.60"'
]]></output>
                </test-case>
                <test-case id="0-1500" name="function-formatNumber.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="687811189" result="Failed" start-time="2024-02-19T13:49:38.3920889Z" end-time="2024-02-19T13:49:38.3930065Z" duration="0.000918" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(12345678.9, &quot;9,999.99&quot;)';&#xA; result: &quot;12,345,678.90&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"12,345,678.90"', got '"12345,678.90"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(12345678.9, "9,999.99")'
Result: '"12345,678.90"'
Expected: '"12,345,678.90"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"12,345,678.90"', got '"12345,678.90"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1501" name="function-formatNumber.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1176119228" result="Passed" start-time="2024-02-19T13:49:38.3930321Z" end-time="2024-02-19T13:49:38.3931743Z" duration="0.000142" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(123412345678.9, &quot;9,9,99.99&quot;)';&#xA; result: &quot;123412345,6,78.90&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(123412345678.9, "9,9,99.99")'
Result: '"123412345,6,78.90"'
Expected: '"123412345,6,78.90"'
]]></output>
                </test-case>
                <test-case id="0-1502" name="function-formatNumber.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="468793314" result="Passed" start-time="2024-02-19T13:49:38.3931862Z" end-time="2024-02-19T13:49:38.3932887Z" duration="0.000103" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(1234.56789, &quot;9,999.999,999&quot;)';&#xA; result: &quot;1,234.567,890&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(1234.56789, "9,999.999,999")'
Result: '"1,234.567,890"'
Expected: '"1,234.567,890"'
]]></output>
                </test-case>
                <test-case id="0-1503" name="function-formatNumber.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="105144862" result="Passed" start-time="2024-02-19T13:49:38.3932997Z" end-time="2024-02-19T13:49:38.3933968Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(123.9, &quot;9999&quot;)';&#xA; result: &quot;0124&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(123.9, "9999")'
Result: '"0124"'
Expected: '"0124"'
]]></output>
                </test-case>
                <test-case id="0-1504" name="function-formatNumber.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1199852115" result="Passed" start-time="2024-02-19T13:49:38.3934067Z" end-time="2024-02-19T13:49:38.3934969Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(0.14, &quot;01%&quot;)';&#xA; result: &quot;14%&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(0.14, "01%")'
Result: '"14%"'
Expected: '"14%"'
]]></output>
                </test-case>
                <test-case id="0-1505" name="function-formatNumber.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="676613378" result="Passed" start-time="2024-02-19T13:49:38.3935079Z" end-time="2024-02-19T13:49:38.3935939Z" duration="0.000086" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(0.4857,&quot;###.###‰&quot;)';&#xA; result: &quot;485.7‰&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(0.4857,"###.###‰")'
Result: '"485.7‰"'
Expected: '"485.7‰"'
]]></output>
                </test-case>
                <test-case id="0-1506" name="function-formatNumber.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1858722291" result="Failed" start-time="2024-02-19T13:49:38.3936034Z" end-time="2024-02-19T13:49:38.3945037Z" duration="0.000900" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(0.14, &quot;###pm&quot;, {&quot;per-mille&quot;: &quot;pm&quot;})';&#xA; result: &quot;140pm&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"140pm"', got '"pm"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(0.14, "###pm", {"per-mille": "pm"})'
Result: '"pm"'
Expected: '"140pm"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"140pm"', got '"pm"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1507" name="function-formatNumber.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="277550665" result="Passed" start-time="2024-02-19T13:49:38.3945184Z" end-time="2024-02-19T13:49:38.3946598Z" duration="0.000142" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(-6, &quot;000&quot;)';&#xA; result: &quot;-006&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(-6, "000")'
Result: '"-006"'
Expected: '"-006"'
]]></output>
                </test-case>
                <test-case id="0-1508" name="function-formatNumber.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2056942510" result="Passed" start-time="2024-02-19T13:49:38.3946720Z" end-time="2024-02-19T13:49:38.3947702Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(1234.5678, &quot;00.000e0&quot;)';&#xA; result: &quot;12.346e2&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(1234.5678, "00.000e0")'
Result: '"12.346e2"'
Expected: '"12.346e2"'
]]></output>
                </test-case>
                <test-case id="0-1509" name="function-formatNumber.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="9537319" result="Passed" start-time="2024-02-19T13:49:38.3947816Z" end-time="2024-02-19T13:49:38.3948733Z" duration="0.000092" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(1234.5678, &quot;00.000e000&quot;)';&#xA; result: &quot;12.346e002&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(1234.5678, "00.000e000")'
Result: '"12.346e002"'
Expected: '"12.346e002"'
]]></output>
                </test-case>
                <test-case id="0-1510" name="function-formatNumber.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1624905145" result="Failed" start-time="2024-02-19T13:49:38.3948827Z" end-time="2024-02-19T13:49:38.3957145Z" duration="0.000832" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(1234.5678, &quot;①①.①①①e①&quot;, {&quot;zero-digit&quot;: &quot;⑟&quot;})';&#xA; result: &quot;①②.③④⑥e②&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"①②.③④⑥e②"', got '"①①1235①①①e①"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(1234.5678, "①①.①①①e①", {"zero-digit": "⑟"})'
Result: '"①①1235①①①e①"'
Expected: '"①②.③④⑥e②"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"①②.③④⑥e②"', got '"①①1235①①①e①"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1511" name="function-formatNumber.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1398647310" result="Passed" start-time="2024-02-19T13:49:38.3957276Z" end-time="2024-02-19T13:49:38.3958255Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(0.234, &quot;0.0e0&quot;)';&#xA; result: &quot;2.3e-1&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(0.234, "0.0e0")'
Result: '"2.3e-1"'
Expected: '"2.3e-1"'
]]></output>
                </test-case>
                <test-case id="0-1512" name="function-formatNumber.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="209683577" result="Failed" start-time="2024-02-19T13:49:38.3958354Z" end-time="2024-02-19T13:49:38.3966685Z" duration="0.000833" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(0.234, &quot;#.00e0&quot;)';&#xA; result: &quot;0.23e0&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"0.23e0"', got '"2.34e-1"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(0.234, "#.00e0")'
Result: '"2.34e-1"'
Expected: '"0.23e0"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"0.23e0"', got '"2.34e-1"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1513" name="function-formatNumber.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="43925587" result="Failed" start-time="2024-02-19T13:49:38.3966846Z" end-time="2024-02-19T13:49:38.3975130Z" duration="0.000829" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(0.123, &quot;#.e9&quot;)';&#xA; result: &quot;0.1e0&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"0.1e0"', got '"1e-1"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(0.123, "#.e9")'
Result: '"1e-1"'
Expected: '"0.1e0"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"0.1e0"', got '"1e-1"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1514" name="function-formatNumber.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1801383147" result="Passed" start-time="2024-02-19T13:49:38.3975315Z" end-time="2024-02-19T13:49:38.3976267Z" duration="0.000095" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(0.234, &quot;.00e0&quot;)';&#xA; result: &quot;.23e0&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(0.234, ".00e0")'
Result: '".23e0"'
Expected: '".23e0"'
]]></output>
                </test-case>
                <test-case id="0-1515" name="function-formatNumber.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="281247534" result="Passed" start-time="2024-02-19T13:49:38.3976349Z" end-time="2024-02-19T13:49:38.3977376Z" duration="0.000103" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(2392.14*(-36.58), &quot;000,000.000###;###,###.000###&quot;)';&#xA; result: &quot;87,504.4812&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(2392.14*(-36.58), "000,000.000###;###,###.000###")'
Result: '"87,504.4812"'
Expected: '"87,504.4812"'
]]></output>
                </test-case>
                <test-case id="0-1516" name="function-formatNumber.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1287793675" result="Passed" start-time="2024-02-19T13:49:38.3977469Z" end-time="2024-02-19T13:49:38.3978256Z" duration="0.000079" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(2.14*86.58,&quot;PREFIX##00.000###SUFFIX&quot;)';&#xA; result: &quot;PREFIX185.2812SUFFIX&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(2.14*86.58,"PREFIX##00.000###SUFFIX")'
Result: '"PREFIX185.2812SUFFIX"'
Expected: '"PREFIX185.2812SUFFIX"'
]]></output>
                </test-case>
                <test-case id="0-1517" name="function-formatNumber.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1822759577" result="Failed" start-time="2024-02-19T13:49:38.3978341Z" end-time="2024-02-19T13:49:38.3984524Z" duration="0.000618" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(1E20,&quot;#,######&quot;)';&#xA; result: &quot;100,000000,000000,000000&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"100,000000,000000,000000"', got '"100000000000000,000000"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(1E20,"#,######")'
Result: '"100000000000000,000000"'
Expected: '"100,000000,000000,000000"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"100,000000,000000,000000"', got '"100000000000000,000000"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1518" name="function-formatNumber.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2113278716" result="Failed" start-time="2024-02-19T13:49:38.3984663Z" end-time="2024-02-19T13:49:38.3991687Z" duration="0.000703" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;#;#;#&quot;)';&#xA; result: error D3080" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3080 (), got '"20"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"#;#;#")'
Result: '"20"'
Expected error D3080
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3080 (), got '"20"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1519" name="function-formatNumber.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2087537277" result="Failed" start-time="2024-02-19T13:49:38.3991820Z" end-time="2024-02-19T13:49:38.3998961Z" duration="0.000714" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;#.0.0&quot;)';&#xA; result: error D3081" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3081 (), got '"20.00"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"#.0.0")'
Result: '"20.00"'
Expected error D3081
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3081 (), got '"20.00"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1520" name="function-formatNumber.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="187324622" result="Failed" start-time="2024-02-19T13:49:38.3999156Z" end-time="2024-02-19T13:49:38.4006963Z" duration="0.000781" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;#0%%&quot;)';&#xA; result: error D3082" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3082 (), got '"200000%%"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"#0%%")'
Result: '"200000%%"'
Expected error D3082
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3082 (), got '"200000%%"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1521" name="function-formatNumber.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1460335711" result="Failed" start-time="2024-02-19T13:49:38.4007141Z" end-time="2024-02-19T13:49:38.4014561Z" duration="0.000742" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;#0‰‰&quot;)';&#xA; result: error D3083" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3083 (), got '"20000000‰‰"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"#0‰‰")'
Result: '"20000000‰‰"'
Expected error D3083
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3083 (), got '"20000000‰‰"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1522" name="function-formatNumber.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="94582958" result="Failed" start-time="2024-02-19T13:49:38.4014903Z" end-time="2024-02-19T13:49:38.4021758Z" duration="0.000686" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;#0%‰&quot;)';&#xA; result: error D3084" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3084 (), got '"2000000%‰"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"#0%‰")'
Result: '"2000000%‰"'
Expected error D3084
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3084 (), got '"2000000%‰"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1523" name="function-formatNumber.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="242512432" result="Failed" start-time="2024-02-19T13:49:38.4021935Z" end-time="2024-02-19T13:49:38.4027362Z" duration="0.000543" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;.e0&quot;)';&#xA; result: error D3085" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3085 (), got '"e0"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,".e0")'
Result: '"e0"'
Expected error D3085
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3085 (), got '"e0"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1524" name="function-formatNumber.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="987809084" result="Failed" start-time="2024-02-19T13:49:38.4027470Z" end-time="2024-02-19T13:49:38.4033107Z" duration="0.000564" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;0+.e0&quot;)';&#xA; result: error D3086" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3086 (), got '"2+e1"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"0+.e0")'
Result: '"2+e1"'
Expected error D3086
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3086 (), got '"2+e1"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1525" name="function-formatNumber.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="586876225" result="Failed" start-time="2024-02-19T13:49:38.4033250Z" end-time="2024-02-19T13:49:38.4038606Z" duration="0.000536" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;0,.e0&quot;)';&#xA; result: error D3087" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3087 (), got '"2,e1"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"0,.e0")'
Result: '"2,e1"'
Expected error D3087
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3087 (), got '"2,e1"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1526" name="function-formatNumber.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1895177082" result="Failed" start-time="2024-02-19T13:49:38.4038834Z" end-time="2024-02-19T13:49:38.4045836Z" duration="0.000700" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;0,&quot;)';&#xA; result: error D3088" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3088 (), got '"20,"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"0,")'
Result: '"20,"'
Expected error D3088
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3088 (), got '"20,"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1527" name="function-formatNumber.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="666087163" result="Failed" start-time="2024-02-19T13:49:38.4046048Z" end-time="2024-02-19T13:49:38.4052722Z" duration="0.000667" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;0,,0&quot;)';&#xA; result: error D3089" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3089 (), got '"2,,0"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"0,,0")'
Result: '"2,,0"'
Expected error D3089
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3089 (), got '"2,,0"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1528" name="function-formatNumber.case029" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case029" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="578260086" result="Failed" start-time="2024-02-19T13:49:38.4052915Z" end-time="2024-02-19T13:49:38.4057865Z" duration="0.000495" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;0#.e0&quot;)';&#xA; result: error D3090" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3090 (), got '"20e0"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"0#.e0")'
Result: '"20e0"'
Expected error D3090
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3090 (), got '"20e0"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1529" name="function-formatNumber.case030" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case030" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2133436310" result="Failed" start-time="2024-02-19T13:49:38.4058034Z" end-time="2024-02-19T13:49:38.4062624Z" duration="0.000459" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;#0.#0e0&quot;)';&#xA; result: error D3091" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3091 (), got '"20.00e0"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"#0.#0e0")'
Result: '"20.00e0"'
Expected error D3091
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3091 (), got '"20.00e0"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1530" name="function-formatNumber.case031" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case031" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1694501883" result="Failed" start-time="2024-02-19T13:49:38.4062780Z" end-time="2024-02-19T13:49:38.4067062Z" duration="0.000428" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;#0.0e0%&quot;)';&#xA; result: error D3092" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3092 (), got '"20.0e2%"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"#0.0e0%")'
Result: '"20.0e2%"'
Expected error D3092
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3092 (), got '"20.0e2%"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1531" name="function-formatNumber.case032" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case032" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="286838091" result="Failed" start-time="2024-02-19T13:49:38.4067217Z" end-time="2024-02-19T13:49:38.4071493Z" duration="0.000428" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(20,&quot;#0.0e0,0&quot;)';&#xA; result: error D3093" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3093 (), got '"20.0e0,0"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(20,"#0.0e0,0")'
Result: '"20.0e0,0"'
Expected error D3093
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3093 (), got '"20.0e0,0"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1532" name="function-formatNumber.case033" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case033" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="777725583" result="Passed" start-time="2024-02-19T13:49:38.4071645Z" end-time="2024-02-19T13:49:38.4072603Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(2, '000.000')';&#xA; result: &quot;002.000&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(2, '000.000')'
Result: '"002.000"'
Expected: '"002.000"'
]]></output>
                </test-case>
                <test-case id="0-1533" name="function-formatNumber.case034" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case034" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1836146498" result="Failed" start-time="2024-02-19T13:49:38.4072714Z" end-time="2024-02-19T13:49:38.4078932Z" duration="0.000622" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(2, 'AAA.AAA', {'zero-digit': 'A'})';&#xA; result: &quot;AAC.AAA&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"AAC.AAA"', got '"AAA2AAA"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(2, 'AAA.AAA', {'zero-digit': 'A'})'
Result: '"AAA2AAA"'
Expected: '"AAC.AAA"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"AAC.AAA"', got '"AAA2AAA"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1534" name="function-formatNumber.case035" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case035" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="482798479" result="Failed" start-time="2024-02-19T13:49:38.4079037Z" end-time="2024-02-19T13:49:38.4084521Z" duration="0.000549" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(0.1, 'AeAAA', {'zero-digit': 'A'})';&#xA; result: &quot;Be-AAB&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Be-AAB"', got '"AeAAA"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$formatNumber(0.1, 'AeAAA', {'zero-digit': 'A'})'
Result: '"AeAAA"'
Expected: '"Be-AAB"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Be-AAB"', got '"AeAAA"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1535" name="function-formatNumber.case036" fullname="Jsonata.Net.Native.TestSuite.Tests.function-formatNumber.case036" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2145861540" result="Passed" start-time="2024-02-19T13:49:38.4084722Z" end-time="2024-02-19T13:49:38.4085705Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$formatNumber(foo, '#0.00')';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$formatNumber(foo, '#0.00')'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1536" name="function-fromMillis.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="245160186" result="Failed" start-time="2024-02-19T13:49:38.4085818Z" end-time="2024-02-19T13:49:38.4128078Z" duration="0.004226" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1)';&#xA; result: &quot;1970-01-01T00:00:00.001Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1970-01-01T00:00:00.001Z"', got '"1970-01-01T00:00:00.001+00:00"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$fromMillis(1)'
Result: '"1970-01-01T00:00:00.001+00:00"'
Expected: '"1970-01-01T00:00:00.001Z"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1970-01-01T00:00:00.001Z"', got '"1970-01-01T00:00:00.001+00:00"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1537" name="function-fromMillis.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1011156845" result="Failed" start-time="2024-02-19T13:49:38.4128477Z" end-time="2024-02-19T13:49:38.4136453Z" duration="0.000798" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1509380732935)';&#xA; result: &quot;2017-10-30T16:25:32.935Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2017-10-30T16:25:32.935Z"', got '"2017-10-30T16:25:32.935+00:00"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$fromMillis(1509380732935)'
Result: '"2017-10-30T16:25:32.935+00:00"'
Expected: '"2017-10-30T16:25:32.935Z"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2017-10-30T16:25:32.935Z"', got '"2017-10-30T16:25:32.935+00:00"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1538" name="function-fromMillis.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1039105053" result="Passed" start-time="2024-02-19T13:49:38.4136740Z" end-time="2024-02-19T13:49:38.4138088Z" duration="0.000135" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(foo)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$fromMillis(foo)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1539" name="function-fromMillis.formatDateTime[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1399389018" result="Passed" start-time="2024-02-19T13:49:38.4138190Z" end-time="2024-02-19T13:49:38.4138924Z" duration="0.000073" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(undefined, 'undefined')';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Description: 'should return nothing'
Expr is '$fromMillis(undefined, 'undefined')'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1540" name="function-fromMillis.formatDateTime[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1395275545" result="Failed" start-time="2024-02-19T13:49:38.4139002Z" end-time="2024-02-19T13:49:38.4145878Z" duration="0.000688" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, 'Hello')';&#xA; result: &quot;Hello&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Hello"', got '"10ello"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should return literal'
Expr is '$fromMillis(1521801216617, 'Hello')'
Result: '"10ello"'
Expected: '"Hello"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Hello"', got '"10ello"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1541" name="function-fromMillis.formatDateTime[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="70571467" result="Failed" start-time="2024-02-19T13:49:38.4146082Z" end-time="2024-02-19T13:49:38.4152260Z" duration="0.000618" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, 'Year: [Y0001]')';&#xA; result: &quot;Year: 2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Year: 2018"', got '"Year: [Y0001]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should format the year'
Expr is '$fromMillis(1521801216617, 'Year: [Y0001]')'
Result: '"Year: [Y0001]"'
Expected: '"Year: 2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Year: 2018"', got '"Year: [Y0001]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1542" name="function-fromMillis.formatDateTime[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1820121102" result="Failed" start-time="2024-02-19T13:49:38.4152386Z" end-time="2024-02-19T13:49:38.4157832Z" duration="0.000545" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, 'Year: &lt;[Y0001]&gt;')';&#xA; result: &quot;Year: &lt;2018&gt;&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Year: <2018>"', got '"Year: <[Y0001]>"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should format the year'
Expr is '$fromMillis(1521801216617, 'Year: <[Y0001]>')'
Result: '"Year: <[Y0001]>"'
Expected: '"Year: <2018>"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Year: <2018>"', got '"Year: <[Y0001]>"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1543" name="function-fromMillis.formatDateTime[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1045413581" result="Failed" start-time="2024-02-19T13:49:38.4157940Z" end-time="2024-02-19T13:49:38.4174901Z" duration="0.001696" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, 'Year: &lt;[Y9,999,*]&gt;')';&#xA; result: &quot;Year: &lt;2,018&gt;&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Year: <2,018>"', got '"Year: <[Y9,999,*]>"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should format the year with grouping separator'
Expr is '$fromMillis(1521801216617, 'Year: <[Y9,999,*]>')'
Result: '"Year: <[Y9,999,*]>"'
Expected: '"Year: <2,018>"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Year: <2,018>"', got '"Year: <[Y9,999,*]>"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1544" name="function-fromMillis.formatDateTime[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2015920132" result="Failed" start-time="2024-02-19T13:49:38.4175151Z" end-time="2024-02-19T13:49:38.4182972Z" duration="0.000782" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[[Year: &lt;[Y0001]&gt;')';&#xA; result: &quot;[Year: &lt;2018&gt;&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"[Year: <2018>"', got '"[[Year: <[Y0001]>"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should handle opening square bracket literal'
Expr is '$fromMillis(1521801216617, '[[Year: <[Y0001]>')'
Result: '"[[Year: <[Y0001]>"'
Expected: '"[Year: <2018>"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"[Year: <2018>"', got '"[[Year: <[Y0001]>"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1545" name="function-fromMillis.formatDateTime[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1767013658" result="Failed" start-time="2024-02-19T13:49:38.4183166Z" end-time="2024-02-19T13:49:38.4189728Z" duration="0.000656" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, 'Year]]: &lt;[Y0001]&gt;')';&#xA; result: &quot;Year]: &lt;2018&gt;&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Year]: <2018>"', got '"Year]]: <[Y0001]>"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should handle closing square bracket literal'
Expr is '$fromMillis(1521801216617, 'Year]]: <[Y0001]>')'
Result: '"Year]]: <[Y0001]>"'
Expected: '"Year]: <2018>"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Year]: <2018>"', got '"Year]]: <[Y0001]>"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1546" name="function-fromMillis.formatDateTime[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1947695578" result="Failed" start-time="2024-02-19T13:49:38.4189936Z" end-time="2024-02-19T13:49:38.4196431Z" duration="0.000650" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[[Year]]: [[[Y0001]]]')';&#xA; result: &quot;[Year]: [2018]&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"[Year]: [2018]"', got '"[[Year]]: [[[Y0001]]]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should handle opening and closing square bracket literal'
Expr is '$fromMillis(1521801216617, '[[Year]]: [[[Y0001]]]')'
Result: '"[[Year]]: [[[Y0001]]]"'
Expected: '"[Year]: [2018]"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"[Year]: [2018]"', got '"[[Year]]: [[[Y0001]]]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1547" name="function-fromMillis.formatDateTime[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="736496636" result="Failed" start-time="2024-02-19T13:49:38.4196609Z" end-time="2024-02-19T13:49:38.4203549Z" duration="0.000694" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D#1]/[M#1]/[Y0001]')';&#xA; result: &quot;23/3/2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23/3/2018"', got '"[D#1].[3#1].[Y0001]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should format the date in European style'
Expr is '$fromMillis(1521801216617, '[D#1]/[M#1]/[Y0001]')'
Result: '"[D#1].[3#1].[Y0001]"'
Expected: '"23/3/2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23/3/2018"', got '"[D#1].[3#1].[Y0001]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1548" name="function-fromMillis.formatDateTime[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1920647463" result="Failed" start-time="2024-02-19T13:49:38.4203725Z" end-time="2024-02-19T13:49:38.4209367Z" duration="0.000565" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1522616700000, '[F0] [FNn]')';&#xA; result: &quot;7 Sunday&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"7 Sunday"', got '"[0] [Nn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sunday should be day 7'
Expr is '$fromMillis(1522616700000, '[F0] [FNn]')'
Result: '"[0] [Nn]"'
Expected: '"7 Sunday"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"7 Sunday"', got '"[0] [Nn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1549" name="function-fromMillis.formatDateTime[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="968006032" result="Failed" start-time="2024-02-19T13:49:38.4209542Z" end-time="2024-02-19T13:49:38.4215173Z" duration="0.000563" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1522703100000, '[F0] [FNn]')';&#xA; result: &quot;1 Monday&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1 Monday"', got '"[0] [Nn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Monday should be day 1'
Expr is '$fromMillis(1522703100000, '[F0] [FNn]')'
Result: '"[0] [Nn]"'
Expected: '"1 Monday"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1 Monday"', got '"[0] [Nn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1550" name="function-fromMillis.formatDateTime[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="151089360" result="Failed" start-time="2024-02-19T13:49:38.4215337Z" end-time="2024-02-19T13:49:38.4220404Z" duration="0.000507" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[Y0001]-[M01]-[D01]')';&#xA; result: &quot;2018-03-23&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-03-23"', got '"[Y0001]-[301]-[D01]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should format the date in ISO 8601 style'
Expr is '$fromMillis(1521801216617, '[Y0001]-[M01]-[D01]')'
Result: '"[Y0001]-[301]-[D01]"'
Expected: '"2018-03-23"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-03-23"', got '"[Y0001]-[301]-[D01]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1551" name="function-fromMillis.formatDateTime[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1724310186" result="Failed" start-time="2024-02-19T13:49:38.4220510Z" end-time="2024-02-19T13:49:38.4225229Z" duration="0.000472" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[M01]/[D01]/[Y0001] at [H01]:[m01]:[s01]')';&#xA; result: &quot;03/23/2018 at 10:33:36&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"03/23/2018 at 10:33:36"', got '"[301].[D01].[Y0001] a [1001]:[3301]:[3601]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should format the date & time in US style'
Expr is '$fromMillis(1521801216617, '[M01]/[D01]/[Y0001] at [H01]:[m01]:[s01]')'
Result: '"[301].[D01].[Y0001] a [1001]:[3301]:[3601]"'
Expected: '"03/23/2018 at 10:33:36"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"03/23/2018 at 10:33:36"', got '"[301].[D01].[Y0001] a [1001]:[3301]:[3601]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1552" name="function-fromMillis.formatDateTime[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="18087494" result="Failed" start-time="2024-02-19T13:49:38.4225355Z" end-time="2024-02-19T13:49:38.4230379Z" duration="0.000503" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z01:01t]')';&#xA; result: &quot;2018-03-23T10:33:36.617Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-03-23T10:33:36.617Z"', got '"[Y]-[301]-[D01]T[1001]:[33]:[36].[6001][Z01:01]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should format the date & time in ISO 8601 style'
Expr is '$fromMillis(1521801216617, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z01:01t]')'
Result: '"[Y]-[301]-[D01]T[1001]:[33]:[36].[6001][Z01:01]"'
Expected: '"2018-03-23T10:33:36.617Z"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-03-23T10:33:36.617Z"', got '"[Y]-[301]-[D01]T[1001]:[33]:[36].[6001][Z01:01]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1553" name="function-fromMillis.formatDateTime[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="358402909" result="Failed" start-time="2024-02-19T13:49:38.4230542Z" end-time="2024-02-19T13:49:38.4236748Z" duration="0.000621" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[Y]-[ M01]-[D 01]T[H01 ]:[ m   ]:[s].[f0  01][Z01:&#xA; 01t]')';&#xA; result: &quot;2018-03-23T10:33:36.617Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-03-23T10:33:36.617Z"', got '"[Y]-[ 301]-[D 01]T[1001 ]:[ 33   ]:[36].[60  01][Z01:\n 01]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should ignore whitespace in variable markers'
Expr is '$fromMillis(1521801216617, '[Y]-[ M01]-[D 01]T[H01 ]:[ m   ]:[s].[f0  01][Z01:
 01t]')'
Result: '"[Y]-[ 301]-[D 01]T[1001 ]:[ 33   ]:[36].[60  01][Z01:\n 01]"'
Expected: '"2018-03-23T10:33:36.617Z"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-03-23T10:33:36.617Z"', got '"[Y]-[ 301]-[D 01]T[1001 ]:[ 33   ]:[36].[60  01][Z01:\n 01]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1554" name="function-fromMillis.formatDateTime[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="322238884" result="Failed" start-time="2024-02-19T13:49:38.4236902Z" end-time="2024-02-19T13:49:38.4244009Z" duration="0.000711" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z0101t]', '+0100')';&#xA; result: &quot;2018-03-23T13:33:36.617+03:00&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-03-23T13:33:36.617+03:00"', got '"[Y]-[301]-[D01]T[1101]:[33]:[36].[6001][Z0101]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for BST +0100'
Expr is '$fromMillis(1521801216617, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z0101t]', '+0100')'
Result: '"[Y]-[301]-[D01]T[1101]:[33]:[36].[6001][Z0101]"'
Expected: '"2018-03-23T13:33:36.617+03:00"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-03-23T13:33:36.617+03:00"', got '"[Y]-[301]-[D01]T[1101]:[33]:[36].[6001][Z0101]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1555" name="function-fromMillis.formatDateTime[17]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[17]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1374959125" result="Failed" start-time="2024-02-19T13:49:38.4244184Z" end-time="2024-02-19T13:49:38.4250326Z" duration="0.000614" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z01:01]')';&#xA; result: &quot;2018-07-11T15:00:00+03:00&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-07-11T15:00:00+03:00"', got '"[Y]-[701]-[D01]T[1201]:[0]:[0][Z01:01]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for UTC'
Expr is '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z01:01]')'
Result: '"[Y]-[701]-[D01]T[1201]:[0]:[0][Z01:01]"'
Expected: '"2018-07-11T15:00:00+03:00"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-07-11T15:00:00+03:00"', got '"[Y]-[701]-[D01]T[1201]:[0]:[0][Z01:01]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1556" name="function-fromMillis.formatDateTime[18]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[18]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1081536270" result="Failed" start-time="2024-02-19T13:49:38.4250488Z" end-time="2024-02-19T13:49:38.4256376Z" duration="0.000589" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z01:01t]')';&#xA; result: &quot;2018-07-11T12:00:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-07-11T12:00:00Z"', got '"[Y]-[701]-[D01]T[1201]:[0]:[0][Z01:01]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for Z'
Expr is '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z01:01t]')'
Result: '"[Y]-[701]-[D01]T[1201]:[0]:[0][Z01:01]"'
Expected: '"2018-07-11T12:00:00Z"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-07-11T12:00:00Z"', got '"[Y]-[701]-[D01]T[1201]:[0]:[0][Z01:01]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1557" name="function-fromMillis.formatDateTime[19]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[19]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="226280882" result="Failed" start-time="2024-02-19T13:49:38.4256543Z" end-time="2024-02-19T13:49:38.4261642Z" duration="0.000510" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z]', '-0500')';&#xA; result: &quot;2018-07-11T15:00:00+03:00&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-07-11T15:00:00+03:00"', got '"[Y]-[701]-[D01]T[701]:[0]:[0][Z]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for UTC'
Expr is '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z]', '-0500')'
Result: '"[Y]-[701]-[D01]T[701]:[0]:[0][Z]"'
Expected: '"2018-07-11T15:00:00+03:00"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-07-11T15:00:00+03:00"', got '"[Y]-[701]-[D01]T[701]:[0]:[0][Z]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1558" name="function-fromMillis.formatDateTime[20]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[20]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1264819425" result="Failed" start-time="2024-02-19T13:49:38.4261799Z" end-time="2024-02-19T13:49:38.4266963Z" duration="0.000516" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z0]', '-0500')';&#xA; result: &quot;2018-07-11T07:00:00-5&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-07-11T07:00:00-5"', got '"[Y]-[701]-[D01]T[701]:[0]:[0][Z0]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for UTC'
Expr is '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z0]', '-0500')'
Result: '"[Y]-[701]-[D01]T[701]:[0]:[0][Z0]"'
Expected: '"2018-07-11T07:00:00-5"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-07-11T07:00:00-5"', got '"[Y]-[701]-[D01]T[701]:[0]:[0][Z0]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1559" name="function-fromMillis.formatDateTime[21]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[21]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="612975890" result="Failed" start-time="2024-02-19T13:49:38.4267142Z" end-time="2024-02-19T13:49:38.4272520Z" duration="0.000538" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z]', '+1000')';&#xA; result: &quot;2018-07-11T15:00:00+03:00&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-07-11T15:00:00+03:00"', got '"[Y]-[701]-[D01]T[2201]:[0]:[0][Z]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for UTC'
Expr is '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z]', '+1000')'
Result: '"[Y]-[701]-[D01]T[2201]:[0]:[0][Z]"'
Expected: '"2018-07-11T15:00:00+03:00"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-07-11T15:00:00+03:00"', got '"[Y]-[701]-[D01]T[2201]:[0]:[0][Z]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1560" name="function-fromMillis.formatDateTime[22]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[22]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="928919943" result="Failed" start-time="2024-02-19T13:49:38.4272632Z" end-time="2024-02-19T13:49:38.4278645Z" duration="0.000602" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z0]', '+1000')';&#xA; result: &quot;2018-07-11T15:00:00+03:00&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-07-11T15:00:00+03:00"', got '"[Y]-[701]-[D01]T[2201]:[0]:[0][Z0]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for UTC'
Expr is '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z0]', '+1000')'
Result: '"[Y]-[701]-[D01]T[2201]:[0]:[0][Z0]"'
Expected: '"2018-07-11T15:00:00+03:00"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-07-11T15:00:00+03:00"', got '"[Y]-[701]-[D01]T[2201]:[0]:[0][Z0]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1561" name="function-fromMillis.formatDateTime[23]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[23]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1192635128" result="Failed" start-time="2024-02-19T13:49:38.4278784Z" end-time="2024-02-19T13:49:38.4287261Z" duration="0.000848" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z0]', '+0530')';&#xA; result: &quot;2018-07-11T17:30:00+5:30&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-07-11T17:30:00+5:30"', got '"[Y]-[701]-[D01]T[1701]:[30]:[0][Z0]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for UTC'
Expr is '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][Z0]', '+0530')'
Result: '"[Y]-[701]-[D01]T[1701]:[30]:[0][Z0]"'
Expected: '"2018-07-11T17:30:00+5:30"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-07-11T17:30:00+5:30"', got '"[Y]-[701]-[D01]T[1701]:[30]:[0][Z0]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1562" name="function-fromMillis.formatDateTime[24]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[24]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1846774226" result="Failed" start-time="2024-02-19T13:49:38.4287498Z" end-time="2024-02-19T13:49:38.4294494Z" duration="0.000700" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][z]', '-0500')';&#xA; result: &quot;2018-07-11T07:00:00GMT-05:00&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2018-07-11T07:00:00GMT-05:00"', got '"[Y]-[701]-[D01]T[701]:[0]:[0][-5]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should offset for UTC'
Expr is '$fromMillis(1531310400000, '[Y]-[M01]-[D01]T[H01]:[m]:[s][z]', '-0500')'
Result: '"[Y]-[701]-[D01]T[701]:[0]:[0][-5]"'
Expected: '"2018-07-11T07:00:00GMT-05:00"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2018-07-11T07:00:00GMT-05:00"', got '"[Y]-[701]-[D01]T[701]:[0]:[0][-5]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1563" name="function-fromMillis.formatDateTime[25]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[25]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2070989847" result="Failed" start-time="2024-02-19T13:49:38.4294704Z" end-time="2024-02-19T13:49:38.4303181Z" duration="0.000848" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1204405500000, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z0101t]', '+0530')';&#xA; result: &quot;2008-03-02T00:05:00+03:00&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2008-03-02T00:05:00+03:00"', got '"[Y]-[301]-[D01]T[201]:[35]:[0].[0001][Z0101]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should rollover day boundaries'
Expr is '$fromMillis(1204405500000, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z0101t]', '+0530')'
Result: '"[Y]-[301]-[D01]T[201]:[35]:[0].[0001][Z0101]"'
Expected: '"2008-03-02T00:05:00+03:00"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2008-03-02T00:05:00+03:00"', got '"[Y]-[301]-[D01]T[201]:[35]:[0].[0001][Z0101]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1564" name="function-fromMillis.formatDateTime[26]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[26]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="462519083" result="Failed" start-time="2024-02-19T13:49:38.4303397Z" end-time="2024-02-19T13:49:38.4310150Z" duration="0.000675" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1230757500000, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z0101t]', '+0530')';&#xA; result: &quot;2009-01-01T00:05:00+03:00&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"2009-01-01T00:05:00+03:00"', got '"[Y]-[101]-[D01]T[201]:[35]:[0].[0001][Z0101]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should rollover year boundaries'
Expr is '$fromMillis(1230757500000, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z0101t]', '+0530')'
Result: '"[Y]-[101]-[D01]T[201]:[35]:[0].[0001][Z0101]"'
Expected: '"2009-01-01T00:05:00+03:00"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"2009-01-01T00:05:00+03:00"', got '"[Y]-[101]-[D01]T[201]:[35]:[0].[0001][Z0101]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1565" name="function-fromMillis.formatDateTime[27]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[27]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1338067054" result="Failed" start-time="2024-02-19T13:49:38.4310326Z" end-time="2024-02-19T13:49:38.4317486Z" duration="0.000716" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1230757500000, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z010101t]', '+0530')';&#xA; result: error D3134" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3134 (), got '"[Y]-[101]-[D01]T[201]:[35]:[0].[0001][Z010101]"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'picture string has 6 digit timezone - error'
Expr is '$fromMillis(1230757500000, '[Y]-[M01]-[D01]T[H01]:[m]:[s].[f001][Z010101t]', '+0530')'
Result: '"[Y]-[101]-[D01]T[201]:[35]:[0].[0001][Z010101]"'
Expected error D3134
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3134 (), got '"[Y]-[101]-[D01]T[201]:[35]:[0].[0001][Z010101]"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1566" name="function-fromMillis.formatDateTime[28]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[28]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="620921727" result="Failed" start-time="2024-02-19T13:49:38.4317833Z" end-time="2024-02-19T13:49:38.4324054Z" duration="0.000622" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y,2]')';&#xA; result: &quot;23/03/18&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23/03/18"', got '"[D#1,2].[31,2].[Y,2]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should return literal'
Expr is '$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y,2]')'
Result: '"[D#1,2].[31,2].[Y,2]"'
Expected: '"23/03/18"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23/03/18"', got '"[D#1,2].[31,2].[Y,2]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1567" name="function-fromMillis.formatDateTime[29]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[29]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="521020726" result="Failed" start-time="2024-02-19T13:49:38.4324229Z" end-time="2024-02-19T13:49:38.4329726Z" duration="0.000550" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y0001,2]')';&#xA; result: &quot;23/03/2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23/03/2018"', got '"[D#1,2].[31,2].[Y0001,2]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should return literal'
Expr is '$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y0001,2]')'
Result: '"[D#1,2].[31,2].[Y0001,2]"'
Expected: '"23/03/2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23/03/2018"', got '"[D#1,2].[31,2].[Y0001,2]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1568" name="function-fromMillis.formatDateTime[30]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[30]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1708610755" result="Failed" start-time="2024-02-19T13:49:38.4329894Z" end-time="2024-02-19T13:49:38.4335290Z" duration="0.000540" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y##01,2-2]')';&#xA; result: &quot;23/03/18&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23/03/18"', got '"[D#1,2].[31,2].[Y##01,2-2]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'width modifier should override pattern'
Expr is '$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y##01,2-2]')'
Result: '"[D#1,2].[31,2].[Y##01,2-2]"'
Expected: '"23/03/18"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23/03/18"', got '"[D#1,2].[31,2].[Y##01,2-2]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1569" name="function-fromMillis.formatDateTime[31]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[31]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1803005254" result="Failed" start-time="2024-02-19T13:49:38.4335396Z" end-time="2024-02-19T13:49:38.4340617Z" duration="0.000522" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y0001,2-2]')';&#xA; result: &quot;23/03/18&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23/03/18"', got '"[D#1,2].[31,2].[Y0001,2-2]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'width modifier should override pattern'
Expr is '$fromMillis(1521801216617, '[D#1,2]/[M1,2]/[Y0001,2-2]')'
Result: '"[D#1,2].[31,2].[Y0001,2-2]"'
Expected: '"23/03/18"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23/03/18"', got '"[D#1,2].[31,2].[Y0001,2-2]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1570" name="function-fromMillis.formatDateTime[32]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[32]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="36087348" result="Failed" start-time="2024-02-19T13:49:38.4340819Z" end-time="2024-02-19T13:49:38.4346510Z" duration="0.000569" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D1] [M01] [YI]')';&#xA; result: &quot;23 03 MMXVIII&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23 03 MMXVIII"', got '"[D1] [301] [YI]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'year in roman numerals'
Expr is '$fromMillis(1521801216617, '[D1] [M01] [YI]')'
Result: '"[D1] [301] [YI]"'
Expected: '"23 03 MMXVIII"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23 03 MMXVIII"', got '"[D1] [301] [YI]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1571" name="function-fromMillis.formatDateTime[33]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[33]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="276636830" result="Failed" start-time="2024-02-19T13:49:38.4346673Z" end-time="2024-02-19T13:49:38.4353454Z" duration="0.000678" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[Da] [MA] [Yi]')';&#xA; result: &quot;w C mmxviii&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"w C mmxviii"', got '"[Da] [3A] [Yi]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'day/month in letters, year in roman numerals'
Expr is '$fromMillis(1521801216617, '[Da] [MA] [Yi]')'
Result: '"[Da] [3A] [Yi]"'
Expected: '"w C mmxviii"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"w C mmxviii"', got '"[Da] [3A] [Yi]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1572" name="function-fromMillis.formatDateTime[34]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[34]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="783654524" result="Failed" start-time="2024-02-19T13:49:38.4353647Z" end-time="2024-02-19T13:49:38.4362004Z" duration="0.000836" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D1o] [M01] [Y]')';&#xA; result: &quot;23rd 03 2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23rd 03 2018"', got '"[D1o] [301] [Y]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'day in ordinal numerals'
Expr is '$fromMillis(1521801216617, '[D1o] [M01] [Y]')'
Result: '"[D1o] [301] [Y]"'
Expected: '"23rd 03 2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23rd 03 2018"', got '"[D1o] [301] [Y]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1573" name="function-fromMillis.formatDateTime[35]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[35]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="713889698" result="Failed" start-time="2024-02-19T13:49:38.4362202Z" end-time="2024-02-19T13:49:38.4369099Z" duration="0.000690" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[Yw]')';&#xA; result: &quot;two thousand and eighteen&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"two thousand and eighteen"', got '"[Yw]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'year in words'
Expr is '$fromMillis(1521801216617, '[Yw]')'
Result: '"[Yw]"'
Expected: '"two thousand and eighteen"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"two thousand and eighteen"', got '"[Yw]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1574" name="function-fromMillis.formatDateTime[36]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[36]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="692261732" result="Failed" start-time="2024-02-19T13:49:38.4369298Z" end-time="2024-02-19T13:49:38.4374497Z" duration="0.000520" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[Dwo] [M01] [Y]')';&#xA; result: &quot;twenty-third 03 2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"twenty-third 03 2018"', got '"[Dwo] [301] [Y]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'day of month in ordinal words'
Expr is '$fromMillis(1521801216617, '[Dwo] [M01] [Y]')'
Result: '"[Dwo] [301] [Y]"'
Expected: '"twenty-third 03 2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"twenty-third 03 2018"', got '"[Dwo] [301] [Y]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1575" name="function-fromMillis.formatDateTime[37]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[37]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="116753155" result="Failed" start-time="2024-02-19T13:49:38.4374656Z" end-time="2024-02-19T13:49:38.4380526Z" duration="0.000587" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D1o] [MNn] [Y]')';&#xA; result: &quot;23rd March 2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23rd March 2018"', got '"[D1o] [3Nn] [Y]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'month in words'
Expr is '$fromMillis(1521801216617, '[D1o] [MNn] [Y]')'
Result: '"[D1o] [3Nn] [Y]"'
Expected: '"23rd March 2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23rd March 2018"', got '"[D1o] [3Nn] [Y]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1576" name="function-fromMillis.formatDateTime[38]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[38]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1787698256" result="Failed" start-time="2024-02-19T13:49:38.4380689Z" end-time="2024-02-19T13:49:38.4385648Z" duration="0.000496" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[D1o] [MN] [Y]')';&#xA; result: &quot;23rd MARCH 2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"23rd MARCH 2018"', got '"[D1o] [3N] [Y]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'month in uppercase words'
Expr is '$fromMillis(1521801216617, '[D1o] [MN] [Y]')'
Result: '"[D1o] [3N] [Y]"'
Expected: '"23rd MARCH 2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"23rd MARCH 2018"', got '"[D1o] [3N] [Y]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1577" name="function-fromMillis.formatDateTime[39]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[39]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1196653024" result="Failed" start-time="2024-02-19T13:49:38.4385831Z" end-time="2024-02-19T13:49:38.4392355Z" duration="0.000653" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[FNn], [D1o] [MNn] [Y]')';&#xA; result: &quot;Friday, 23rd March 2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Friday, 23rd March 2018"', got '"[6Nn], [D1o] [3Nn] [Y]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'day/month in words'
Expr is '$fromMillis(1521801216617, '[FNn], [D1o] [MNn] [Y]')'
Result: '"[6Nn], [D1o] [3Nn] [Y]"'
Expected: '"Friday, 23rd March 2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Friday, 23rd March 2018"', got '"[6Nn], [D1o] [3Nn] [Y]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1578" name="function-fromMillis.formatDateTime[40]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[40]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="374075947" result="Failed" start-time="2024-02-19T13:49:38.4392470Z" end-time="2024-02-19T13:49:38.4397334Z" duration="0.000487" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[FNn], the [Dwo] of [MNn] [Y] [E]')';&#xA; result: &quot;Friday, the twenty-third of March 2018 ISO&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Friday, the twenty-third of March 2018 ISO"', got '"[6Nn], 10e [Dwo] o6 [3Nn] [Y] [E]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'day/date/month in words'
Expr is '$fromMillis(1521801216617, '[FNn], the [Dwo] of [MNn] [Y] [E]')'
Result: '"[6Nn], 10e [Dwo] o6 [3Nn] [Y] [E]"'
Expected: '"Friday, the twenty-third of March 2018 ISO"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Friday, the twenty-third of March 2018 ISO"', got '"[6Nn], 10e [Dwo] o6 [3Nn] [Y] [E]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1579" name="function-fromMillis.formatDateTime[41]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[41]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1368279073" result="Failed" start-time="2024-02-19T13:49:38.4397439Z" end-time="2024-02-19T13:49:38.4402694Z" duration="0.000526" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[FNn,3-3], [D1o] [MNn,3-3] [Y] [C]')';&#xA; result: &quot;Fri, 23rd Mar 2018 ISO&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Fri, 23rd Mar 2018 ISO"', got '"[6Nn,3-3], [D1o] [3Nn,3-3] [Y] [C]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'abbreviated day/month in words'
Expr is '$fromMillis(1521801216617, '[FNn,3-3], [D1o] [MNn,3-3] [Y] [C]')'
Result: '"[6Nn,3-3], [D1o] [3Nn,3-3] [Y] [C]"'
Expected: '"Fri, 23rd Mar 2018 ISO"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Fri, 23rd Mar 2018 ISO"', got '"[6Nn,3-3], [D1o] [3Nn,3-3] [Y] [C]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1580" name="function-fromMillis.formatDateTime[42]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[42]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="786664294" result="Failed" start-time="2024-02-19T13:49:38.4402871Z" end-time="2024-02-19T13:49:38.4418025Z" duration="0.001516" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1521801216617, '[F], [D]/[M]/[Y] [h]:[m]:[s] [P]')';&#xA; result: &quot;friday, 23/3/2018 10:33:36 am&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"friday, 23/3/2018 10:33:36 am"', got '"[6], [D].[3].[Y] [10]:[33]:[36] [P]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should apply default modifiers to day/date/time'
Expr is '$fromMillis(1521801216617, '[F], [D]/[M]/[Y] [h]:[m]:[s] [P]')'
Result: '"[6], [D].[3].[Y] [10]:[33]:[36] [P]"'
Expected: '"friday, 23/3/2018 10:33:36 am"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"friday, 23/3/2018 10:33:36 am"', got '"[6], [D].[3].[Y] [10]:[33]:[36] [P]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1581" name="function-fromMillis.formatDateTime[43]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[43]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1158680446" result="Failed" start-time="2024-02-19T13:49:38.4418269Z" end-time="2024-02-19T13:49:38.4429213Z" duration="0.001095" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1204405500000, '[F], [D]/[M]/[Y] [h]:[m]:[s] [P]')';&#xA; result: &quot;saturday, 1/3/2008 9:05:00 pm&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"saturday, 1/3/2008 9:05:00 pm"', got '"[], [D].[3].[Y] [9]:[5]:[0] [P]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should apply default modifiers to day/date/time 12hr pm'
Expr is '$fromMillis(1204405500000, '[F], [D]/[M]/[Y] [h]:[m]:[s] [P]')'
Result: '"[], [D].[3].[Y] [9]:[5]:[0] [P]"'
Expected: '"saturday, 1/3/2008 9:05:00 pm"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"saturday, 1/3/2008 9:05:00 pm"', got '"[], [D].[3].[Y] [9]:[5]:[0] [P]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1582" name="function-fromMillis.formatDateTime[44]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[44]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="892923347" result="Failed" start-time="2024-02-19T13:49:38.4429456Z" end-time="2024-02-19T13:49:38.4435996Z" duration="0.000654" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1199664000000, '[F], [D]/[M]/[Y] [h]:[m]:[s] [P]')';&#xA; result: &quot;monday, 7/1/2008 12:00:00 am&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"monday, 7/1/2008 12:00:00 am"', got '"[], [D].[1].[Y] [12]:[0]:[0] [P]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should apply default modifiers to day/date/time 12hr midnight'
Expr is '$fromMillis(1199664000000, '[F], [D]/[M]/[Y] [h]:[m]:[s] [P]')'
Result: '"[], [D].[1].[Y] [12]:[0]:[0] [P]"'
Expected: '"monday, 7/1/2008 12:00:00 am"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"monday, 7/1/2008 12:00:00 am"', got '"[], [D].[1].[Y] [12]:[0]:[0] [P]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1583" name="function-fromMillis.formatDateTime[45]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[45]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1757737701" result="Failed" start-time="2024-02-19T13:49:38.4436204Z" end-time="2024-02-19T13:49:38.4443567Z" duration="0.000736" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1514808000000, '[dwo] day of the year')';&#xA; result: &quot;first day of the year&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"first day of the year"', got '"[1wo] 1a18 o0 12e 18ear"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '1st Jan should be day 1'
Expr is '$fromMillis(1514808000000, '[dwo] day of the year')'
Result: '"[1wo] 1a18 o0 12e 18ear"'
Expected: '"first day of the year"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"first day of the year"', got '"[1wo] 1a18 o0 12e 18ear"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1584" name="function-fromMillis.formatDateTime[46]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[46]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1982346950" result="Failed" start-time="2024-02-19T13:49:38.4443752Z" end-time="2024-02-19T13:49:38.4450081Z" duration="0.000633" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1546257600000, '[d] days in [Y0001]')';&#xA; result: &quot;365 days in 2018&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"365 days in 2018"', got '"[31] 31a180 in [Y0001]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '31st Dec should be day 365'
Expr is '$fromMillis(1546257600000, '[d] days in [Y0001]')'
Result: '"[31] 31a180 in [Y0001]"'
Expected: '"365 days in 2018"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"365 days in 2018"', got '"[31] 31a180 in [Y0001]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1585" name="function-fromMillis.formatDateTime[47]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[47]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2117675344" result="Failed" start-time="2024-02-19T13:49:38.4450287Z" end-time="2024-02-19T13:49:38.4455764Z" duration="0.000548" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1483185600000, '[d] days in [Y0001]')';&#xA; result: &quot;366 days in 2016&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"366 days in 2016"', got '"[31] 31a160 in [Y0001]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '31st Dec should be day 366 in a leap year'
Expr is '$fromMillis(1483185600000, '[d] days in [Y0001]')'
Result: '"[31] 31a160 in [Y0001]"'
Expected: '"366 days in 2016"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"366 days in 2016"', got '"[31] 31a160 in [Y0001]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1586" name="function-fromMillis.formatDateTime[48]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[48]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="268750597" result="Failed" start-time="2024-02-19T13:49:38.4455972Z" end-time="2024-02-19T13:49:38.4462235Z" duration="0.000626" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1514808000000, 'Week: [W]')';&#xA; result: &quot;Week: 1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Monday 1st Jan should be in the first week of 2018'
Expr is '$fromMillis(1514808000000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 1"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1587" name="function-fromMillis.formatDateTime[49]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[49]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="419322674" result="Failed" start-time="2024-02-19T13:49:38.4462358Z" end-time="2024-02-19T13:49:38.4467510Z" duration="0.000515" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1515326400000, 'Week: [W]')';&#xA; result: &quot;Week: 1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sunday 7st Jan should be in the first week of 2018'
Expr is '$fromMillis(1515326400000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 1"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1588" name="function-fromMillis.formatDateTime[50]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[50]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1513907614" result="Failed" start-time="2024-02-19T13:49:38.4467705Z" end-time="2024-02-19T13:49:38.4474268Z" duration="0.000656" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1545739200000, 'Week: [W]')';&#xA; result: &quot;Week: 52&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 52"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sunday 25th Dec should be in week 52 of 2018'
Expr is '$fromMillis(1545739200000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 52"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 52"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1589" name="function-fromMillis.formatDateTime[51]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[51]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1255323001" result="Failed" start-time="2024-02-19T13:49:38.4474445Z" end-time="2024-02-19T13:49:38.4479298Z" duration="0.000485" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1388577600000, 'Week: [W]')';&#xA; result: &quot;Week: 1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Wed 1st Jan 2014 should be in week 1'
Expr is '$fromMillis(1388577600000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 1"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1590" name="function-fromMillis.formatDateTime[52]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[52]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1064325270" result="Failed" start-time="2024-02-19T13:49:38.4479462Z" end-time="2024-02-19T13:49:38.4484241Z" duration="0.000478" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1419854400000, 'Week: [W]')';&#xA; result: &quot;Week: 1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Mon 29th Dec 2014 should be in week 1 of 2015'
Expr is '$fromMillis(1419854400000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 1"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1591" name="function-fromMillis.formatDateTime[53]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[53]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="18879304" result="Failed" start-time="2024-02-19T13:49:38.4484405Z" end-time="2024-02-19T13:49:38.4488907Z" duration="0.000450" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1419768000000, 'Week: [W]')';&#xA; result: &quot;Week: 52&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 52"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sun 28th Dec 2014 should be in week 52 of 2014'
Expr is '$fromMillis(1419768000000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 52"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 52"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1592" name="function-fromMillis.formatDateTime[54]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[54]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1893821067" result="Failed" start-time="2024-02-19T13:49:38.4489064Z" end-time="2024-02-19T13:49:38.4493460Z" duration="0.000440" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1419336000000, 'Week: [W]')';&#xA; result: &quot;Week: 52&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 52"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Tues 23th Dec 2014 should be in week 52 of 2014'
Expr is '$fromMillis(1419336000000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 52"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 52"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1593" name="function-fromMillis.formatDateTime[55]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[55]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="426129163" result="Failed" start-time="2024-02-19T13:49:38.4493613Z" end-time="2024-02-19T13:49:38.4497922Z" duration="0.000431" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1420113600000, 'Week: [W]')';&#xA; result: &quot;Week: 1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Thur 1st Jan 2015 should be in week 1 of 2015'
Expr is '$fromMillis(1420113600000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 1"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 1"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1594" name="function-fromMillis.formatDateTime[56]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[56]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="470469075" result="Failed" start-time="2024-02-19T13:49:38.4498071Z" end-time="2024-02-19T13:49:38.4502813Z" duration="0.000474" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1420459200000, 'Week: [W]')';&#xA; result: &quot;Week: 2&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 2"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Mon 5th Jan 2015 should be in week 2 of 2015'
Expr is '$fromMillis(1420459200000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 2"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 2"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1595" name="function-fromMillis.formatDateTime[57]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[57]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="202640417" result="Failed" start-time="2024-02-19T13:49:38.4502987Z" end-time="2024-02-19T13:49:38.4510178Z" duration="0.000719" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1451304000000, 'Week: [W]')';&#xA; result: &quot;Week: 53&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 53"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Mon 28th Dec 2015 should be in week 53 of 2015'
Expr is '$fromMillis(1451304000000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 53"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 53"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1596" name="function-fromMillis.formatDateTime[58]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[58]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="371280888" result="Failed" start-time="2024-02-19T13:49:38.4510287Z" end-time="2024-02-19T13:49:38.4516335Z" duration="0.000605" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1451563200000, 'Week: [W]')';&#xA; result: &quot;Week: 53&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 53"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Thur 31th Dec 2015 should be in week 53 of 2015'
Expr is '$fromMillis(1451563200000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 53"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 53"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1597" name="function-fromMillis.formatDateTime[59]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[59]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1896614902" result="Failed" start-time="2024-02-19T13:49:38.4516547Z" end-time="2024-02-19T13:49:38.4524123Z" duration="0.000758" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1451736000000, 'Week: [W]')';&#xA; result: &quot;Week: 53&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 53"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sat 2nd Jan 2016 should be in week 53 of 2015'
Expr is '$fromMillis(1451736000000, 'Week: [W]')'
Result: '"Week: [W]"'
Expected: '"Week: 53"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 53"', got '"Week: [W]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1598" name="function-fromMillis.formatDateTime[60]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[60]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="582894498" result="Failed" start-time="2024-02-19T13:49:38.4524355Z" end-time="2024-02-19T13:49:38.4533030Z" duration="0.000868" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1359460800000, 'Week: [w] of [xNn]')';&#xA; result: &quot;Week: 5 of January&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 5 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Tue 29th Jan 2013 should be in week 5 of Jan'
Expr is '$fromMillis(1359460800000, 'Week: [w] of [xNn]')'
Result: '"Week: [w] o0 [xNn]"'
Expected: '"Week: 5 of January"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 5 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1599" name="function-fromMillis.formatDateTime[61]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[61]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="677853078" result="Failed" start-time="2024-02-19T13:49:38.4533233Z" end-time="2024-02-19T13:49:38.4540933Z" duration="0.000770" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1359633600000, 'Week: [w] of [xNn]')';&#xA; result: &quot;Week: 5 of January&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 5 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Thur 31st Jan 2013 should be in week 5 of Jan'
Expr is '$fromMillis(1359633600000, 'Week: [w] of [xNn]')'
Result: '"Week: [w] o0 [xNn]"'
Expected: '"Week: 5 of January"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 5 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1600" name="function-fromMillis.formatDateTime[62]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[62]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1146091931" result="Failed" start-time="2024-02-19T13:49:38.4541271Z" end-time="2024-02-19T13:49:38.4547037Z" duration="0.000577" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1359720000000, 'Week: [w] of [xNn]')';&#xA; result: &quot;Week: 5 of January&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 5 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Thur 1st Feb 2013 should be in week 5 of Jan'
Expr is '$fromMillis(1359720000000, 'Week: [w] of [xNn]')'
Result: '"Week: [w] o0 [xNn]"'
Expected: '"Week: 5 of January"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 5 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1601" name="function-fromMillis.formatDateTime[63]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[63]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1426674852" result="Failed" start-time="2024-02-19T13:49:38.4547200Z" end-time="2024-02-19T13:49:38.4552594Z" duration="0.000540" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1514808000000, 'Week: [w] of [xNn]')';&#xA; result: &quot;Week: 1 of January&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 1 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Mon 1st Jan 2018 should be in week 1 of Jan'
Expr is '$fromMillis(1514808000000, 'Week: [w] of [xNn]')'
Result: '"Week: [w] o0 [xNn]"'
Expected: '"Week: 1 of January"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 1 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1602" name="function-fromMillis.formatDateTime[64]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[64]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1175369528" result="Failed" start-time="2024-02-19T13:49:38.4552787Z" end-time="2024-02-19T13:49:38.4558854Z" duration="0.000607" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1483272000000, 'Week: [w] of [xNn]')';&#xA; result: &quot;Week: 5 of December&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 5 of December"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sun 1st Jan 2017 should be in week 5 of Dec'
Expr is '$fromMillis(1483272000000, 'Week: [w] of [xNn]')'
Result: '"Week: [w] o0 [xNn]"'
Expected: '"Week: 5 of December"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 5 of December"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1603" name="function-fromMillis.formatDateTime[65]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[65]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="117642209" result="Failed" start-time="2024-02-19T13:49:38.4559029Z" end-time="2024-02-19T13:49:38.4564809Z" duration="0.000578" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1533038400000, 'Week: [w] of [xNn]')';&#xA; result: &quot;Week: 1 of August&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 1 of August"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Tues 31st July 2018 should be in week 1 of Aug'
Expr is '$fromMillis(1533038400000, 'Week: [w] of [xNn]')'
Result: '"Week: [w] o0 [xNn]"'
Expected: '"Week: 1 of August"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 1 of August"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1604" name="function-fromMillis.formatDateTime[66]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[66]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="931918684" result="Failed" start-time="2024-02-19T13:49:38.4564999Z" end-time="2024-02-19T13:49:38.4571704Z" duration="0.000671" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1419940800000, 'Week: [w] of [xNn]')';&#xA; result: &quot;Week: 1 of January&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"Week: 1 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Tues 30th Dec 2014 should be in week 1 of Jan'
Expr is '$fromMillis(1419940800000, 'Week: [w] of [xNn]')'
Result: '"Week: [w] o0 [xNn]"'
Expected: '"Week: 1 of January"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"Week: 1 of January"', got '"Week: [w] o0 [xNn]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1605" name="function-fromMillis.formatDateTime[67]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[67]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2021936177" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4571836Z" end-time="2024-02-19T13:49:38.4599662Z" duration="0.002783" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-10-21T13:05:00Z').[$fromMillis(), $fromMillis($, (),'-0500'), $fromMillis($, (),'0000')] ';&#xA; result: [&quot;2018-10-21T13:05:00Z&quot;,&quot;2018-10-21T16:05:00+03:00&quot;,&quot;2018-10-21T13:05:00Z&quot;]" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2018-10-21T13:05:00Z']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalPathStep(Node step, JArray array, EvaluationEnvironment env, Boolean lastStep) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 1281
   at Jsonata.Net.Native.Eval.EvalProcessor.evalPath(PathNode node, JToken data, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 1243
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 85
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Undefined picture string defaults to ISO 8601'
Expr is '$toMillis('2018-10-21T13:05:00Z').[$fromMillis(), $fromMillis($, (),'-0500'), $fromMillis($, (),'0000')] '
]]></output>
                </test-case>
                <test-case id="0-1606" name="function-fromMillis.formatDateTime[68]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[68]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="940655662" result="Failed" start-time="2024-02-19T13:49:38.4599988Z" end-time="2024-02-19T13:49:38.4608502Z" duration="0.000852" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1419940800000, '[YN]-[M]-[D]')';&#xA; result: error D3133" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3133 (), got '"[YN]-[12]-[D]"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'throws error asking for year name'
Expr is '$fromMillis(1419940800000, '[YN]-[M]-[D]')'
Result: '"[YN]-[12]-[D]"'
Expected error D3133
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3133 (), got '"[YN]-[12]-[D]"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1607" name="function-fromMillis.formatDateTime[69]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.formatDateTime[69]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1451681443" result="Failed" start-time="2024-02-19T13:49:38.4608775Z" end-time="2024-02-19T13:49:38.4616108Z" duration="0.000733" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$fromMillis(1419940800000, '[YN]-[M')';&#xA; result: error D3135" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3135 (), got '"[YN]-[12"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'throws error for component with no closing bracket'
Expr is '$fromMillis(1419940800000, '[YN]-[M')'
Result: '"[YN]-[12"'
Expected error D3135
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3135 (), got '"[YN]-[12"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1608" name="function-fromMillis.isoWeekDate[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1813624824" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4616346Z" end-time="2024-02-19T13:49:38.4623931Z" duration="0.000759" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2005-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2004-W53-6&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2005-01-01']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sat 1 Jan 2005'
Expr is '($ts := $toMillis('2005-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1609" name="function-fromMillis.isoWeekDate[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="205485729" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4624146Z" end-time="2024-02-19T13:49:38.4631387Z" duration="0.000724" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2005-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2004-W53-7&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2005-01-02']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sun 2 Jan 2005'
Expr is '($ts := $toMillis('2005-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1610" name="function-fromMillis.isoWeekDate[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1734744516" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4631568Z" end-time="2024-02-19T13:49:38.4636213Z" duration="0.000465" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2005-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2005-W52-6&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2005-12-31']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sat 31 Dec 2005'
Expr is '($ts := $toMillis('2005-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1611" name="function-fromMillis.isoWeekDate[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2032366893" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4636385Z" end-time="2024-02-19T13:49:38.4640912Z" duration="0.000453" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2006-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2005-W52-7&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2006-01-01']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sun 1 Jan 2006'
Expr is '($ts := $toMillis('2006-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1612" name="function-fromMillis.isoWeekDate[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1999688582" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4641014Z" end-time="2024-02-19T13:49:38.4645456Z" duration="0.000444" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2006-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2006-W01-1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2006-01-02']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Mon 2 Jan 2006'
Expr is '($ts := $toMillis('2006-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1613" name="function-fromMillis.isoWeekDate[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2044023999" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4645591Z" end-time="2024-02-19T13:49:38.4650085Z" duration="0.000449" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2006-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2006-W52-7&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2006-12-31']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sun 31 Dec 2006'
Expr is '($ts := $toMillis('2006-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1614" name="function-fromMillis.isoWeekDate[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1973795243" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4650186Z" end-time="2024-02-19T13:49:38.4654242Z" duration="0.000406" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2007-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2007-W01-1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2007-01-01']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Mon 1 Jan 2007'
Expr is '($ts := $toMillis('2007-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1615" name="function-fromMillis.isoWeekDate[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1917723144" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4654352Z" end-time="2024-02-19T13:49:38.4659049Z" duration="0.000470" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2007-12-30', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2007-W52-7&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2007-12-30']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sun 30 Dec 2007'
Expr is '($ts := $toMillis('2007-12-30', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1616" name="function-fromMillis.isoWeekDate[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="299711781" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4659171Z" end-time="2024-02-19T13:49:38.4664582Z" duration="0.000541" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2007-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2008-W01-1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2007-12-31']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Mon 31 Dec 2007'
Expr is '($ts := $toMillis('2007-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1617" name="function-fromMillis.isoWeekDate[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="89036525" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4664715Z" end-time="2024-02-19T13:49:38.4680876Z" duration="0.001616" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2008-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2008-W01-2&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2008-01-01']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Tue 1 Jan 2008'
Expr is '($ts := $toMillis('2008-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1618" name="function-fromMillis.isoWeekDate[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="88642897" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4681029Z" end-time="2024-02-19T13:49:38.4688495Z" duration="0.000747" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2008-12-28', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2008-W52-7&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2008-12-28']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sun 28 Dec 2008'
Expr is '($ts := $toMillis('2008-12-28', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1619" name="function-fromMillis.isoWeekDate[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="492327386" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4688633Z" end-time="2024-02-19T13:49:38.4694506Z" duration="0.000587" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2008-12-29', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2009-W01-1&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2008-12-29']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Mon 29 Dec 2008'
Expr is '($ts := $toMillis('2008-12-29', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1620" name="function-fromMillis.isoWeekDate[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1069316457" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4694644Z" end-time="2024-02-19T13:49:38.4699717Z" duration="0.000508" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2008-12-30', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2009-W01-2&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2008-12-30']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Tue 30 Dec 2008'
Expr is '($ts := $toMillis('2008-12-30', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1621" name="function-fromMillis.isoWeekDate[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="201599053" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4699837Z" end-time="2024-02-19T13:49:38.4705046Z" duration="0.000521" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2008-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2009-W01-3&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2008-12-31']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Wed 31 Dec 2008'
Expr is '($ts := $toMillis('2008-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1622" name="function-fromMillis.isoWeekDate[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1154596759" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4705165Z" end-time="2024-02-19T13:49:38.4710033Z" duration="0.000487" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2009-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2009-W01-4&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2009-01-01']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Thu 1 Jan 2009'
Expr is '($ts := $toMillis('2009-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1623" name="function-fromMillis.isoWeekDate[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="453287754" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4710149Z" end-time="2024-02-19T13:49:38.4716037Z" duration="0.000589" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2009-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2009-W53-4&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2009-12-31']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Thu 31 Dec 2009'
Expr is '($ts := $toMillis('2009-12-31', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1624" name="function-fromMillis.isoWeekDate[17]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[17]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="738679984" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4716165Z" end-time="2024-02-19T13:49:38.4722827Z" duration="0.000666" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2010-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2009-W53-5&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2010-01-01']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Fri 1 Jan 2010'
Expr is '($ts := $toMillis('2010-01-01', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1625" name="function-fromMillis.isoWeekDate[18]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[18]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="17208044" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4723166Z" end-time="2024-02-19T13:49:38.4730955Z" duration="0.000779" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2010-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2009-W53-6&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2010-01-02']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sat 2 Jan 2010'
Expr is '($ts := $toMillis('2010-01-02', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1626" name="function-fromMillis.isoWeekDate[19]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-fromMillis.isoWeekDate[19]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="530299410" result="Failed" label="Error" start-time="2024-02-19T13:49:38.4731091Z" end-time="2024-02-19T13:49:38.4737137Z" duration="0.000605" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($ts := $toMillis('2010-01-03', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )';&#xA; result: &quot;2009-W53-7&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2010-01-03']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalAssignment(AssignmentNode assignmentNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 427
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'Sun 3 Jan 2010'
Expr is '($ts := $toMillis('2010-01-03', '[Y]-[M]-[D]'); $fromMillis($ts, '[X0001]-W[W01]-[F1]') )'
]]></output>
                </test-case>
                <test-case id="0-1627" name="function-join.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="357525361" result="Passed" start-time="2024-02-19T13:49:38.4737318Z" end-time="2024-02-19T13:49:38.4738491Z" duration="0.000117" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$join(&quot;hello&quot;)';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$join("hello")'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-1628" name="function-join.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="243420623" result="Passed" start-time="2024-02-19T13:49:38.4738586Z" end-time="2024-02-19T13:49:38.4739318Z" duration="0.000073" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$join([&quot;hello&quot;])';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$join(["hello"])'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-1629" name="function-join.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="489621315" result="Passed" start-time="2024-02-19T13:49:38.4739389Z" end-time="2024-02-19T13:49:38.4740026Z" duration="0.000064" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$join([&quot;hello&quot;, &quot;world&quot;])';&#xA; result: &quot;helloworld&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$join(["hello", "world"])'
Result: '"helloworld"'
Expected: '"helloworld"'
]]></output>
                </test-case>
                <test-case id="0-1630" name="function-join.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1892955914" result="Passed" start-time="2024-02-19T13:49:38.4740089Z" end-time="2024-02-19T13:49:38.4740752Z" duration="0.000066" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$join([&quot;hello&quot;, &quot;world&quot;], &quot;, &quot;)';&#xA; result: &quot;hello, world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$join(["hello", "world"], ", ")'
Result: '"hello, world"'
Expected: '"hello, world"'
]]></output>
                </test-case>
                <test-case id="0-1631" name="function-join.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2038567001" result="Passed" start-time="2024-02-19T13:49:38.4740832Z" end-time="2024-02-19T13:49:38.4741503Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$join([], &quot;, &quot;)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$join([], ", ")'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1632" name="function-join.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="613758526" result="Passed" start-time="2024-02-19T13:49:38.4741583Z" end-time="2024-02-19T13:49:38.4742818Z" duration="0.000124" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$join(Account.Order.Product.Description.Colour, &quot;, &quot;)';&#xA; result: &quot;Purple, Orange, Purple, Black&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$join(Account.Order.Product.Description.Colour, ", ")'
Result: '"Purple, Orange, Purple, Black"'
Expected: '"Purple, Orange, Purple, Black"'
]]></output>
                </test-case>
                <test-case id="0-1633" name="function-join.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1843706516" result="Passed" start-time="2024-02-19T13:49:38.4742928Z" end-time="2024-02-19T13:49:38.4744332Z" duration="0.000141" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$join(Account.Order.Product.Description.Colour, no.sep)';&#xA; result: &quot;PurpleOrangePurpleBlack&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$join(Account.Order.Product.Description.Colour, no.sep)'
Result: '"PurpleOrangePurpleBlack"'
Expected: '"PurpleOrangePurpleBlack"'
]]></output>
                </test-case>
                <test-case id="0-1634" name="function-join.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="222187142" result="Passed" start-time="2024-02-19T13:49:38.4744437Z" end-time="2024-02-19T13:49:38.4745536Z" duration="0.000110" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$join(Account.blah.Product.Description.Colour, &quot;, &quot;)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$join(Account.blah.Product.Description.Colour, ", ")'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1635" name="function-join.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1507473089" result="Passed" start-time="2024-02-19T13:49:38.4745646Z" end-time="2024-02-19T13:49:38.4755401Z" duration="0.000976" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$join(true, &quot;, &quot;)';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$join(true, ", ")'
]]></output>
                </test-case>
                <test-case id="0-1636" name="function-join.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2130794565" result="Passed" start-time="2024-02-19T13:49:38.4755552Z" end-time="2024-02-19T13:49:38.4761623Z" duration="0.000607" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$join([1,2,3], &quot;, &quot;)';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$join([1,2,3], ", ")'
]]></output>
                </test-case>
                <test-case id="0-1637" name="function-join.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="775281138" result="Passed" start-time="2024-02-19T13:49:38.4761756Z" end-time="2024-02-19T13:49:38.4770446Z" duration="0.000869" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$join([&quot;hello&quot;], 3)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$join(["hello"], 3)'
]]></output>
                </test-case>
                <test-case id="0-1638" name="function-join.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-join.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="825819017" result="Passed" start-time="2024-02-19T13:49:38.4770597Z" end-time="2024-02-19T13:49:38.4777588Z" duration="0.000699" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$join()';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$join()'
]]></output>
                </test-case>
                <test-case id="0-1639" name="function-keys.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-keys.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2107894420" result="Passed" start-time="2024-02-19T13:49:38.4777829Z" end-time="2024-02-19T13:49:38.4787937Z" duration="0.001011" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$keys(Account)';&#xA; result: [&quot;Account Name&quot;,&quot;Order&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$keys(Account)'
Result: '["Account Name","Order"]'
Expected: '["Account Name","Order"]'
]]></output>
                </test-case>
                <test-case id="0-1640" name="function-keys.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-keys.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1177019682" result="Passed" start-time="2024-02-19T13:49:38.4788188Z" end-time="2024-02-19T13:49:38.4792600Z" duration="0.000441" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$keys(Account.Order.Product)';&#xA; result: [&quot;Product Name&quot;,&quot;ProductID&quot;,&quot;SKU&quot;,&quot;Description&quot;,&quot;Price&quot;,&quot;Quantity&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$keys(Account.Order.Product)'
Result: '["Product Name","ProductID","SKU","Description","Price","Quantity"]'
Expected: '["Product Name","ProductID","SKU","Description","Price","Quantity"]'
]]></output>
                </test-case>
                <test-case id="0-1641" name="function-keys.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-keys.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="964552801" result="Passed" start-time="2024-02-19T13:49:38.4792711Z" end-time="2024-02-19T13:49:38.4793551Z" duration="0.000084" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$keys({})';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$keys({})'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1642" name="function-keys.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-keys.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="753181497" result="Passed" start-time="2024-02-19T13:49:38.4793646Z" end-time="2024-02-19T13:49:38.4794643Z" duration="0.000100" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$keys({&quot;foo&quot;:{}})';&#xA; result: &quot;foo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$keys({"foo":{}})'
Result: '"foo"'
Expected: '"foo"'
]]></output>
                </test-case>
                <test-case id="0-1643" name="function-keys.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-keys.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1308421885" result="Passed" start-time="2024-02-19T13:49:38.4794735Z" end-time="2024-02-19T13:49:38.4795495Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$keys(&quot;foo&quot;)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$keys("foo")'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1644" name="function-keys.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-keys.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1668062132" result="Passed" start-time="2024-02-19T13:49:38.4795605Z" end-time="2024-02-19T13:49:38.4796489Z" duration="0.000088" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$keys(function(){1})';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$keys(function(){1})'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1645" name="function-keys.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-keys.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1179442024" result="Passed" start-time="2024-02-19T13:49:38.4796578Z" end-time="2024-02-19T13:49:38.4797409Z" duration="0.000083" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$keys([&quot;foo&quot;, &quot;bar&quot;])';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$keys(["foo", "bar"])'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1646" name="function-length.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="166674369" result="Passed" start-time="2024-02-19T13:49:38.4797506Z" end-time="2024-02-19T13:49:38.4798739Z" duration="0.000123" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;&quot;)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$length("")'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1647" name="function-length.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1997280715" result="Passed" start-time="2024-02-19T13:49:38.4798828Z" end-time="2024-02-19T13:49:38.4799387Z" duration="0.000056" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;hello&quot;)';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '$length("hello")'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-1648" name="function-length.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="599817567" result="Passed" start-time="2024-02-19T13:49:38.4799458Z" end-time="2024-02-19T13:49:38.4799921Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(missing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$length(missing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1649" name="function-length.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="700229578" result="Passed" start-time="2024-02-19T13:49:38.4799977Z" end-time="2024-02-19T13:49:38.4800896Z" duration="0.000092" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;\u03BB-calculus&quot;)';&#xA; result: 10" />
                  </properties>
                  <output><![CDATA[Expr is '$length("\u03BB-calculus")'
Result: '10'
Expected: '10'
]]></output>
                </test-case>
                <test-case id="0-1650" name="function-length.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2050412283" result="Failed" start-time="2024-02-19T13:49:38.4800986Z" end-time="2024-02-19T13:49:38.4814570Z" duration="0.001359" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;\uD834\uDD1E&quot;)';&#xA; result: 1" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '1', got '2'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$length("\uD834\uDD1E")'
Result: '2'
Expected: '1'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '1', got '2'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1651" name="function-length.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="282244363" result="Failed" start-time="2024-02-19T13:49:38.4814748Z" end-time="2024-02-19T13:49:38.4821130Z" duration="0.000638" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;𝄞&quot;)';&#xA; result: 1" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '1', got '2'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$length("𝄞")'
Result: '2'
Expected: '1'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '1', got '2'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1652" name="function-length.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1807972005" result="Passed" start-time="2024-02-19T13:49:38.4821255Z" end-time="2024-02-19T13:49:38.4822032Z" duration="0.000078" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;超明體繁&quot;)';&#xA; result: 4" />
                  </properties>
                  <output><![CDATA[Expr is '$length("超明體繁")'
Result: '4'
Expected: '4'
]]></output>
                </test-case>
                <test-case id="0-1653" name="function-length.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="90567112" result="Passed" start-time="2024-02-19T13:49:38.4822101Z" end-time="2024-02-19T13:49:38.4822751Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;\t&quot;)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$length("\t")'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1654" name="function-length.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1756020268" result="Passed" start-time="2024-02-19T13:49:38.4822825Z" end-time="2024-02-19T13:49:38.4823354Z" duration="0.000053" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;\n&quot;)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$length("\n")'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1655" name="function-length.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="944492878" result="Passed" start-time="2024-02-19T13:49:38.4823415Z" end-time="2024-02-19T13:49:38.4827000Z" duration="0.000359" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$length(1234)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$length(1234)'
]]></output>
                </test-case>
                <test-case id="0-1656" name="function-length.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="272078093" result="Passed" start-time="2024-02-19T13:49:38.4827098Z" end-time="2024-02-19T13:49:38.4830370Z" duration="0.000327" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$length(null)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$length(null)'
]]></output>
                </test-case>
                <test-case id="0-1657" name="function-length.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="722081774" result="Passed" start-time="2024-02-19T13:49:38.4830468Z" end-time="2024-02-19T13:49:38.4833617Z" duration="0.000315" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$length(true)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$length(true)'
]]></output>
                </test-case>
                <test-case id="0-1658" name="function-length.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1526445872" result="Passed" start-time="2024-02-19T13:49:38.4833713Z" end-time="2024-02-19T13:49:38.4838706Z" duration="0.000499" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$length([&quot;str&quot;])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$length(["str"])'
]]></output>
                </test-case>
                <test-case id="0-1659" name="function-length.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="914710640" result="Passed" start-time="2024-02-19T13:49:38.4838812Z" end-time="2024-02-19T13:49:38.4843678Z" duration="0.000487" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$length()';&#xA; result: error T0411" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0411.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$length()'
]]></output>
                </test-case>
                <test-case id="0-1660" name="function-length.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1491636767" result="Passed" start-time="2024-02-19T13:49:38.4843807Z" end-time="2024-02-19T13:49:38.4849205Z" duration="0.000540" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$length()';&#xA; result: error T0411" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0411.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$length()'
]]></output>
                </test-case>
                <test-case id="0-1661" name="function-length.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="583130301" result="Passed" start-time="2024-02-19T13:49:38.4849395Z" end-time="2024-02-19T13:49:38.4855856Z" duration="0.000646" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;Hello&quot;, &quot;World&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$length("Hello", "World")'
]]></output>
                </test-case>
                <test-case id="0-1662" name="function-length.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-length.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1208260820" result="Failed" start-time="2024-02-19T13:49:38.4856192Z" end-time="2024-02-19T13:49:38.4865109Z" duration="0.000892" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$length(&quot;𝄞💩&quot;)';&#xA; result: 2" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '2', got '4'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$length("𝄞💩")'
Result: '4'
Expected: '2'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '2', got '4'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1663" name="function-lookup.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-lookup.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1324003509" result="Passed" start-time="2024-02-19T13:49:38.4865321Z" end-time="2024-02-19T13:49:38.4866442Z" duration="0.000112" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lookup(Account, &quot;Account Name&quot;)';&#xA; result: &quot;Firefly&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lookup(Account, "Account Name")'
Result: '"Firefly"'
Expected: '"Firefly"'
]]></output>
                </test-case>
                <test-case id="0-1664" name="function-lookup.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-lookup.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="460013462" result="Passed" start-time="2024-02-19T13:49:38.4866534Z" end-time="2024-02-19T13:49:38.4868567Z" duration="0.000203" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lookup(Account.Order.Product, &quot;Product Name&quot;)';&#xA; result: [&quot;Bowler Hat&quot;,&quot;Trilby hat&quot;,&quot;Bowler Hat&quot;,&quot;Cloak&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$lookup(Account.Order.Product, "Product Name")'
Result: '["Bowler Hat","Trilby hat","Bowler Hat","Cloak"]'
Expected: '["Bowler Hat","Trilby hat","Bowler Hat","Cloak"]'
]]></output>
                </test-case>
                <test-case id="0-1665" name="function-lookup.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-lookup.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1843661162" result="Passed" start-time="2024-02-19T13:49:38.4868765Z" end-time="2024-02-19T13:49:38.4870292Z" duration="0.000153" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lookup(Account.Order.Product.ProductID, &quot;Product Name&quot;)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$lookup(Account.Order.Product.ProductID, "Product Name")'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1666" name="function-lookup.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-lookup.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1418608367" result="Passed" start-time="2024-02-19T13:49:38.4870423Z" end-time="2024-02-19T13:49:38.4871358Z" duration="0.000094" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lookup($$, &quot;gust&quot;)';&#xA; result: null" />
                  </properties>
                  <output><![CDATA[Expr is '$lookup($$, "gust")'
Result: 'null'
Expected: 'null'
]]></output>
                </test-case>
                <test-case id="0-1667" name="function-lowercase.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-lowercase.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="155982066" result="Passed" start-time="2024-02-19T13:49:38.4871466Z" end-time="2024-02-19T13:49:38.4886407Z" duration="0.001494" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(&quot;Hello World&quot;)';&#xA; result: &quot;hello world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lowercase("Hello World")'
Result: '"hello world"'
Expected: '"hello world"'
]]></output>
                </test-case>
                <test-case id="0-1668" name="function-lowercase.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-lowercase.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1821836857" result="Passed" start-time="2024-02-19T13:49:38.4886550Z" end-time="2024-02-19T13:49:38.4888020Z" duration="0.000147" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$lowercase(blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1669" name="function-max.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="466322154" result="Passed" start-time="2024-02-19T13:49:38.4888126Z" end-time="2024-02-19T13:49:38.4894333Z" duration="0.000621" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$max(Account.Order.Product.(Price * Quantity))';&#xA; result: 137.8" />
                  </properties>
                  <output><![CDATA[Expr is '$max(Account.Order.Product.(Price * Quantity))'
Result: '137.8'
Expected: '137.8'
]]></output>
                </test-case>
                <test-case id="0-1670" name="function-max.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1934412226" result="Passed" start-time="2024-02-19T13:49:38.4894453Z" end-time="2024-02-19T13:49:38.4895559Z" duration="0.000111" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.$max(Product.(Price * Quantity))';&#xA; result: [68.9,137.8]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.$max(Product.(Price * Quantity))'
Result: '[68.9,137.8]'
Expected: '[68.9,137.8]'
]]></output>
                </test-case>
                <test-case id="0-1671" name="function-max.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1671914290" result="Passed" start-time="2024-02-19T13:49:38.4895637Z" end-time="2024-02-19T13:49:38.4896642Z" duration="0.000101" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.(OrderID &amp; &quot;: &quot; &amp; $count(Product.(Price*Quantity)))';&#xA; result: [&quot;order103: 2&quot;,&quot;order104: 2&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.(OrderID & ": " & $count(Product.(Price*Quantity)))'
Result: '["order103: 2","order104: 2"]'
Expected: '["order103: 2","order104: 2"]'
]]></output>
                </test-case>
                <test-case id="0-1672" name="function-max.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1410701155" result="Passed" start-time="2024-02-19T13:49:38.4896717Z" end-time="2024-02-19T13:49:38.4897341Z" duration="0.000063" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$max([])';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$max([])'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1673" name="function-max.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="128232124" result="Passed" start-time="2024-02-19T13:49:38.4897413Z" end-time="2024-02-19T13:49:38.4897959Z" duration="0.000055" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$max([1,2,3])';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '$max([1,2,3])'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-1674" name="function-max.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1462791351" result="Passed" start-time="2024-02-19T13:49:38.4898019Z" end-time="2024-02-19T13:49:38.4907213Z" duration="0.000920" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$max([&quot;1&quot;,&quot;2&quot;,&quot;3&quot;])';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$max(["1","2","3"])'
]]></output>
                </test-case>
                <test-case id="0-1675" name="function-max.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="104763656" result="Passed" start-time="2024-02-19T13:49:38.4907503Z" end-time="2024-02-19T13:49:38.4914756Z" duration="0.000725" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$max([&quot;1&quot;,&quot;2&quot;,3])';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$max(["1","2",3])'
]]></output>
                </test-case>
                <test-case id="0-1676" name="function-max.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1595901203" result="Passed" start-time="2024-02-19T13:49:38.4914912Z" end-time="2024-02-19T13:49:38.4916240Z" duration="0.000133" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$max(1)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$max(1)'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1677" name="function-max.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1993658521" result="Passed" start-time="2024-02-19T13:49:38.4916384Z" end-time="2024-02-19T13:49:38.4917663Z" duration="0.000128" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$max([-1,-5])';&#xA; result: -1" />
                  </properties>
                  <output><![CDATA[Expr is '$max([-1,-5])'
Result: '-1'
Expected: '-1'
]]></output>
                </test-case>
                <test-case id="0-1678" name="function-max.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="932709269" result="Passed" start-time="2024-02-19T13:49:38.4917775Z" end-time="2024-02-19T13:49:38.4923636Z" duration="0.000586" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$max([],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$max([],[])'
]]></output>
                </test-case>
                <test-case id="0-1679" name="function-max.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1706721607" result="Passed" start-time="2024-02-19T13:49:38.4923774Z" end-time="2024-02-19T13:49:38.4929857Z" duration="0.000608" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$max([1,2,3],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$max([1,2,3],[])'
]]></output>
                </test-case>
                <test-case id="0-1680" name="function-max.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1998017322" result="Passed" start-time="2024-02-19T13:49:38.4930006Z" end-time="2024-02-19T13:49:38.4935960Z" duration="0.000596" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$max([],[],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$max([],[],[])'
]]></output>
                </test-case>
                <test-case id="0-1681" name="function-max.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="680502342" result="Passed" start-time="2024-02-19T13:49:38.4936211Z" end-time="2024-02-19T13:49:38.4942780Z" duration="0.000657" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$max([1,2],[],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$max([1,2],[],[])'
]]></output>
                </test-case>
                <test-case id="0-1682" name="function-max.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1905191441" result="Passed" start-time="2024-02-19T13:49:38.4943095Z" end-time="2024-02-19T13:49:38.4944407Z" duration="0.000131" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$max(undefined)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$max(undefined)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1683" name="function-max.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1690674692" result="Passed" start-time="2024-02-19T13:49:38.4944617Z" end-time="2024-02-19T13:49:38.4952511Z" duration="0.000789" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$min(Account.Order.Product.(Price * Quantity))';&#xA; result: 21.67" />
                  </properties>
                  <output><![CDATA[Expr is '$min(Account.Order.Product.(Price * Quantity))'
Result: '21.67'
Expected: '21.67'
]]></output>
                </test-case>
                <test-case id="0-1684" name="function-max.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="586692679" result="Passed" start-time="2024-02-19T13:49:38.4952685Z" end-time="2024-02-19T13:49:38.4954087Z" duration="0.000140" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.$min(Product.(Price * Quantity))';&#xA; result: [21.67,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.$min(Product.(Price * Quantity))'
Result: '[21.67,107.99]'
Expected: '[21.67,107.99]'
]]></output>
                </test-case>
                <test-case id="0-1685" name="function-max.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1610711551" result="Passed" start-time="2024-02-19T13:49:38.4954199Z" end-time="2024-02-19T13:49:38.4955854Z" duration="0.000166" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.(OrderID &amp; &quot;: &quot; &amp; $min(Product.(Price*Quantity)))';&#xA; result: [&quot;order103: 21.67&quot;,&quot;order104: 107.99&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.(OrderID & ": " & $min(Product.(Price*Quantity)))'
Result: '["order103: 21.67","order104: 107.99"]'
Expected: '["order103: 21.67","order104: 107.99"]'
]]></output>
                </test-case>
                <test-case id="0-1686" name="function-max.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="230594996" result="Passed" start-time="2024-02-19T13:49:38.4955976Z" end-time="2024-02-19T13:49:38.4957089Z" duration="0.000112" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$min([])';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$min([])'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1687" name="function-max.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="523191414" result="Passed" start-time="2024-02-19T13:49:38.4957214Z" end-time="2024-02-19T13:49:38.4958488Z" duration="0.000128" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$min([1,2,3])';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$min([1,2,3])'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1688" name="function-max.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="87686248" result="Passed" start-time="2024-02-19T13:49:38.4958751Z" end-time="2024-02-19T13:49:38.4968349Z" duration="0.000960" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$min([&quot;1&quot;,&quot;2&quot;,&quot;3&quot;])';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$min(["1","2","3"])'
]]></output>
                </test-case>
                <test-case id="0-1689" name="function-max.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1425177911" result="Passed" start-time="2024-02-19T13:49:38.4968527Z" end-time="2024-02-19T13:49:38.4975024Z" duration="0.000650" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$min([&quot;1&quot;,&quot;2&quot;,3])';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$min(["1","2",3])'
]]></output>
                </test-case>
                <test-case id="0-1690" name="function-max.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1235394996" result="Passed" start-time="2024-02-19T13:49:38.4975228Z" end-time="2024-02-19T13:49:38.4976392Z" duration="0.000116" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$min(1)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$min(1)'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1691" name="function-max.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1408712791" result="Passed" start-time="2024-02-19T13:49:38.4976491Z" end-time="2024-02-19T13:49:38.4984627Z" duration="0.000814" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$min([],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$min([],[])'
]]></output>
                </test-case>
                <test-case id="0-1692" name="function-max.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1396318913" result="Passed" start-time="2024-02-19T13:49:38.4984833Z" end-time="2024-02-19T13:49:38.4991003Z" duration="0.000617" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$min([1,2,3],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$min([1,2,3],[])'
]]></output>
                </test-case>
                <test-case id="0-1693" name="function-max.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2058592024" result="Passed" start-time="2024-02-19T13:49:38.4991223Z" end-time="2024-02-19T13:49:38.4995829Z" duration="0.000461" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$min([],[],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$min([],[],[])'
]]></output>
                </test-case>
                <test-case id="0-1694" name="function-max.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="616257653" result="Passed" start-time="2024-02-19T13:49:38.4995990Z" end-time="2024-02-19T13:49:38.4999888Z" duration="0.000390" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$min([1,2],[],[])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$min([1,2],[],[])'
]]></output>
                </test-case>
                <test-case id="0-1695" name="function-max.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.function-max.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="593889381" result="Passed" start-time="2024-02-19T13:49:38.5000015Z" end-time="2024-02-19T13:49:38.5000919Z" duration="0.000091" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$min(undefined)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$min(undefined)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1696" name="function-merge.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-merge.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1903775628" result="Passed" start-time="2024-02-19T13:49:38.5001030Z" end-time="2024-02-19T13:49:38.5001908Z" duration="0.000088" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$merge(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$merge(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1697" name="function-merge.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-merge.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1576661635" result="Passed" start-time="2024-02-19T13:49:38.5002009Z" end-time="2024-02-19T13:49:38.5008145Z" duration="0.000614" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$merge({&quot;a&quot;:1})';&#xA; result: {&quot;a&quot;:1}" />
                  </properties>
                  <output><![CDATA[Expr is '$merge({"a":1})'
Result: '{"a":1}'
Expected: '{"a":1}'
]]></output>
                </test-case>
                <test-case id="0-1698" name="function-merge.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-merge.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="848408423" result="Passed" start-time="2024-02-19T13:49:38.5008278Z" end-time="2024-02-19T13:49:38.5010224Z" duration="0.000195" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$merge([{&quot;a&quot;:1}, {&quot;b&quot;:2}])';&#xA; result: {&quot;a&quot;:1,&quot;b&quot;:2}" />
                  </properties>
                  <output><![CDATA[Expr is '$merge([{"a":1}, {"b":2}])'
Result: '{"a":1,"b":2}'
Expected: '{"a":1,"b":2}'
]]></output>
                </test-case>
                <test-case id="0-1699" name="function-merge.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-merge.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1971884617" result="Passed" start-time="2024-02-19T13:49:38.5010328Z" end-time="2024-02-19T13:49:38.5011633Z" duration="0.000131" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$merge([{&quot;a&quot;: 1}, {&quot;b&quot;: 2, &quot;c&quot;: 3}])';&#xA; result: {&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}" />
                  </properties>
                  <output><![CDATA[Expr is '$merge([{"a": 1}, {"b": 2, "c": 3}])'
Result: '{"a":1,"b":2,"c":3}'
Expected: '{"a":1,"b":2,"c":3}'
]]></output>
                </test-case>
                <test-case id="0-1700" name="function-merge.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-merge.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1908317304" result="Passed" start-time="2024-02-19T13:49:38.5011747Z" end-time="2024-02-19T13:49:38.5013181Z" duration="0.000144" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$merge([{&quot;a&quot;: 1}, {&quot;b&quot;: 2, &quot;a&quot;: 3}])';&#xA; result: {&quot;a&quot;:3,&quot;b&quot;:2}" />
                  </properties>
                  <output><![CDATA[Expr is '$merge([{"a": 1}, {"b": 2, "a": 3}])'
Result: '{"a":3,"b":2}'
Expected: '{"a":3,"b":2}'
]]></output>
                </test-case>
                <test-case id="0-1701" name="function-number.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="10692303" result="Passed" start-time="2024-02-19T13:49:38.5013294Z" end-time="2024-02-19T13:49:38.5014162Z" duration="0.000087" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(0)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$number(0)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1702" name="function-number.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="175443858" result="Passed" start-time="2024-02-19T13:49:38.5014261Z" end-time="2024-02-19T13:49:38.5015085Z" duration="0.000083" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(10)';&#xA; result: 10" />
                  </properties>
                  <output><![CDATA[Expr is '$number(10)'
Result: '10'
Expected: '10'
]]></output>
                </test-case>
                <test-case id="0-1703" name="function-number.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="133495413" result="Passed" start-time="2024-02-19T13:49:38.5015183Z" end-time="2024-02-19T13:49:38.5016121Z" duration="0.000094" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(-0.05)';&#xA; result: -0.05" />
                  </properties>
                  <output><![CDATA[Expr is '$number(-0.05)'
Result: '-0.05'
Expected: '-0.05'
]]></output>
                </test-case>
                <test-case id="0-1704" name="function-number.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="913300999" result="Passed" start-time="2024-02-19T13:49:38.5016225Z" end-time="2024-02-19T13:49:38.5017036Z" duration="0.000081" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;0&quot;)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$number("0")'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1705" name="function-number.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="378497993" result="Passed" start-time="2024-02-19T13:49:38.5017131Z" end-time="2024-02-19T13:49:38.5018162Z" duration="0.000103" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;-0.05&quot;)';&#xA; result: -0.05" />
                  </properties>
                  <output><![CDATA[Expr is '$number("-0.05")'
Result: '-0.05'
Expected: '-0.05'
]]></output>
                </test-case>
                <test-case id="0-1706" name="function-number.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1019026855" result="Passed" start-time="2024-02-19T13:49:38.5018280Z" end-time="2024-02-19T13:49:38.5019144Z" duration="0.000087" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;1e2&quot;)';&#xA; result: 100" />
                  </properties>
                  <output><![CDATA[Expr is '$number("1e2")'
Result: '100'
Expected: '100'
]]></output>
                </test-case>
                <test-case id="0-1707" name="function-number.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1679739881" result="Passed" start-time="2024-02-19T13:49:38.5019245Z" end-time="2024-02-19T13:49:38.5019911Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;1.0e-2&quot;)';&#xA; result: 0.01" />
                  </properties>
                  <output><![CDATA[Expr is '$number("1.0e-2")'
Result: '0.01'
Expected: '0.01'
]]></output>
                </test-case>
                <test-case id="0-1708" name="function-number.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="775259408" result="Passed" start-time="2024-02-19T13:49:38.5019985Z" end-time="2024-02-19T13:49:38.5020665Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;1e0&quot;)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$number("1e0")'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1709" name="function-number.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1651256612" result="Passed" start-time="2024-02-19T13:49:38.5020744Z" end-time="2024-02-19T13:49:38.5034992Z" duration="0.001425" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;10e500&quot;)';&#xA; result: error D3030" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3030.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number("10e500")'
]]></output>
                </test-case>
                <test-case id="0-1710" name="function-number.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1496075322" result="Passed" start-time="2024-02-19T13:49:38.5035200Z" end-time="2024-02-19T13:49:38.5043850Z" duration="0.000865" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;Hello world&quot;)';&#xA; result: error D3030" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3030.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number("Hello world")'
]]></output>
                </test-case>
                <test-case id="0-1711" name="function-number.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="425903219" result="Passed" start-time="2024-02-19T13:49:38.5044005Z" end-time="2024-02-19T13:49:38.5052529Z" duration="0.000853" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;1/2&quot;)';&#xA; result: error D3030" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3030.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number("1/2")'
]]></output>
                </test-case>
                <test-case id="0-1712" name="function-number.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1936856152" result="Passed" start-time="2024-02-19T13:49:38.5052677Z" end-time="2024-02-19T13:49:38.5062654Z" duration="0.000998" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;1234 hello&quot;)';&#xA; result: error D3030" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3030.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number("1234 hello")'
]]></output>
                </test-case>
                <test-case id="0-1713" name="function-number.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1967207912" result="Passed" start-time="2024-02-19T13:49:38.5062839Z" end-time="2024-02-19T13:49:38.5067922Z" duration="0.000508" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;&quot;)';&#xA; result: error D3030" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3030.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number("")'
]]></output>
                </test-case>
                <test-case id="0-1714" name="function-number.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1064176965" result="Passed" start-time="2024-02-19T13:49:38.5068095Z" end-time="2024-02-19T13:49:38.5068837Z" duration="0.000074" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(true)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$number(true)'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1715" name="function-number.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="811134425" result="Passed" start-time="2024-02-19T13:49:38.5068909Z" end-time="2024-02-19T13:49:38.5069415Z" duration="0.000051" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(false)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$number(false)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1716" name="function-number.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="825422507" result="Passed" start-time="2024-02-19T13:49:38.5069479Z" end-time="2024-02-19T13:49:38.5070221Z" duration="0.000074" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number(Account.blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$number(Account.blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1717" name="function-number.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1665069775" result="Passed" start-time="2024-02-19T13:49:38.5070289Z" end-time="2024-02-19T13:49:38.5074939Z" duration="0.000465" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(null)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number(null)'
]]></output>
                </test-case>
                <test-case id="0-1718" name="function-number.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="737310830" result="Passed" start-time="2024-02-19T13:49:38.5075044Z" end-time="2024-02-19T13:49:38.5079385Z" duration="0.000434" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number([])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number([])'
]]></output>
                </test-case>
                <test-case id="0-1719" name="function-number.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="996785558" result="Passed" start-time="2024-02-19T13:49:38.5079552Z" end-time="2024-02-19T13:49:38.5083792Z" duration="0.000424" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(&quot;[1]&quot;)';&#xA; result: error D3030" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3030.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number("[1]")'
]]></output>
                </test-case>
                <test-case id="0-1720" name="function-number.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1613066166" result="Passed" start-time="2024-02-19T13:49:38.5083966Z" end-time="2024-02-19T13:49:38.5088210Z" duration="0.000424" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number([1,2])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number([1,2])'
]]></output>
                </test-case>
                <test-case id="0-1721" name="function-number.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="895416953" result="Passed" start-time="2024-02-19T13:49:38.5088411Z" end-time="2024-02-19T13:49:38.5099692Z" duration="0.001128" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number([&quot;hello&quot;])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number(["hello"])'
]]></output>
                </test-case>
                <test-case id="0-1722" name="function-number.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="68295818" result="Passed" start-time="2024-02-19T13:49:38.5099871Z" end-time="2024-02-19T13:49:38.5108581Z" duration="0.000871" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number([&quot;2&quot;])';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number(["2"])'
]]></output>
                </test-case>
                <test-case id="0-1723" name="function-number.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="396658946" result="Passed" start-time="2024-02-19T13:49:38.5108816Z" end-time="2024-02-19T13:49:38.5117186Z" duration="0.000837" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number({})';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number({})'
]]></output>
                </test-case>
                <test-case id="0-1724" name="function-number.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1378410805" result="Passed" start-time="2024-02-19T13:49:38.5117376Z" end-time="2024-02-19T13:49:38.5124201Z" duration="0.000683" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number({&quot;hello&quot;:&quot;world&quot;})';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number({"hello":"world"})'
]]></output>
                </test-case>
                <test-case id="0-1725" name="function-number.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="525699435" result="Passed" start-time="2024-02-19T13:49:38.5124406Z" end-time="2024-02-19T13:49:38.5143365Z" duration="0.001896" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number($number)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number($number)'
]]></output>
                </test-case>
                <test-case id="0-1726" name="function-number.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="275595377" result="Passed" start-time="2024-02-19T13:49:38.5143699Z" end-time="2024-02-19T13:49:38.5151272Z" duration="0.000757" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(function(){5})';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number(function(){5})'
]]></output>
                </test-case>
                <test-case id="0-1727" name="function-number.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1499592778" result="Passed" start-time="2024-02-19T13:49:38.5151497Z" end-time="2024-02-19T13:49:38.5156206Z" duration="0.000471" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$number(1,2)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$number(1,2)'
]]></output>
                </test-case>
                <test-case id="0-1728" name="function-number.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1659458118" result="Passed" start-time="2024-02-19T13:49:38.5156367Z" end-time="2024-02-19T13:49:38.5157091Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number('00')';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$number('00')'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1729" name="function-number.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="868901970" result="Passed" start-time="2024-02-19T13:49:38.5157174Z" end-time="2024-02-19T13:49:38.5157818Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number('0123')';&#xA; result: 123" />
                  </properties>
                  <output><![CDATA[Expr is '$number('0123')'
Result: '123'
Expected: '123'
]]></output>
                </test-case>
                <test-case id="0-1730" name="function-number.case029" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case029" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="348471675" result="Passed" start-time="2024-02-19T13:49:38.5157906Z" end-time="2024-02-19T13:49:38.5158562Z" duration="0.000066" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number('-007')';&#xA; result: -7" />
                  </properties>
                  <output><![CDATA[Expr is '$number('-007')'
Result: '-7'
Expected: '-7'
]]></output>
                </test-case>
                <test-case id="0-1731" name="function-number.case030" fullname="Jsonata.Net.Native.TestSuite.Tests.function-number.case030" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="19239568" result="Passed" start-time="2024-02-19T13:49:38.5158659Z" end-time="2024-02-19T13:49:38.5159635Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$number('000.00123000')';&#xA; result: 0.00123" />
                  </properties>
                  <output><![CDATA[Expr is '$number('000.00123000')'
Result: '0.00123'
Expected: '0.00123'
]]></output>
                </test-case>
                <test-case id="0-1732" name="function-pad.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1145250098" result="Passed" start-time="2024-02-19T13:49:38.5159745Z" end-time="2024-02-19T13:49:38.5163943Z" duration="0.000420" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad(&quot;foo&quot;, 5)';&#xA; result: &quot;foo  &quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$pad("foo", 5)'
Result: '"foo  "'
Expected: '"foo  "'
]]></output>
                </test-case>
                <test-case id="0-1733" name="function-pad.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1108308299" result="Passed" start-time="2024-02-19T13:49:38.5164085Z" end-time="2024-02-19T13:49:38.5165218Z" duration="0.000113" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad(&quot;foo&quot;, -5)';&#xA; result: &quot;  foo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$pad("foo", -5)'
Result: '"  foo"'
Expected: '"  foo"'
]]></output>
                </test-case>
                <test-case id="0-1734" name="function-pad.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1945887950" result="Passed" start-time="2024-02-19T13:49:38.5165328Z" end-time="2024-02-19T13:49:38.5166170Z" duration="0.000084" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad(&quot;foo&quot;, -5, &quot;#&quot;)';&#xA; result: &quot;##foo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$pad("foo", -5, "#")'
Result: '"##foo"'
Expected: '"##foo"'
]]></output>
                </test-case>
                <test-case id="0-1735" name="function-pad.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1987325019" result="Passed" start-time="2024-02-19T13:49:38.5166268Z" end-time="2024-02-19T13:49:38.5166978Z" duration="0.000071" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad(&quot;foo&quot;, 5, &quot;&quot;)';&#xA; result: &quot;foo  &quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$pad("foo", 5, "")'
Result: '"foo  "'
Expected: '"foo  "'
]]></output>
                </test-case>
                <test-case id="0-1736" name="function-pad.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="505058484" result="Passed" start-time="2024-02-19T13:49:38.5167055Z" end-time="2024-02-19T13:49:38.5167560Z" duration="0.000051" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad(&quot;foo&quot;, 1)';&#xA; result: &quot;foo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$pad("foo", 1)'
Result: '"foo"'
Expected: '"foo"'
]]></output>
                </test-case>
                <test-case id="0-1737" name="function-pad.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1771696028" result="Passed" start-time="2024-02-19T13:49:38.5167632Z" end-time="2024-02-19T13:49:38.5168111Z" duration="0.000048" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad(&quot;foo&quot;, 8, &quot;-+&quot;)';&#xA; result: &quot;foo-+-+-&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$pad("foo", 8, "-+")'
Result: '"foo-+-+-"'
Expected: '"foo-+-+-"'
]]></output>
                </test-case>
                <test-case id="0-1738" name="function-pad.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="777373693" result="Passed" start-time="2024-02-19T13:49:38.5168170Z" end-time="2024-02-19T13:49:38.5168649Z" duration="0.000048" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad(nothing, 1)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$pad(nothing, 1)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1739" name="function-pad.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="208194686" result="Failed" start-time="2024-02-19T13:49:38.5168707Z" end-time="2024-02-19T13:49:38.5179916Z" duration="0.001121" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad('a𝄞💩', 7)';&#xA; result: &quot;a𝄞💩    &quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"a𝄞💩    "', got '"a𝄞💩  "'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$pad('a𝄞💩', 7)'
Result: '"a𝄞💩  "'
Expected: '"a𝄞💩    "'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"a𝄞💩    "', got '"a𝄞💩  "'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1740" name="function-pad.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="591684696" result="Failed" start-time="2024-02-19T13:49:38.5180093Z" end-time="2024-02-19T13:49:38.5188707Z" duration="0.000862" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad('𝄞💩', -7)';&#xA; result: &quot;     𝄞💩&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"     𝄞💩"', got '"   𝄞💩"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$pad('𝄞💩', -7)'
Result: '"   𝄞💩"'
Expected: '"     𝄞💩"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"     𝄞💩"', got '"   𝄞💩"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1741" name="function-pad.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="698338762" result="Failed" start-time="2024-02-19T13:49:38.5188850Z" end-time="2024-02-19T13:49:38.5195946Z" duration="0.000710" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad('a𝄞💩', 7, '💩')';&#xA; result: &quot;a𝄞💩💩💩💩💩&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"a𝄞💩💩💩💩💩"', got '"a𝄞💩💩"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$pad('a𝄞💩', 7, '💩')'
Result: '"a𝄞💩💩"'
Expected: '"a𝄞💩💩💩💩💩"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"a𝄞💩💩💩💩💩"', got '"a𝄞💩💩"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1742" name="function-pad.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-pad.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1895415653" result="Failed" start-time="2024-02-19T13:49:38.5196081Z" end-time="2024-02-19T13:49:38.5201878Z" duration="0.000580" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$pad('a𝄞💩', 6, '💩')';&#xA; result: &quot;a𝄞💩💩💩💩&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"a𝄞💩💩💩💩"', got '"a𝄞💩\ud83d"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$pad('a𝄞💩', 6, '💩')'
Result: '"a𝄞💩\ud83d"'
Expected: '"a𝄞💩💩💩💩"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"a𝄞💩💩💩💩"', got '"a𝄞💩\ud83d"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1743" name="function-parseInteger.parseInteger[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="583913283" result="Passed" start-time="2024-02-19T13:49:38.5202094Z" end-time="2024-02-19T13:49:38.5203103Z" duration="0.000101" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger(undefined, '0')';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Description: 'should return result object'
Expr is '$parseInteger(undefined, '0')'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1744" name="function-parseInteger.parseInteger[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2076586236" result="Passed" start-time="2024-02-19T13:49:38.5203196Z" end-time="2024-02-19T13:49:38.5204846Z" duration="0.000165" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('123', '000')';&#xA; result: 123" />
                  </properties>
                  <output><![CDATA[Description: 'should parse a number'
Expr is '$parseInteger('123', '000')'
Result: '123'
Expected: '123'
]]></output>
                </test-case>
                <test-case id="0-1745" name="function-parseInteger.parseInteger[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="809491777" result="Passed" start-time="2024-02-19T13:49:38.5204951Z" end-time="2024-02-19T13:49:38.5206038Z" duration="0.000109" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('0123', '0000')';&#xA; result: 123" />
                  </properties>
                  <output><![CDATA[Description: 'should parse number padded with zeros'
Expr is '$parseInteger('0123', '0000')'
Result: '123'
Expected: '123'
]]></output>
                </test-case>
                <test-case id="0-1746" name="function-parseInteger.parseInteger[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1619340286" result="Passed" start-time="2024-02-19T13:49:38.5206160Z" end-time="2024-02-19T13:49:38.5207041Z" duration="0.000088" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('1234', '0')';&#xA; result: 1234" />
                  </properties>
                  <output><![CDATA[Description: 'should parse number'
Expr is '$parseInteger('1234', '0')'
Result: '1234'
Expected: '1234'
]]></output>
                </test-case>
                <test-case id="0-1747" name="function-parseInteger.parseInteger[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1576594648" result="Passed" start-time="2024-02-19T13:49:38.5207145Z" end-time="2024-02-19T13:49:38.5208110Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('1234', '###0')';&#xA; result: 1234" />
                  </properties>
                  <output><![CDATA[Description: 'should parse number with optional digits'
Expr is '$parseInteger('1234', '###0')'
Result: '1234'
Expected: '1234'
]]></output>
                </test-case>
                <test-case id="0-1748" name="function-parseInteger.parseInteger[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="994415059" result="Passed" start-time="2024-02-19T13:49:38.5208210Z" end-time="2024-02-19T13:49:38.5209031Z" duration="0.000082" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('12', '###0')';&#xA; result: 12" />
                  </properties>
                  <output><![CDATA[Description: 'should parse number with optional digits'
Expr is '$parseInteger('12', '###0')'
Result: '12'
Expected: '12'
]]></output>
                </test-case>
                <test-case id="0-1749" name="function-parseInteger.parseInteger[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1952606875" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5209133Z" end-time="2024-02-19T13:49:38.5220909Z" duration="0.001178" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('123rd', '000;o')';&#xA; result: 123" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should parse a number'
Expr is '$parseInteger('123rd', '000;o')'
]]></output>
                </test-case>
                <test-case id="0-1750" name="function-parseInteger.parseInteger[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1915950521" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5221056Z" end-time="2024-02-19T13:49:38.5229920Z" duration="0.000887" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('1st', '0;o')';&#xA; result: 1" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$parseInteger('1st', '0;o')'
]]></output>
                </test-case>
                <test-case id="0-1751" name="function-parseInteger.parseInteger[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="238705853" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5230113Z" end-time="2024-02-19T13:49:38.5237680Z" duration="0.000757" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('28th', '#0;o')';&#xA; result: 28" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$parseInteger('28th', '#0;o')'
]]></output>
                </test-case>
                <test-case id="0-1752" name="function-parseInteger.parseInteger[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="839350805" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5237864Z" end-time="2024-02-19T13:49:38.5247321Z" duration="0.000946" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('1234th', '###0;o')';&#xA; result: 1234" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$parseInteger('1234th', '###0;o')'
]]></output>
                </test-case>
                <test-case id="0-1753" name="function-parseInteger.parseInteger[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1999106512" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5247512Z" end-time="2024-02-19T13:49:38.5256856Z" duration="0.000935" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('12th', '###0;o')';&#xA; result: 12" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should pad number with zeros'
Expr is '$parseInteger('12th', '###0;o')'
]]></output>
                </test-case>
                <test-case id="0-1754" name="function-parseInteger.parseInteger[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="358818451" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5257045Z" end-time="2024-02-19T13:49:38.5264034Z" duration="0.000699" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('١٢٣٤٠', '###١')';&#xA; result: 12340" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$parseInteger('١٢٣٤٠', '###١')'
]]></output>
                </test-case>
                <test-case id="0-1755" name="function-parseInteger.parseInteger[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1012900351" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5264203Z" end-time="2024-02-19T13:49:38.5270094Z" duration="0.000589" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('１２３４０', '###０')';&#xA; result: 12340" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$parseInteger('１２３４０', '###０')'
]]></output>
                </test-case>
                <test-case id="0-1756" name="function-parseInteger.parseInteger[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2089880132" result="Passed" start-time="2024-02-19T13:49:38.5270255Z" end-time="2024-02-19T13:49:38.5271009Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('12', '#,##0')';&#xA; result: 12" />
                  </properties>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$parseInteger('12', '#,##0')'
Result: '12'
Expected: '12'
]]></output>
                </test-case>
                <test-case id="0-1757" name="function-parseInteger.parseInteger[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1926268559" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5271080Z" end-time="2024-02-19T13:49:38.5277421Z" duration="0.000634" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('1,200', '#,##0')';&#xA; result: 1200" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$parseInteger('1,200', '#,##0')'
]]></output>
                </test-case>
                <test-case id="0-1758" name="function-parseInteger.parseInteger[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="902568255" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5277559Z" end-time="2024-02-19T13:49:38.5283960Z" duration="0.000640" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('12,345,678', '#,##0')';&#xA; result: 12345678" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$parseInteger('12,345,678', '#,##0')'
]]></output>
                </test-case>
                <test-case id="0-1759" name="function-parseInteger.parseInteger[17]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[17]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="387601564" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5284097Z" end-time="2024-02-19T13:49:38.5290521Z" duration="0.000643" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('1,234,567,890', '#,##0')';&#xA; result: 1234567890" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$parseInteger('1,234,567,890', '#,##0')'
]]></output>
                </test-case>
                <test-case id="0-1760" name="function-parseInteger.parseInteger[18]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[18]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="102902616" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5290669Z" end-time="2024-02-19T13:49:38.5296876Z" duration="0.000621" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('1,234,567,890', '#,###,##0')';&#xA; result: 1234567890" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should insert regular groups'
Expr is '$parseInteger('1,234,567,890', '#,###,##0')'
]]></output>
                </test-case>
                <test-case id="0-1761" name="function-parseInteger.parseInteger[19]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[19]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1666917724" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5297068Z" end-time="2024-02-19T13:49:38.5307300Z" duration="0.001023" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('1234:567,890', '#:###,##0')';&#xA; result: 1234567890" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should insert non-regular groups - different chars'
Expr is '$parseInteger('1234:567,890', '#:###,##0')'
]]></output>
                </test-case>
                <test-case id="0-1762" name="function-parseInteger.parseInteger[20]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[20]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="20281763" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5307538Z" end-time="2024-02-19T13:49:38.5316799Z" duration="0.000926" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('12345,67,890', '##,##,##0')';&#xA; result: 1234567890" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: 'should insert non-regular groups - different positions'
Expr is '$parseInteger('12345,67,890', '##,##,##0')'
]]></output>
                </test-case>
                <test-case id="0-1763" name="function-parseInteger.parseInteger[21]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[21]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2053841085" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5317016Z" end-time="2024-02-19T13:49:38.5323336Z" duration="0.000632" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('', 'I')';&#xA; result: 0" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '0'
Expr is '$parseInteger('', 'I')'
]]></output>
                </test-case>
                <test-case id="0-1764" name="function-parseInteger.parseInteger[22]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[22]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1302784937" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5323506Z" end-time="2024-02-19T13:49:38.5330272Z" duration="0.000677" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('MCMLXXXIV', 'I')';&#xA; result: 1984" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1984'
Expr is '$parseInteger('MCMLXXXIV', 'I')'
]]></output>
                </test-case>
                <test-case id="0-1765" name="function-parseInteger.parseInteger[23]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[23]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1476835754" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5330459Z" end-time="2024-02-19T13:49:38.5337377Z" duration="0.000692" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('xcix', 'i')';&#xA; result: 99" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '99'
Expr is '$parseInteger('xcix', 'i')'
]]></output>
                </test-case>
                <test-case id="0-1766" name="function-parseInteger.parseInteger[24]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[24]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1428136768" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5337548Z" end-time="2024-02-19T13:49:38.5345239Z" duration="0.000769" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('twelve', 'w')';&#xA; result: 12" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '12'
Expr is '$parseInteger('twelve', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1767" name="function-parseInteger.parseInteger[25]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[25]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="828547853" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5345355Z" end-time="2024-02-19T13:49:38.5354353Z" duration="0.000900" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('twenty', 'w')';&#xA; result: 20" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '20'
Expr is '$parseInteger('twenty', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1768" name="function-parseInteger.parseInteger[26]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[26]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="21319962" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5354585Z" end-time="2024-02-19T13:49:38.5362135Z" duration="0.000755" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('thirty-four', 'w')';&#xA; result: 34" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '34'
Expr is '$parseInteger('thirty-four', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1769" name="function-parseInteger.parseInteger[27]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[27]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1224335593" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5362361Z" end-time="2024-02-19T13:49:38.5369185Z" duration="0.000683" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('NINETY-NINE', 'W')';&#xA; result: 99" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '99'
Expr is '$parseInteger('NINETY-NINE', 'W')'
]]></output>
                </test-case>
                <test-case id="0-1770" name="function-parseInteger.parseInteger[28]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[28]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="306075941" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5369390Z" end-time="2024-02-19T13:49:38.5392082Z" duration="0.002270" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('one hundred', 'w')';&#xA; result: 100" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '100'
Expr is '$parseInteger('one hundred', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1771" name="function-parseInteger.parseInteger[29]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[29]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1201210126" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5392308Z" end-time="2024-02-19T13:49:38.5401241Z" duration="0.000894" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('FIVE HUNDRED AND FIFTY-FIVE', 'W')';&#xA; result: 555" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '555'
Expr is '$parseInteger('FIVE HUNDRED AND FIFTY-FIVE', 'W')'
]]></output>
                </test-case>
                <test-case id="0-1772" name="function-parseInteger.parseInteger[30]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[30]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="887696082" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5401414Z" end-time="2024-02-19T13:49:38.5410056Z" duration="0.000864" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('Five Hundred and Fifty-Five', 'Ww')';&#xA; result: 555" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '555'
Expr is '$parseInteger('Five Hundred and Fifty-Five', 'Ww')'
]]></output>
                </test-case>
                <test-case id="0-1773" name="function-parseInteger.parseInteger[31]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[31]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="529116144" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5410229Z" end-time="2024-02-19T13:49:38.5417085Z" duration="0.000686" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('nine hundred and nineteen', 'w')';&#xA; result: 919" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '919'
Expr is '$parseInteger('nine hundred and nineteen', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1774" name="function-parseInteger.parseInteger[32]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[32]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="405100862" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5417248Z" end-time="2024-02-19T13:49:38.5424785Z" duration="0.000754" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('seven hundred and thirty', 'w')';&#xA; result: 730" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '730'
Expr is '$parseInteger('seven hundred and thirty', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1775" name="function-parseInteger.parseInteger[33]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[33]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="914727404" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5424954Z" end-time="2024-02-19T13:49:38.5432290Z" duration="0.000734" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('one thousand', 'w')';&#xA; result: 1000" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1000'
Expr is '$parseInteger('one thousand', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1776" name="function-parseInteger.parseInteger[34]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[34]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1147484947" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5432431Z" end-time="2024-02-19T13:49:38.5438978Z" duration="0.000655" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('three thousand, seven hundred and thirty', 'w')';&#xA; result: 3730" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '3730'
Expr is '$parseInteger('three thousand, seven hundred and thirty', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1777" name="function-parseInteger.parseInteger[35]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[35]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1631866182" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5439111Z" end-time="2024-02-19T13:49:38.5446997Z" duration="0.000789" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('three hundred and twenty-seven thousand, seven hundred and thirty', 'w')';&#xA; result: 327730" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '327730'
Expr is '$parseInteger('three hundred and twenty-seven thousand, seven hundred and thirty', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1778" name="function-parseInteger.parseInteger[36]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[36]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="467556357" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5447222Z" end-time="2024-02-19T13:49:38.5456113Z" duration="0.000889" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('four million, three hundred and twenty-seven thousand, seven hundred and thirty', 'w')';&#xA; result: 4327730" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '4327730'
Expr is '$parseInteger('four million, three hundred and twenty-seven thousand, seven hundred and thirty', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1779" name="function-parseInteger.parseInteger[37]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[37]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="568919028" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5456349Z" end-time="2024-02-19T13:49:38.5465179Z" duration="0.000883" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('one trillion and one', 'w')';&#xA; result: 1000000000001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1e12 + 1'
Expr is '$parseInteger('one trillion and one', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1780" name="function-parseInteger.parseInteger[38]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[38]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1053842796" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5465523Z" end-time="2024-02-19T13:49:38.5476315Z" duration="0.001079" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('one trillion, two hundred and thirty-four billion, five hundred and sixty-seven million, eight hundred and ninety thousand, one hundred and twenty-three', 'w')';&#xA; result: 1234567890123" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1234567890123'
Expr is '$parseInteger('one trillion, two hundred and thirty-four billion, five hundred and sixty-seven million, eight hundred and ninety thousand, one hundred and twenty-three', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1781" name="function-parseInteger.parseInteger[39]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[39]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="846484376" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5476532Z" end-time="2024-02-19T13:49:38.5484661Z" duration="0.000813" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('one thousand trillion', 'w')';&#xA; result: 1000000000000000" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1e15'
Expr is '$parseInteger('one thousand trillion', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1782" name="function-parseInteger.parseInteger[40]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[40]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="505177719" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5485044Z" end-time="2024-02-19T13:49:38.5493639Z" duration="0.000852" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('ten billion trillion trillion trillion', 'w')';&#xA; result: 1E+46" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1e46'
Expr is '$parseInteger('ten billion trillion trillion trillion', 'w')'
]]></output>
                </test-case>
                <test-case id="0-1783" name="function-parseInteger.parseInteger[41]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[41]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1854334890" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5493903Z" end-time="2024-02-19T13:49:38.5502541Z" duration="0.000864" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('twelfth', 'w;o')';&#xA; result: 12" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '12'
Expr is '$parseInteger('twelfth', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1784" name="function-parseInteger.parseInteger[42]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[42]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1100435096" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5502768Z" end-time="2024-02-19T13:49:38.5510116Z" duration="0.000735" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('twentieth', 'w;o')';&#xA; result: 20" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '20'
Expr is '$parseInteger('twentieth', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1785" name="function-parseInteger.parseInteger[43]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[43]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="109765822" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5510261Z" end-time="2024-02-19T13:49:38.5516506Z" duration="0.000625" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('thirty-fourth', 'w;o')';&#xA; result: 34" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '34'
Expr is '$parseInteger('thirty-fourth', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1786" name="function-parseInteger.parseInteger[44]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[44]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1327372410" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5516624Z" end-time="2024-02-19T13:49:38.5526465Z" duration="0.000984" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('NINETY-NINTH', 'W;o')';&#xA; result: 99" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '99'
Expr is '$parseInteger('NINETY-NINTH', 'W;o')'
]]></output>
                </test-case>
                <test-case id="0-1787" name="function-parseInteger.parseInteger[45]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[45]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1293627233" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5526744Z" end-time="2024-02-19T13:49:38.5534961Z" duration="0.000822" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('one hundredth', 'w;o')';&#xA; result: 100" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '100'
Expr is '$parseInteger('one hundredth', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1788" name="function-parseInteger.parseInteger[46]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[46]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="749489848" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5535373Z" end-time="2024-02-19T13:49:38.5545140Z" duration="0.000977" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('FIVE HUNDRED AND FIFTY-FIFTH', 'W;o')';&#xA; result: 555" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '555'
Expr is '$parseInteger('FIVE HUNDRED AND FIFTY-FIFTH', 'W;o')'
]]></output>
                </test-case>
                <test-case id="0-1789" name="function-parseInteger.parseInteger[47]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[47]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="932987599" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5545325Z" end-time="2024-02-19T13:49:38.5552844Z" duration="0.000752" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('nine hundred and nineteenth', 'w;o')';&#xA; result: 919" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '919'
Expr is '$parseInteger('nine hundred and nineteenth', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1790" name="function-parseInteger.parseInteger[48]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[48]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2044928534" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5553022Z" end-time="2024-02-19T13:49:38.5560074Z" duration="0.000705" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('seven hundred and thirtieth', 'w;o')';&#xA; result: 730" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '730'
Expr is '$parseInteger('seven hundred and thirtieth', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1791" name="function-parseInteger.parseInteger[49]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[49]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="726273572" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5560251Z" end-time="2024-02-19T13:49:38.5566720Z" duration="0.000647" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('Seven Hundred and Thirty-Third', 'Ww;o')';&#xA; result: 733" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '733'
Expr is '$parseInteger('Seven Hundred and Thirty-Third', 'Ww;o')'
]]></output>
                </test-case>
                <test-case id="0-1792" name="function-parseInteger.parseInteger[50]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[50]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="869127773" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5566883Z" end-time="2024-02-19T13:49:38.5573217Z" duration="0.000634" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('one thousandth', 'w;o')';&#xA; result: 1000" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1000'
Expr is '$parseInteger('one thousandth', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1793" name="function-parseInteger.parseInteger[51]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[51]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="389772129" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5573416Z" end-time="2024-02-19T13:49:38.5581877Z" duration="0.000846" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('three thousand, seven hundred and thirty-first', 'w;o')';&#xA; result: 3731" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '3730'
Expr is '$parseInteger('three thousand, seven hundred and thirty-first', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1794" name="function-parseInteger.parseInteger[52]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[52]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="105292070" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5582014Z" end-time="2024-02-19T13:49:38.5589914Z" duration="0.000790" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('three hundred and twenty-seven thousand, seven hundred and thirteenth', 'w;o')';&#xA; result: 327713" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '327730'
Expr is '$parseInteger('three hundred and twenty-seven thousand, seven hundred and thirteenth', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1795" name="function-parseInteger.parseInteger[53]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[53]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1072250619" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5590127Z" end-time="2024-02-19T13:49:38.5598588Z" duration="0.000846" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('four million, three hundred and twenty-seven thousand, seven hundred and thirty-second', 'w;o')';&#xA; result: 4327732" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '4327730'
Expr is '$parseInteger('four million, three hundred and twenty-seven thousand, seven hundred and thirty-second', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1796" name="function-parseInteger.parseInteger[54]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[54]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="678056999" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5598790Z" end-time="2024-02-19T13:49:38.5607191Z" duration="0.000840" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('one trillion and first', 'w;o')';&#xA; result: 1000000000001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1e12 + 1'
Expr is '$parseInteger('one trillion and first', 'w;o')'
]]></output>
                </test-case>
                <test-case id="0-1797" name="function-parseInteger.parseInteger[55]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[55]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1989058215" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5607406Z" end-time="2024-02-19T13:49:38.5616515Z" duration="0.000911" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('A', 'A')';&#xA; result: 1" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '1'
Expr is '$parseInteger('A', 'A')'
]]></output>
                </test-case>
                <test-case id="0-1798" name="function-parseInteger.parseInteger[56]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[56]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1428611993" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5616747Z" end-time="2024-02-19T13:49:38.5624306Z" duration="0.000756" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('l', 'a')';&#xA; result: 12" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '12'
Expr is '$parseInteger('l', 'a')'
]]></output>
                </test-case>
                <test-case id="0-1799" name="function-parseInteger.parseInteger[57]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[57]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="599750482" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5624502Z" end-time="2024-02-19T13:49:38.5630886Z" duration="0.000639" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('z', 'a')';&#xA; result: 26" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '26'
Expr is '$parseInteger('z', 'a')'
]]></output>
                </test-case>
                <test-case id="0-1800" name="function-parseInteger.parseInteger[58]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[58]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1528838656" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5631019Z" end-time="2024-02-19T13:49:38.5636098Z" duration="0.000508" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('aa', 'a')';&#xA; result: 27" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '27'
Expr is '$parseInteger('aa', 'a')'
]]></output>
                </test-case>
                <test-case id="0-1801" name="function-parseInteger.parseInteger[59]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[59]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="790792433" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5636275Z" end-time="2024-02-19T13:49:38.5645805Z" duration="0.000953" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('KN', 'A')';&#xA; result: 300" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '300'
Expr is '$parseInteger('KN', 'A')'
]]></output>
                </test-case>
                <test-case id="0-1802" name="function-parseInteger.parseInteger[60]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[60]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1555274686" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.5646000Z" end-time="2024-02-19T13:49:38.5654981Z" duration="0.000898" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('FZPH', 'A')';&#xA; result: 123456" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Error evaluating function 'parseInteger': Input string was not in a correct format.
(Exception)
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 118
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></message>
                  </reason>
                  <output><![CDATA[Description: '123456'
Expr is '$parseInteger('FZPH', 'A')'
]]></output>
                </test-case>
                <test-case id="0-1803" name="function-parseInteger.parseInteger[61]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-parseInteger.parseInteger[61]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1917563113" result="Failed" start-time="2024-02-19T13:49:38.5655143Z" end-time="2024-02-19T13:49:38.5678067Z" duration="0.002293" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$parseInteger('50', '#')';&#xA; result: error D3130" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D3130 (), got '50']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'unsupported picture string'
Expr is '$parseInteger('50', '#')'
Result: '50'
Expected error D3130
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D3130 (), got '50']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1804" name="function-power.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-power.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1646530934" result="Passed" start-time="2024-02-19T13:49:38.5678284Z" end-time="2024-02-19T13:49:38.5681876Z" duration="0.000359" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$power(4, 2)';&#xA; result: 16" />
                  </properties>
                  <output><![CDATA[Expr is '$power(4, 2)'
Result: '16'
Expected: '16'
]]></output>
                </test-case>
                <test-case id="0-1805" name="function-power.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-power.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="714740395" result="Passed" start-time="2024-02-19T13:49:38.5682035Z" end-time="2024-02-19T13:49:38.5683213Z" duration="0.000118" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$power(4, 0.5)';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '$power(4, 0.5)'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-1806" name="function-power.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-power.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1498493418" result="Passed" start-time="2024-02-19T13:49:38.5683314Z" end-time="2024-02-19T13:49:38.5684371Z" duration="0.000106" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$power(10, -2)';&#xA; result: 0.01" />
                  </properties>
                  <output><![CDATA[Expr is '$power(10, -2)'
Result: '0.01'
Expected: '0.01'
]]></output>
                </test-case>
                <test-case id="0-1807" name="function-power.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-power.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="310234661" result="Passed" start-time="2024-02-19T13:49:38.5684468Z" end-time="2024-02-19T13:49:38.5685249Z" duration="0.000078" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$power(-2, 3)';&#xA; result: -8" />
                  </properties>
                  <output><![CDATA[Expr is '$power(-2, 3)'
Result: '-8'
Expected: '-8'
]]></output>
                </test-case>
                <test-case id="0-1808" name="function-power.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-power.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1594005650" result="Passed" start-time="2024-02-19T13:49:38.5685324Z" end-time="2024-02-19T13:49:38.5685943Z" duration="0.000062" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$power(nothing, 3)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$power(nothing, 3)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1809" name="function-power.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-power.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1591574694" result="Passed" start-time="2024-02-19T13:49:38.5686024Z" end-time="2024-02-19T13:49:38.5690918Z" duration="0.000490" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$power(-2, 1/3)';&#xA; result: error D3061" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3061.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$power(-2, 1/3)'
]]></output>
                </test-case>
                <test-case id="0-1810" name="function-power.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-power.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2012899051" result="Passed" start-time="2024-02-19T13:49:38.5691049Z" end-time="2024-02-19T13:49:38.5695316Z" duration="0.000427" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$power(100, 1000)';&#xA; result: error D3061" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3061.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$power(100, 1000)'
]]></output>
                </test-case>
                <test-case id="0-1811" name="function-replace.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="458013950" result="Passed" start-time="2024-02-19T13:49:38.5696180Z" end-time="2024-02-19T13:49:38.5723025Z" duration="0.002685" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;Hello World&quot;, &quot;World&quot;, &quot;Everyone&quot;)';&#xA; result: &quot;Hello Everyone&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("Hello World", "World", "Everyone")'
Result: '"Hello Everyone"'
Expected: '"Hello Everyone"'
]]></output>
                </test-case>
                <test-case id="0-1812" name="function-replace.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1458712202" result="Passed" start-time="2024-02-19T13:49:38.5723395Z" end-time="2024-02-19T13:49:38.5725470Z" duration="0.000208" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;the cat sat on the mat&quot;, &quot;at&quot;, &quot;it&quot;)';&#xA; result: &quot;the cit sit on the mit&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("the cat sat on the mat", "at", "it")'
Result: '"the cit sit on the mit"'
Expected: '"the cit sit on the mit"'
]]></output>
                </test-case>
                <test-case id="0-1813" name="function-replace.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="333649227" result="Passed" start-time="2024-02-19T13:49:38.5725624Z" end-time="2024-02-19T13:49:38.5727002Z" duration="0.000138" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;the cat sat on the mat&quot;, &quot;at&quot;, &quot;it&quot;, 0)';&#xA; result: &quot;the cat sat on the mat&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("the cat sat on the mat", "at", "it", 0)'
Result: '"the cat sat on the mat"'
Expected: '"the cat sat on the mat"'
]]></output>
                </test-case>
                <test-case id="0-1814" name="function-replace.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1481242415" result="Passed" start-time="2024-02-19T13:49:38.5727143Z" end-time="2024-02-19T13:49:38.5728248Z" duration="0.000111" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;the cat sat on the mat&quot;, &quot;at&quot;, &quot;it&quot;, 2)';&#xA; result: &quot;the cit sit on the mat&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("the cat sat on the mat", "at", "it", 2)'
Result: '"the cit sit on the mat"'
Expected: '"the cit sit on the mat"'
]]></output>
                </test-case>
                <test-case id="0-1815" name="function-replace.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1403901887" result="Passed" start-time="2024-02-19T13:49:38.5728582Z" end-time="2024-02-19T13:49:38.5730621Z" duration="0.000204" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(nothing, &quot;at&quot;, &quot;it&quot;, 2)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$replace(nothing, "at", "it", 2)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1816" name="function-replace.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1161740005" result="Passed" start-time="2024-02-19T13:49:38.5730764Z" end-time="2024-02-19T13:49:38.5740439Z" duration="0.000968" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;hello&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$replace("hello")'
]]></output>
                </test-case>
                <test-case id="0-1817" name="function-replace.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="313430520" result="Passed" start-time="2024-02-19T13:49:38.5740632Z" end-time="2024-02-19T13:49:38.5745361Z" duration="0.000473" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;hello&quot;, &quot;l&quot;, &quot;1&quot;, null)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$replace("hello", "l", "1", null)'
]]></output>
                </test-case>
                <test-case id="0-1818" name="function-replace.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="953405989" result="Passed" start-time="2024-02-19T13:49:38.5745520Z" end-time="2024-02-19T13:49:38.5751805Z" duration="0.000629" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;hello&quot;, &quot;l&quot;, &quot;1&quot;, -2)';&#xA; result: error D3011" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3011.
Actually thrown D3011.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$replace("hello", "l", "1", -2)'
]]></output>
                </test-case>
                <test-case id="0-1819" name="function-replace.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1193019115" result="Passed" start-time="2024-02-19T13:49:38.5751981Z" end-time="2024-02-19T13:49:38.5755929Z" duration="0.000395" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;hello&quot;, 1)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$replace("hello", 1)'
]]></output>
                </test-case>
                <test-case id="0-1820" name="function-replace.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="149463344" result="Passed" start-time="2024-02-19T13:49:38.5756105Z" end-time="2024-02-19T13:49:38.5761389Z" duration="0.000528" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;hello&quot;, &quot;&quot;, &quot;bye&quot;)';&#xA; result: error D3010" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3010.
Actually thrown D3010.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$replace("hello", "", "bye")'
]]></output>
                </test-case>
                <test-case id="0-1821" name="function-replace.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="134509535" result="Passed" start-time="2024-02-19T13:49:38.5761492Z" end-time="2024-02-19T13:49:38.5767126Z" duration="0.000564" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;hello&quot;, 2, 1)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$replace("hello", 2, 1)'
]]></output>
                </test-case>
                <test-case id="0-1822" name="function-replace.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-replace.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="79058005" result="Passed" start-time="2024-02-19T13:49:38.5767328Z" end-time="2024-02-19T13:49:38.5772738Z" duration="0.000541" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(123, 2, 1)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$replace(123, 2, 1)'
]]></output>
                </test-case>
                <test-case id="0-1823" name="function-reverse.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-reverse.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1235816010" result="Passed" start-time="2024-02-19T13:49:38.5772943Z" end-time="2024-02-19T13:49:38.5776921Z" duration="0.000398" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$reverse([1..5])';&#xA; result: [5,4,3,2,1]" />
                  </properties>
                  <output><![CDATA[Expr is '$reverse([1..5])'
Result: '[5,4,3,2,1]'
Expected: '[5,4,3,2,1]'
]]></output>
                </test-case>
                <test-case id="0-1824" name="function-reverse.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-reverse.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1326890706" result="Passed" start-time="2024-02-19T13:49:38.5777093Z" end-time="2024-02-19T13:49:38.5778065Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[[$], [$reverse($)], [$]]';&#xA; result: [[1,2,3],[3,2,1],[1,2,3]]" />
                  </properties>
                  <output><![CDATA[Expr is '[[$], [$reverse($)], [$]]'
Result: '[[1,2,3],[3,2,1],[1,2,3]]'
Expected: '[[1,2,3],[3,2,1],[1,2,3]]'
]]></output>
                </test-case>
                <test-case id="0-1825" name="function-reverse.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-reverse.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1727286016" result="Passed" start-time="2024-02-19T13:49:38.5778157Z" end-time="2024-02-19T13:49:38.5779644Z" duration="0.000149" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$reverse(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$reverse(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1826" name="function-reverse.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-reverse.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="332082353" result="Passed" start-time="2024-02-19T13:49:38.5779758Z" end-time="2024-02-19T13:49:38.5781896Z" duration="0.000214" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$reverse([1])';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is '$reverse([1])'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1827" name="function-round.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="497923953" result="Passed" start-time="2024-02-19T13:49:38.5782012Z" end-time="2024-02-19T13:49:38.5787264Z" duration="0.000525" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(4)';&#xA; result: 4" />
                  </properties>
                  <output><![CDATA[Expr is '$round(4)'
Result: '4'
Expected: '4'
]]></output>
                </test-case>
                <test-case id="0-1828" name="function-round.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="423824074" result="Passed" start-time="2024-02-19T13:49:38.5787731Z" end-time="2024-02-19T13:49:38.5788771Z" duration="0.000104" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(2.3)';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '$round(2.3)'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-1829" name="function-round.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1480333890" result="Passed" start-time="2024-02-19T13:49:38.5788874Z" end-time="2024-02-19T13:49:38.5790495Z" duration="0.000162" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(2.7)';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '$round(2.7)'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-1830" name="function-round.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="236670405" result="Passed" start-time="2024-02-19T13:49:38.5790619Z" end-time="2024-02-19T13:49:38.5791637Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(2.5)';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '$round(2.5)'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-1831" name="function-round.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1305910379" result="Passed" start-time="2024-02-19T13:49:38.5791755Z" end-time="2024-02-19T13:49:38.5792810Z" duration="0.000106" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(3.5)';&#xA; result: 4" />
                  </properties>
                  <output><![CDATA[Expr is '$round(3.5)'
Result: '4'
Expected: '4'
]]></output>
                </test-case>
                <test-case id="0-1832" name="function-round.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="203254189" result="Passed" start-time="2024-02-19T13:49:38.5793188Z" end-time="2024-02-19T13:49:38.5794248Z" duration="0.000106" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(-0.5)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$round(-0.5)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1833" name="function-round.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2015289522" result="Passed" start-time="2024-02-19T13:49:38.5794358Z" end-time="2024-02-19T13:49:38.5795073Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(-0.3)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$round(-0.3)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1834" name="function-round.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1187564019" result="Passed" start-time="2024-02-19T13:49:38.5795159Z" end-time="2024-02-19T13:49:38.5795847Z" duration="0.000069" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(0.5)';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$round(0.5)'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-1835" name="function-round.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="263050363" result="Passed" start-time="2024-02-19T13:49:38.5795925Z" end-time="2024-02-19T13:49:38.5796650Z" duration="0.000073" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(-7.5)';&#xA; result: -8" />
                  </properties>
                  <output><![CDATA[Expr is '$round(-7.5)'
Result: '-8'
Expected: '-8'
]]></output>
                </test-case>
                <test-case id="0-1836" name="function-round.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1438693337" result="Passed" start-time="2024-02-19T13:49:38.5796743Z" end-time="2024-02-19T13:49:38.5797543Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(-8.5)';&#xA; result: -8" />
                  </properties>
                  <output><![CDATA[Expr is '$round(-8.5)'
Result: '-8'
Expected: '-8'
]]></output>
                </test-case>
                <test-case id="0-1837" name="function-round.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="735098253" result="Passed" start-time="2024-02-19T13:49:38.5797655Z" end-time="2024-02-19T13:49:38.5798582Z" duration="0.000093" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(4.49, 1)';&#xA; result: 4.5" />
                  </properties>
                  <output><![CDATA[Expr is '$round(4.49, 1)'
Result: '4.5'
Expected: '4.5'
]]></output>
                </test-case>
                <test-case id="0-1838" name="function-round.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="207803956" result="Passed" start-time="2024-02-19T13:49:38.5798674Z" end-time="2024-02-19T13:49:38.5799468Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(4.525, 2)';&#xA; result: 4.52" />
                  </properties>
                  <output><![CDATA[Expr is '$round(4.525, 2)'
Result: '4.52'
Expected: '4.52'
]]></output>
                </test-case>
                <test-case id="0-1839" name="function-round.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="385694701" result="Passed" start-time="2024-02-19T13:49:38.5799565Z" end-time="2024-02-19T13:49:38.5800889Z" duration="0.000133" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(4.515, 2)';&#xA; result: 4.52" />
                  </properties>
                  <output><![CDATA[Expr is '$round(4.515, 2)'
Result: '4.52'
Expected: '4.52'
]]></output>
                </test-case>
                <test-case id="0-1840" name="function-round.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="758756051" result="Passed" start-time="2024-02-19T13:49:38.5800989Z" end-time="2024-02-19T13:49:38.5801725Z" duration="0.000074" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(12345, -2)';&#xA; result: 12300" />
                  </properties>
                  <output><![CDATA[Expr is '$round(12345, -2)'
Result: '12300'
Expected: '12300'
]]></output>
                </test-case>
                <test-case id="0-1841" name="function-round.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1017137749" result="Passed" start-time="2024-02-19T13:49:38.5801792Z" end-time="2024-02-19T13:49:38.5802327Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(12450, -2)';&#xA; result: 12400" />
                  </properties>
                  <output><![CDATA[Expr is '$round(12450, -2)'
Result: '12400'
Expected: '12400'
]]></output>
                </test-case>
                <test-case id="0-1842" name="function-round.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1847105230" result="Passed" start-time="2024-02-19T13:49:38.5802391Z" end-time="2024-02-19T13:49:38.5802881Z" duration="0.000049" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(12350, -2)';&#xA; result: 12400" />
                  </properties>
                  <output><![CDATA[Expr is '$round(12350, -2)'
Result: '12400'
Expected: '12400'
]]></output>
                </test-case>
                <test-case id="0-1843" name="function-round.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1305398801" result="Passed" start-time="2024-02-19T13:49:38.5802943Z" end-time="2024-02-19T13:49:38.5803526Z" duration="0.000058" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(6.022e-23, 24)';&#xA; result: 6E-23" />
                  </properties>
                  <output><![CDATA[Expr is '$round(6.022e-23, 24)'
Result: '0.000000000000000000000060'
Expected: '6E-23'
]]></output>
                </test-case>
                <test-case id="0-1844" name="function-round.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-round.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1067572195" result="Passed" start-time="2024-02-19T13:49:38.5803592Z" end-time="2024-02-19T13:49:38.5804058Z" duration="0.000047" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$round(unknown)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$round(unknown)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1845" name="function-shuffle.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-shuffle.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1586914584" result="Passed" start-time="2024-02-19T13:49:38.5804127Z" end-time="2024-02-19T13:49:38.5809481Z" duration="0.000536" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$count($shuffle([1..10]))';&#xA; result: 10" />
                  </properties>
                  <output><![CDATA[Expr is '$count($shuffle([1..10]))'
Result: '10'
Expected: '10'
]]></output>
                </test-case>
                <test-case id="0-1846" name="function-shuffle.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-shuffle.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1415045017" result="Passed" start-time="2024-02-19T13:49:38.5809598Z" end-time="2024-02-19T13:49:38.5818678Z" duration="0.000908" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort($shuffle([1..10]))';&#xA; result: [1,2,3,4,5,6,7,8,9,10]" />
                  </properties>
                  <output><![CDATA[Expr is '$sort($shuffle([1..10]))'
Result: '[1,2,3,4,5,6,7,8,9,10]'
Expected: '[1,2,3,4,5,6,7,8,9,10]'
]]></output>
                </test-case>
                <test-case id="0-1847" name="function-shuffle.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-shuffle.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="535478546" result="Passed" start-time="2024-02-19T13:49:38.5818816Z" end-time="2024-02-19T13:49:38.5819878Z" duration="0.000106" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$shuffle(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$shuffle(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1848" name="function-shuffle.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-shuffle.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1056013361" result="Passed" start-time="2024-02-19T13:49:38.5819976Z" end-time="2024-02-19T13:49:38.5820900Z" duration="0.000092" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$shuffle([1])';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is '$shuffle([1])'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1849" name="function-sift.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sift.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="848873830" result="Passed" start-time="2024-02-19T13:49:38.5821002Z" end-time="2024-02-19T13:49:38.5827305Z" duration="0.000631" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sift(λ($v){$v.**.Postcode})';&#xA; result: {&quot;Address&quot;:{&quot;Street&quot;:&quot;Hursley Park&quot;,&quot;City&quot;:&quot;Winchester&quot;,&quot;Postcode&quot;:&quot;SO21 2JN&quot;},&quot;Other&quot;:{&quot;Over 18 ?&quot;:true,&quot;Misc&quot;:null,&quot;Alternative.Address&quot;:{&quot;Street&quot;:&quot;Brick Lane&quot;,&quot;City&quot;:&quot;London&quot;,&quot;Postcode&quot;:&quot;E1 6RF&quot;}}}" />
                  </properties>
                  <output><![CDATA[Expr is '$sift(λ($v){$v.**.Postcode})'
Result: '{"Address":{"Street":"Hursley Park","City":"Winchester","Postcode":"SO21 2JN"},"Other":{"Over 18 ?":true,"Misc":null,"Alternative.Address":{"Street":"Brick Lane","City":"London","Postcode":"E1 6RF"}}}'
Expected: '{"Address":{"Street":"Hursley Park","City":"Winchester","Postcode":"SO21 2JN"},"Other":{"Over 18 ?":true,"Misc":null,"Alternative.Address":{"Street":"Brick Lane","City":"London","Postcode":"E1 6RF"}}}'
]]></output>
                </test-case>
                <test-case id="0-1850" name="function-sift.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sift.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2057994261" result="Passed" start-time="2024-02-19T13:49:38.5827438Z" end-time="2024-02-19T13:49:38.5832499Z" duration="0.000506" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '**[*].$sift(λ($v){$v.Postcode})';&#xA; result: [{&quot;Address&quot;:{&quot;Street&quot;:&quot;Hursley Park&quot;,&quot;City&quot;:&quot;Winchester&quot;,&quot;Postcode&quot;:&quot;SO21 2JN&quot;}},{&quot;Alternative.Address&quot;:{&quot;Street&quot;:&quot;Brick Lane&quot;,&quot;City&quot;:&quot;London&quot;,&quot;Postcode&quot;:&quot;E1 6RF&quot;}}]" />
                  </properties>
                  <output><![CDATA[Expr is '**[*].$sift(λ($v){$v.Postcode})'
Result: '[{"Address":{"Street":"Hursley Park","City":"Winchester","Postcode":"SO21 2JN"}},{"Alternative.Address":{"Street":"Brick Lane","City":"London","Postcode":"E1 6RF"}}]'
Expected: '[{"Address":{"Street":"Hursley Park","City":"Winchester","Postcode":"SO21 2JN"}},{"Alternative.Address":{"Street":"Brick Lane","City":"London","Postcode":"E1 6RF"}}]'
]]></output>
                </test-case>
                <test-case id="0-1851" name="function-sift.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sift.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="364626479" result="Passed" start-time="2024-02-19T13:49:38.5832746Z" end-time="2024-02-19T13:49:38.5846561Z" duration="0.001382" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sift(λ($v, $k){$k ~&gt; /^A/})';&#xA; result: {&quot;Age&quot;:28,&quot;Address&quot;:{&quot;Street&quot;:&quot;Hursley Park&quot;,&quot;City&quot;:&quot;Winchester&quot;,&quot;Postcode&quot;:&quot;SO21 2JN&quot;}}" />
                  </properties>
                  <output><![CDATA[Expr is '$sift(λ($v, $k){$k ~> /^A/})'
Result: '{"Age":28,"Address":{"Street":"Hursley Park","City":"Winchester","Postcode":"SO21 2JN"}}'
Expected: '{"Age":28,"Address":{"Street":"Hursley Park","City":"Winchester","Postcode":"SO21 2JN"}}'
]]></output>
                </test-case>
                <test-case id="0-1852" name="function-sift.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sift.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1035652226" result="Passed" start-time="2024-02-19T13:49:38.5847343Z" end-time="2024-02-19T13:49:38.5849850Z" duration="0.000251" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sift({'a': 1, 'b': 0}, $boolean)';&#xA; result: {&quot;a&quot;:1}" />
                  </properties>
                  <output><![CDATA[Expr is '$sift({'a': 1, 'b': 0}, $boolean)'
Result: '{"a":1}'
Expected: '{"a":1}'
]]></output>
                </test-case>
                <test-case id="0-1853" name="function-sift.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sift.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="235592878" result="Passed" start-time="2024-02-19T13:49:38.5850018Z" end-time="2024-02-19T13:49:38.5851684Z" duration="0.000167" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sift({'a': 'hello', 'b': 'world', 'hello': 'again'}, λ($v,$k,$o){$lookup($o, $v)})';&#xA; result: {&quot;a&quot;:&quot;hello&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is '$sift({'a': 'hello', 'b': 'world', 'hello': 'again'}, λ($v,$k,$o){$lookup($o, $v)})'
Result: '{"a":"hello"}'
Expected: '{"a":"hello"}'
]]></output>
                </test-case>
                <test-case id="0-1854" name="function-signatures.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="450287138" result="Passed" start-time="2024-02-19T13:49:38.5851820Z" end-time="2024-02-19T13:49:38.5956186Z" duration="0.010437" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arg)&lt;b:b&gt;{$not($arg)}(true)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arg)<b:b>{$not($arg)}(true)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-1855" name="function-signatures.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1394329121" result="Passed" start-time="2024-02-19T13:49:38.5956520Z" end-time="2024-02-19T13:49:38.5966114Z" duration="0.000960" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arg)&lt;b:b&gt;{$not($arg)}(foo)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arg)<b:b>{$not($arg)}(foo)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1856" name="function-signatures.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="711734428" result="Passed" start-time="2024-02-19T13:49:38.5966339Z" end-time="2024-02-19T13:49:38.5983533Z" duration="0.001720" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arg)&lt;x:b&gt;{$not($arg)}(null)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arg)<x:b>{$not($arg)}(null)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-1857" name="function-signatures.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="319458676" result="Passed" start-time="2024-02-19T13:49:38.5983863Z" end-time="2024-02-19T13:49:38.6007339Z" duration="0.002348" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'function($x,$y)&lt;n-n:n&gt;{$x+$y}(2, 6)';&#xA; result: 8" />
                  </properties>
                  <output><![CDATA[Expr is 'function($x,$y)<n-n:n>{$x+$y}(2, 6)'
Result: '8'
Expected: '8'
]]></output>
                </test-case>
                <test-case id="0-1858" name="function-signatures.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="590672407" result="Passed" start-time="2024-02-19T13:49:38.6007847Z" end-time="2024-02-19T13:49:38.6132728Z" duration="0.012488" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..5].function($x,$y)&lt;n-n:n&gt;{$x+$y}(6)';&#xA; result: [7,8,9,10,11]" />
                  </properties>
                  <output><![CDATA[Expr is '[1..5].function($x,$y)<n-n:n>{$x+$y}(6)'
Result: '[7,8,9,10,11]'
Expected: '[7,8,9,10,11]'
]]></output>
                </test-case>
                <test-case id="0-1859" name="function-signatures.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2066728565" result="Passed" start-time="2024-02-19T13:49:38.6133093Z" end-time="2024-02-19T13:49:38.6209403Z" duration="0.007631" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..5].function($x,$y)&lt;n-n:n&gt;{$x+$y}(2, 6)';&#xA; result: [8,8,8,8,8]" />
                  </properties>
                  <output><![CDATA[Expr is '[1..5].function($x,$y)<n-n:n>{$x+$y}(2, 6)'
Result: '[8,8,8,8,8]'
Expected: '[8,8,8,8,8]'
]]></output>
                </test-case>
                <test-case id="0-1860" name="function-signatures.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="382658042" result="Passed" start-time="2024-02-19T13:49:38.6209830Z" end-time="2024-02-19T13:49:38.6231834Z" duration="0.002201" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Age.function($x,$y)&lt;n-n:n&gt;{$x+$y}(6)';&#xA; result: 34" />
                  </properties>
                  <output><![CDATA[Expr is 'Age.function($x,$y)<n-n:n>{$x+$y}(6)'
Result: '34'
Expected: '34'
]]></output>
                </test-case>
                <test-case id="0-1861" name="function-signatures.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1000569465" result="Passed" start-time="2024-02-19T13:49:38.6232078Z" end-time="2024-02-19T13:49:38.6241843Z" duration="0.000977" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($str)&lt;s-&gt;{$uppercase($str)}(&quot;hello&quot;)';&#xA; result: &quot;HELLO&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($str)<s->{$uppercase($str)}("hello")'
Result: '"HELLO"'
Expected: '"HELLO"'
]]></output>
                </test-case>
                <test-case id="0-1862" name="function-signatures.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2033894234" result="Passed" start-time="2024-02-19T13:49:38.6242045Z" end-time="2024-02-19T13:49:38.6298201Z" duration="0.005616" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Description.Colour.λ($str)&lt;s-&gt;{$uppercase($str)}()';&#xA; result: [&quot;PURPLE&quot;,&quot;ORANGE&quot;,&quot;PURPLE&quot;,&quot;BLACK&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Description.Colour.λ($str)<s->{$uppercase($str)}()'
Result: '["PURPLE","ORANGE","PURPLE","BLACK"]'
Expected: '["PURPLE","ORANGE","PURPLE","BLACK"]'
]]></output>
                </test-case>
                <test-case id="0-1863" name="function-signatures.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="113671760" result="Passed" start-time="2024-02-19T13:49:38.6298512Z" end-time="2024-02-19T13:49:38.6314427Z" duration="0.001592" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($str, $prefix)&lt;s-s&gt;{$prefix &amp; $str}(&quot;World&quot;, &quot;Hello &quot;)';&#xA; result: &quot;Hello World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($str, $prefix)<s-s>{$prefix & $str}("World", "Hello ")'
Result: '"Hello World"'
Expected: '"Hello World"'
]]></output>
                </test-case>
                <test-case id="0-1864" name="function-signatures.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1354904289" result="Passed" start-time="2024-02-19T13:49:38.6314654Z" end-time="2024-02-19T13:49:38.6337427Z" duration="0.002278" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'FirstName.λ($str, $prefix)&lt;s-s&gt;{$prefix &amp; $str}(&quot;Hello &quot;)';&#xA; result: &quot;Hello Fred&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'FirstName.λ($str, $prefix)<s-s>{$prefix & $str}("Hello ")'
Result: '"Hello Fred"'
Expected: '"Hello Fred"'
]]></output>
                </test-case>
                <test-case id="0-1865" name="function-signatures.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="706988672" result="Passed" start-time="2024-02-19T13:49:38.6359454Z" end-time="2024-02-19T13:49:38.6375604Z" duration="0.001615" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr, $sep)&lt;a&lt;s&gt;s?:s&gt;{$join($arr, $sep)}(&quot;a&quot;)';&#xA; result: &quot;a&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}("a")'
Result: '"a"'
Expected: '"a"'
]]></output>
                </test-case>
                <test-case id="0-1866" name="function-signatures.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="254759761" result="Passed" start-time="2024-02-19T13:49:38.6375827Z" end-time="2024-02-19T13:49:38.6388634Z" duration="0.001281" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr, $sep)&lt;a&lt;s&gt;s?:s&gt;{$join($arr, $sep)}([&quot;a&quot;])';&#xA; result: &quot;a&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}(["a"])'
Result: '"a"'
Expected: '"a"'
]]></output>
                </test-case>
                <test-case id="0-1867" name="function-signatures.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1590906327" result="Passed" start-time="2024-02-19T13:49:38.6388809Z" end-time="2024-02-19T13:49:38.6403680Z" duration="0.001487" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr, $sep)&lt;a&lt;s&gt;s?:s&gt;{$join($arr, $sep)}(&quot;a&quot;, &quot;-&quot;)';&#xA; result: &quot;a&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}("a", "-")'
Result: '"a"'
Expected: '"a"'
]]></output>
                </test-case>
                <test-case id="0-1868" name="function-signatures.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1293568855" result="Passed" start-time="2024-02-19T13:49:38.6403893Z" end-time="2024-02-19T13:49:38.6416751Z" duration="0.001286" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr, $sep)&lt;a&lt;s&gt;s?:s&gt;{$join($arr, $sep)}([&quot;a&quot;], &quot;-&quot;)';&#xA; result: &quot;a&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}(["a"], "-")'
Result: '"a"'
Expected: '"a"'
]]></output>
                </test-case>
                <test-case id="0-1869" name="function-signatures.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1218192052" result="Passed" start-time="2024-02-19T13:49:38.6417035Z" end-time="2024-02-19T13:49:38.6429630Z" duration="0.001260" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr, $sep)&lt;a&lt;s&gt;s?:s&gt;{$join($arr, $sep)}([&quot;a&quot;, &quot;b&quot;], &quot;-&quot;)';&#xA; result: &quot;a-b&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}(["a", "b"], "-")'
Result: '"a-b"'
Expected: '"a-b"'
]]></output>
                </test-case>
                <test-case id="0-1870" name="function-signatures.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2112692197" result="Passed" start-time="2024-02-19T13:49:38.6429853Z" end-time="2024-02-19T13:49:38.6442276Z" duration="0.001243" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr, $sep)&lt;as?:s&gt;{$join($arr, $sep)}([&quot;a&quot;, &quot;b&quot;], &quot;-&quot;)';&#xA; result: &quot;a-b&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr, $sep)<as?:s>{$join($arr, $sep)}(["a", "b"], "-")'
Result: '"a-b"'
Expected: '"a-b"'
]]></output>
                </test-case>
                <test-case id="0-1871" name="function-signatures.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="426641752" result="Passed" start-time="2024-02-19T13:49:38.6442460Z" end-time="2024-02-19T13:49:38.6454204Z" duration="0.001175" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr, $sep)&lt;a&lt;s&gt;s?:s&gt;{$join($arr, $sep)}([], &quot;-&quot;)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}([], "-")'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1872" name="function-signatures.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="105626564" result="Passed" start-time="2024-02-19T13:49:38.6454371Z" end-time="2024-02-19T13:49:38.6466005Z" duration="0.001164" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr, $sep)&lt;a&lt;s&gt;s?:s&gt;{$join($arr, $sep)}(foo, &quot;-&quot;)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr, $sep)<a<s>s?:s>{$join($arr, $sep)}(foo, "-")'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1873" name="function-signatures.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="567711288" result="Passed" start-time="2024-02-19T13:49:38.6466202Z" end-time="2024-02-19T13:49:38.6475963Z" duration="0.000976" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($obj)&lt;o&gt;{$obj}({&quot;hello&quot;: &quot;world&quot;})';&#xA; result: {&quot;hello&quot;:&quot;world&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($obj)<o>{$obj}({"hello": "world"})'
Result: '{"hello":"world"}'
Expected: '{"hello":"world"}'
]]></output>
                </test-case>
                <test-case id="0-1874" name="function-signatures.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="434263064" result="Passed" start-time="2024-02-19T13:49:38.6476155Z" end-time="2024-02-19T13:49:38.6487353Z" duration="0.001120" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr)&lt;a&lt;a&lt;n&gt;&gt;&gt;{$arr}([[1]])';&#xA; result: [[1]]" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($arr)<a<a<n>>>{$arr}([[1]])'
Result: '[[1]]'
Expected: '[[1]]'
]]></output>
                </test-case>
                <test-case id="0-1875" name="function-signatures.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1279809242" result="Passed" start-time="2024-02-19T13:49:38.6487574Z" end-time="2024-02-19T13:49:38.6499219Z" duration="0.001165" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($num)&lt;(ns)-:n&gt;{$number($num)}(5)';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($num)<(ns)-:n>{$number($num)}(5)'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-1876" name="function-signatures.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="434887952" result="Passed" start-time="2024-02-19T13:49:38.6499466Z" end-time="2024-02-19T13:49:38.6511054Z" duration="0.001159" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($num)&lt;(ns)-:n&gt;{$number($num)}(&quot;5&quot;)';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($num)<(ns)-:n>{$number($num)}("5")'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-1877" name="function-signatures.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="921142851" result="Passed" start-time="2024-02-19T13:49:38.6511237Z" end-time="2024-02-19T13:49:38.6576684Z" duration="0.006545" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..5].λ($num)&lt;(ns)-:n&gt;{$number($num)}()';&#xA; result: [1,2,3,4,5]" />
                  </properties>
                  <output><![CDATA[Expr is '[1..5].λ($num)<(ns)-:n>{$number($num)}()'
Result: '[1,2,3,4,5]'
Expected: '[1,2,3,4,5]'
]]></output>
                </test-case>
                <test-case id="0-1878" name="function-signatures.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="168243815" result="Passed" start-time="2024-02-19T13:49:38.6577013Z" end-time="2024-02-19T13:49:38.6601809Z" duration="0.002480" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($twice := function($f)&lt;f:f&gt;{function($x)&lt;n:n&gt;{$f($f($x))}};$add2 := function($x)&lt;n:n&gt;{$x+2};$add4 := $twice($add2);$add4(5))';&#xA; result: 9" />
                  </properties>
                  <output><![CDATA[Expr is '($twice := function($f)<f:f>{function($x)<n:n>{$f($f($x))}};$add2 := function($x)<n:n>{$x+2};$add4 := $twice($add2);$add4(5))'
Result: '9'
Expected: '9'
]]></output>
                </test-case>
                <test-case id="0-1879" name="function-signatures.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1887459769" result="Passed" start-time="2024-02-19T13:49:38.6602102Z" end-time="2024-02-19T13:49:38.6630262Z" duration="0.002816" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($twice := function($f)&lt;f&lt;n:n&gt;:f&lt;n:n&gt;&gt;{function($x)&lt;n:n&gt;{$f($f($x))}};$add2 := function($x)&lt;n:n&gt;{$x+2};$add4 := $twice($add2);$add4(5))';&#xA; result: 9" />
                  </properties>
                  <output><![CDATA[Expr is '($twice := function($f)<f<n:n>:f<n:n>>{function($x)<n:n>{$f($f($x))}};$add2 := function($x)<n:n>{$x+2};$add4 := $twice($add2);$add4(5))'
Result: '9'
Expected: '9'
]]></output>
                </test-case>
                <test-case id="0-1880" name="function-signatures.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="312240999" result="Passed" start-time="2024-02-19T13:49:38.6630632Z" end-time="2024-02-19T13:49:38.6638203Z" duration="0.000757" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'λ($arg)&lt;n&lt;n&gt;&gt;{$arg}(5)';&#xA; result: error S0401" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0401.
Actually thrown S0401.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'λ($arg)<n<n>>{$arg}(5)'
]]></output>
                </test-case>
                <test-case id="0-1881" name="function-signatures.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1944087454" result="Passed" start-time="2024-02-19T13:49:38.6638411Z" end-time="2024-02-19T13:49:38.6653751Z" duration="0.001534" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'λ($arg1, $arg2)&lt;nn:a&gt;{[$arg1, $arg2]}(1,&quot;2&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'λ($arg1, $arg2)<nn:a>{[$arg1, $arg2]}(1,"2")'
]]></output>
                </test-case>
                <test-case id="0-1882" name="function-signatures.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1589394239" result="Passed" start-time="2024-02-19T13:49:38.6653943Z" end-time="2024-02-19T13:49:38.6668254Z" duration="0.001431" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'λ($arg1, $arg2)&lt;nn:a&gt;{[$arg1, $arg2]}(1,3,&quot;2&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'λ($arg1, $arg2)<nn:a>{[$arg1, $arg2]}(1,3,"2")'
]]></output>
                </test-case>
                <test-case id="0-1883" name="function-signatures.case029" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case029" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1722433891" result="Passed" start-time="2024-02-19T13:49:38.6668452Z" end-time="2024-02-19T13:49:38.6685480Z" duration="0.001703" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'λ($arg1, $arg2)&lt;nn+:a&gt;{[$arg1, $arg2]}(1,3, 2,&quot;g&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'λ($arg1, $arg2)<nn+:a>{[$arg1, $arg2]}(1,3, 2,"g")'
]]></output>
                </test-case>
                <test-case id="0-1884" name="function-signatures.case030" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case030" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1569823276" result="Failed" start-time="2024-02-19T13:49:38.6685706Z" end-time="2024-02-19T13:49:38.6705767Z" duration="0.002006" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr)&lt;a&lt;n&gt;&gt;{$arr}([&quot;3&quot;]) ';&#xA; result: error T0412" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error T0412 (), got '["3"]']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is 'λ($arr)<a<n>>{$arr}(["3"]) '
Result: '["3"]'
Expected error T0412
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error T0412 (), got '["3"]']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1885" name="function-signatures.case031" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case031" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2019527573" result="Passed" start-time="2024-02-19T13:49:38.6706066Z" end-time="2024-02-19T13:49:38.6725142Z" duration="0.001908" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr)&lt;a&lt;n&gt;&gt;{$arr}([1, 2, &quot;3&quot;]) ';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'λ($arr)<a<n>>{$arr}([1, 2, "3"]) '
]]></output>
                </test-case>
                <test-case id="0-1886" name="function-signatures.case032" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case032" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="270258153" result="Failed" start-time="2024-02-19T13:49:38.6725423Z" end-time="2024-02-19T13:49:38.6742924Z" duration="0.001750" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr)&lt;a&lt;n&gt;&gt;{$arr}(&quot;f&quot;)';&#xA; result: error T0412" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error T0412 (), got '["f"]']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is 'λ($arr)<a<n>>{$arr}("f")'
Result: '["f"]'
Expected error T0412
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error T0412 (), got '["f"]']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1887" name="function-signatures.case033" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case033" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2115144958" result="Failed" start-time="2024-02-19T13:49:38.6743175Z" end-time="2024-02-19T13:49:38.6762654Z" duration="0.001948" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($fun := λ($arr)&lt;a&lt;n&gt;&gt;{$arr};$fun(&quot;f&quot;))';&#xA; result: error T0412" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error T0412 (), got '["f"]']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '($fun := λ($arr)<a<n>>{$arr};$fun("f"))'
Result: '["f"]'
Expected error T0412
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error T0412 (), got '["f"]']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1888" name="function-signatures.case034" fullname="Jsonata.Net.Native.TestSuite.Tests.function-signatures.case034" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1565002384" result="Passed" start-time="2024-02-19T13:49:38.6762955Z" end-time="2024-02-19T13:49:38.6768090Z" duration="0.000514" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'λ($arr)&lt;(sa&lt;n&gt;)&gt;&gt;{$arr}([[1]])';&#xA; result: error S0402" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0402.
Actually thrown XXX.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'λ($arr)<(sa<n>)>>{$arr}([[1]])'
]]></output>
                </test-case>
                <test-case id="0-1889" name="function-sort.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1940718545" result="Passed" start-time="2024-02-19T13:49:38.6768299Z" end-time="2024-02-19T13:49:38.6769657Z" duration="0.000136" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$sort(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1890" name="function-sort.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1698799582" result="Passed" start-time="2024-02-19T13:49:38.6769755Z" end-time="2024-02-19T13:49:38.6770648Z" duration="0.000089" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort(1)';&#xA; result: [1]" />
                  </properties>
                  <output><![CDATA[Expr is '$sort(1)'
Result: '[1]'
Expected: '[1]'
]]></output>
                </test-case>
                <test-case id="0-1891" name="function-sort.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1119234661" result="Passed" start-time="2024-02-19T13:49:38.6770722Z" end-time="2024-02-19T13:49:38.6771814Z" duration="0.000109" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort([1,3,2])';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is '$sort([1,3,2])'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
                <test-case id="0-1892" name="function-sort.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="144425846" result="Passed" start-time="2024-02-19T13:49:38.6771930Z" end-time="2024-02-19T13:49:38.6773294Z" duration="0.000137" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort([1,3,22,11])';&#xA; result: [1,3,11,22]" />
                  </properties>
                  <output><![CDATA[Expr is '$sort([1,3,22,11])'
Result: '[1,3,11,22]'
Expected: '[1,3,11,22]'
]]></output>
                </test-case>
                <test-case id="0-1893" name="function-sort.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="288559038" result="Passed" start-time="2024-02-19T13:49:38.6773406Z" end-time="2024-02-19T13:49:38.6774526Z" duration="0.000112" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[[$], [$sort($)], [$]]';&#xA; result: [[1,3,2],[1,2,3],[1,3,2]]" />
                  </properties>
                  <output><![CDATA[Expr is '[[$], [$sort($)], [$]]'
Result: '[[1,3,2],[1,2,3],[1,3,2]]'
Expected: '[[1,3,2],[1,2,3],[1,3,2]]'
]]></output>
                </test-case>
                <test-case id="0-1894" name="function-sort.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="3036659" result="Passed" start-time="2024-02-19T13:49:38.6774640Z" end-time="2024-02-19T13:49:38.6775972Z" duration="0.000133" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort(Account.Order.Product.Price)';&#xA; result: [21.67,34.45,34.45,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is '$sort(Account.Order.Product.Price)'
Result: '[21.67,34.45,34.45,107.99]'
Expected: '[21.67,34.45,34.45,107.99]'
]]></output>
                </test-case>
                <test-case id="0-1895" name="function-sort.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1905670233" result="Passed" start-time="2024-02-19T13:49:38.6776075Z" end-time="2024-02-19T13:49:38.6780358Z" duration="0.000428" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort(Account.Order.Product.&quot;Product Name&quot;)';&#xA; result: [&quot;Bowler Hat&quot;,&quot;Bowler Hat&quot;,&quot;Cloak&quot;,&quot;Trilby hat&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$sort(Account.Order.Product."Product Name")'
Result: '["Bowler Hat","Bowler Hat","Cloak","Trilby hat"]'
Expected: '["Bowler Hat","Bowler Hat","Cloak","Trilby hat"]'
]]></output>
                </test-case>
                <test-case id="0-1896" name="function-sort.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1130727162" result="Passed" start-time="2024-02-19T13:49:38.6780479Z" end-time="2024-02-19T13:49:38.6788468Z" duration="0.000799" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$sort(Account.Order.Product)';&#xA; result: error D3070" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3070.
Actually thrown D3070.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$sort(Account.Order.Product)'
]]></output>
                </test-case>
                <test-case id="0-1897" name="function-sort.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1733433470" result="Passed" start-time="2024-02-19T13:49:38.6788590Z" end-time="2024-02-19T13:49:38.6792119Z" duration="0.000353" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort(Account.Order.Product, function($a, $b) { $a.(Price * Quantity) &gt; $b.(Price * Quantity) }).(Price &amp; &quot; x &quot; &amp; Quantity)';&#xA; result: [&quot;21.67 x 1&quot;,&quot;34.45 x 2&quot;,&quot;107.99 x 1&quot;,&quot;34.45 x 4&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$sort(Account.Order.Product, function($a, $b) { $a.(Price * Quantity) > $b.(Price * Quantity) }).(Price & " x " & Quantity)'
Result: '["21.67 x 1","34.45 x 2","107.99 x 1","34.45 x 4"]'
Expected: '["21.67 x 1","34.45 x 2","107.99 x 1","34.45 x 4"]'
]]></output>
                </test-case>
                <test-case id="0-1898" name="function-sort.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2097978159" result="Failed" start-time="2024-02-19T13:49:38.6792224Z" end-time="2024-02-19T13:49:38.6801969Z" duration="0.000975" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sort(Account.Order.Product, function($a, $b) { $a.Price &gt; $b.Price }).SKU';&#xA; result: [&quot;0406634348&quot;,&quot;0406654608&quot;,&quot;040657863&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '["0406634348","0406654608","040657863","0406654603"]', got '["0406634348","040657863","0406654608","0406654603"]'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$sort(Account.Order.Product, function($a, $b) { $a.Price > $b.Price }).SKU'
Result: '["0406634348","040657863","0406654608","0406654603"]'
Expected: '["0406634348","0406654608","040657863","0406654603"]'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '["0406634348","0406654608","040657863","0406654603"]', got '["0406634348","040657863","0406654608","0406654603"]'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1899" name="function-sort.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sort.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="360583523" result="Failed" start-time="2024-02-19T13:49:38.6802174Z" end-time="2024-02-19T13:49:38.6809902Z" duration="0.000773" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&#xA;                (Account.Order.Product&#xA;                  ~&gt; $sort(λ($a,$b){$a.Quantity &lt; $b.Quantity})&#xA;                  ~&gt; $sort(λ($a,$b){$a.Price &gt; $b.Price})&#xA;                ).SKU&#xA;            ';&#xA; result: [&quot;0406634348&quot;,&quot;040657863&quot;,&quot;0406654608&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '["0406634348","040657863","0406654608","0406654603"]', got '["0406634348","0406654608","040657863","0406654603"]'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '
                (Account.Order.Product
                  ~> $sort(λ($a,$b){$a.Quantity < $b.Quantity})
                  ~> $sort(λ($a,$b){$a.Price > $b.Price})
                ).SKU
            '
Result: '["0406634348","0406654608","040657863","0406654603"]'
Expected: '["0406634348","040657863","0406654608","0406654603"]'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '["0406634348","040657863","0406654608","0406654603"]', got '["0406634348","0406654608","040657863","0406654603"]'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1900" name="function-split.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1332154823" result="Passed" start-time="2024-02-19T13:49:38.6810091Z" end-time="2024-02-19T13:49:38.6831020Z" duration="0.002093" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;Hello World&quot;, &quot; &quot;)';&#xA; result: [&quot;Hello&quot;,&quot;World&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("Hello World", " ")'
Result: '["Hello","World"]'
Expected: '["Hello","World"]'
]]></output>
                </test-case>
                <test-case id="0-1901" name="function-split.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1971622337" result="Passed" start-time="2024-02-19T13:49:38.6831358Z" end-time="2024-02-19T13:49:38.6833135Z" duration="0.000178" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;Hello&quot;, &quot; &quot;)';&#xA; result: [&quot;Hello&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("Hello", " ")'
Result: '["Hello"]'
Expected: '["Hello"]'
]]></output>
                </test-case>
                <test-case id="0-1902" name="function-split.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1389393338" result="Passed" start-time="2024-02-19T13:49:38.6833267Z" end-time="2024-02-19T13:49:38.6834076Z" duration="0.000081" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;Hello  World&quot;, &quot; &quot;)';&#xA; result: [&quot;Hello&quot;,&quot;&quot;,&quot;World&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("Hello  World", " ")'
Result: '["Hello","","World"]'
Expected: '["Hello","","World"]'
]]></output>
                </test-case>
                <test-case id="0-1903" name="function-split.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1985304956" result="Passed" start-time="2024-02-19T13:49:38.6834172Z" end-time="2024-02-19T13:49:38.6835683Z" duration="0.000151" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;Hello&quot;, &quot;&quot;)';&#xA; result: [&quot;H&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("Hello", "")'
Result: '["H","e","l","l","o"]'
Expected: '["H","e","l","l","o"]'
]]></output>
                </test-case>
                <test-case id="0-1904" name="function-split.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="883665280" result="Passed" start-time="2024-02-19T13:49:38.6835787Z" end-time="2024-02-19T13:49:38.6836881Z" duration="0.000110" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sum($split(&quot;12345&quot;, &quot;&quot;).$number($))';&#xA; result: 15" />
                  </properties>
                  <output><![CDATA[Expr is '$sum($split("12345", "").$number($))'
Result: '15'
Expected: '15'
]]></output>
                </test-case>
                <test-case id="0-1905" name="function-split.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1631352509" result="Passed" start-time="2024-02-19T13:49:38.6836974Z" end-time="2024-02-19T13:49:38.6838124Z" duration="0.000115" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;)';&#xA; result: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ")'
Result: '["a","b","c","d"]'
Expected: '["a","b","c","d"]'
]]></output>
                </test-case>
                <test-case id="0-1906" name="function-split.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="258999915" result="Passed" start-time="2024-02-19T13:49:38.6838213Z" end-time="2024-02-19T13:49:38.6838885Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;, 2)';&#xA; result: [&quot;a&quot;,&quot;b&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ", 2)'
Result: '["a","b"]'
Expected: '["a","b"]'
]]></output>
                </test-case>
                <test-case id="0-1907" name="function-split.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="467940938" result="Passed" start-time="2024-02-19T13:49:38.6838952Z" end-time="2024-02-19T13:49:38.6839604Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;, 2.5)';&#xA; result: [&quot;a&quot;,&quot;b&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ", 2.5)'
Result: '["a","b"]'
Expected: '["a","b"]'
]]></output>
                </test-case>
                <test-case id="0-1908" name="function-split.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1948813461" result="Passed" start-time="2024-02-19T13:49:38.6839696Z" end-time="2024-02-19T13:49:38.6840470Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;, 10)';&#xA; result: [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ", 10)'
Result: '["a","b","c","d"]'
Expected: '["a","b","c","d"]'
]]></output>
                </test-case>
                <test-case id="0-1909" name="function-split.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1317961543" result="Passed" start-time="2024-02-19T13:49:38.6840569Z" end-time="2024-02-19T13:49:38.6841342Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;, 0)';&#xA; result: []" />
                  </properties>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ", 0)'
Result: '[]'
Expected: '[]'
]]></output>
                </test-case>
                <test-case id="0-1910" name="function-split.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="959441169" result="Passed" start-time="2024-02-19T13:49:38.6841421Z" end-time="2024-02-19T13:49:38.6841984Z" duration="0.000056" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(nothing, &quot; &quot;)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$split(nothing, " ")'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1911" name="function-split.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1938075224" result="Passed" start-time="2024-02-19T13:49:38.6842072Z" end-time="2024-02-19T13:49:38.6850760Z" duration="0.000869" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;, -3)';&#xA; result: error D3020" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3020.
Actually thrown D3020.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ", -3)'
]]></output>
                </test-case>
                <test-case id="0-1912" name="function-split.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="151214861" result="Passed" start-time="2024-02-19T13:49:38.6850883Z" end-time="2024-02-19T13:49:38.6855852Z" duration="0.000497" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;, null)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ", null)'
]]></output>
                </test-case>
                <test-case id="0-1913" name="function-split.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="850696285" result="Passed" start-time="2024-02-19T13:49:38.6855962Z" end-time="2024-02-19T13:49:38.6863079Z" duration="0.000712" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;, -5)';&#xA; result: error D3020" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3020.
Actually thrown D3020.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ", -5)'
]]></output>
                </test-case>
                <test-case id="0-1914" name="function-split.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1754487566" result="Passed" start-time="2024-02-19T13:49:38.6863219Z" end-time="2024-02-19T13:49:38.6868054Z" duration="0.000484" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, &quot;, &quot;, &quot;2&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$split("a, b, c, d", ", ", "2")'
]]></output>
                </test-case>
                <test-case id="0-1915" name="function-split.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="586054235" result="Passed" start-time="2024-02-19T13:49:38.6868196Z" end-time="2024-02-19T13:49:38.6874987Z" duration="0.000679" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;a, b, c, d&quot;, true)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$split("a, b, c, d", true)'
]]></output>
                </test-case>
                <test-case id="0-1916" name="function-split.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1558658873" result="Passed" start-time="2024-02-19T13:49:38.6875114Z" end-time="2024-02-19T13:49:38.6880309Z" duration="0.000520" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$split(12345, 3)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$split(12345, 3)'
]]></output>
                </test-case>
                <test-case id="0-1917" name="function-split.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="311460343" result="Passed" start-time="2024-02-19T13:49:38.6880440Z" end-time="2024-02-19T13:49:38.6887896Z" duration="0.000746" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$split(12345)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$split(12345)'
]]></output>
                </test-case>
                <test-case id="0-1918" name="function-split.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-split.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="691332131" result="Passed" start-time="2024-02-19T13:49:38.6888104Z" end-time="2024-02-19T13:49:38.6890079Z" duration="0.000198" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split('12💩345💩6', '💩')';&#xA; result: [&quot;12&quot;,&quot;345&quot;,&quot;6&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split('12💩345💩6', '💩')'
Result: '["12","345","6"]'
Expected: '["12","345","6"]'
]]></output>
                </test-case>
                <test-case id="0-1919" name="function-spread.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-spread.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1482860363" result="Passed" start-time="2024-02-19T13:49:38.6890215Z" end-time="2024-02-19T13:49:38.6911573Z" duration="0.002136" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$spread(&quot;Hello World&quot;)';&#xA; result: &quot;Hello World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$spread("Hello World")'
Result: '"Hello World"'
Expected: '"Hello World"'
]]></output>
                </test-case>
                <test-case id="0-1920" name="function-spread.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-spread.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="436730519" result="Passed" start-time="2024-02-19T13:49:38.6911854Z" end-time="2024-02-19T13:49:38.6914673Z" duration="0.000282" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$spread((Account.Order.Product.Description))';&#xA; result: [{&quot;Colour&quot;:&quot;Purple&quot;},{&quot;Width&quot;:300},{&quot;Height&quot;:200},{&quot;Depth&quot;:210},{&quot;Weight&quot;:0.75},{&quot;Colour&quot;:&quot;Orange&quot;},{&quot;Width&quot;:300},{&quot;Height&quot;:200},{&quot;Depth&quot;:210},{&quot;Weight&quot;:0.6},{&quot;Colour&quot;:&quot;Purple&quot;},{&quot;Width&quot;:300},{&quot;Height&quot;:200},{&quot;Depth&quot;:210},{&quot;Weight&quot;:0.75},{&quot;Colour&quot;:&quot;Black&quot;},{&quot;Width&quot;:30},{&quot;Height&quot;:20},{&quot;Depth&quot;:210},{&quot;Weight&quot;:2}]" />
                  </properties>
                  <output><![CDATA[Expr is '$spread((Account.Order.Product.Description))'
Result: '[{"Colour":"Purple"},{"Width":300},{"Height":200},{"Depth":210},{"Weight":0.75},{"Colour":"Orange"},{"Width":300},{"Height":200},{"Depth":210},{"Weight":0.6},{"Colour":"Purple"},{"Width":300},{"Height":200},{"Depth":210},{"Weight":0.75},{"Colour":"Black"},{"Width":30},{"Height":20},{"Depth":210},{"Weight":2}]'
Expected: '[{"Colour":"Purple"},{"Width":300},{"Height":200},{"Depth":210},{"Weight":0.75},{"Colour":"Orange"},{"Width":300},{"Height":200},{"Depth":210},{"Weight":0.6},{"Colour":"Purple"},{"Width":300},{"Height":200},{"Depth":210},{"Weight":0.75},{"Colour":"Black"},{"Width":30},{"Height":20},{"Depth":210},{"Weight":2}]'
]]></output>
                </test-case>
                <test-case id="0-1921" name="function-spread.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-spread.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="287098450" result="Passed" start-time="2024-02-19T13:49:38.6914808Z" end-time="2024-02-19T13:49:38.6915934Z" duration="0.000113" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$spread(blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$spread(blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1922" name="function-spread.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-spread.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="25903943" result="Passed" start-time="2024-02-19T13:49:38.6916026Z" end-time="2024-02-19T13:49:38.6916877Z" duration="0.000085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string($spread(function($x){$x*$x}))';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string($spread(function($x){$x*$x}))'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1923" name="function-sqrt.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sqrt.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1500333957" result="Passed" start-time="2024-02-19T13:49:38.6916949Z" end-time="2024-02-19T13:49:38.6919469Z" duration="0.000252" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sqrt(4)';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '$sqrt(4)'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-1924" name="function-sqrt.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sqrt.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1666876117" result="Passed" start-time="2024-02-19T13:49:38.6919588Z" end-time="2024-02-19T13:49:38.6920589Z" duration="0.000100" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sqrt(2)';&#xA; result: 1.4142135623730951" />
                  </properties>
                  <output><![CDATA[Expr is '$sqrt(2)'
Result: '1.4142135623731'
Expected: '1.4142135623730951'
]]></output>
                </test-case>
                <test-case id="0-1925" name="function-sqrt.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sqrt.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="993457536" result="Passed" start-time="2024-02-19T13:49:38.6920683Z" end-time="2024-02-19T13:49:38.6921206Z" duration="0.000052" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sqrt(nothing)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$sqrt(nothing)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1926" name="function-sqrt.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sqrt.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="282215906" result="Passed" start-time="2024-02-19T13:49:38.6921269Z" end-time="2024-02-19T13:49:38.6926910Z" duration="0.000564" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$sqrt(-2)';&#xA; result: error D3060" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3060.
Actually thrown D3030.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$sqrt(-2)'
]]></output>
                </test-case>
                <test-case id="0-1927" name="function-string.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1964551173" result="Passed" start-time="2024-02-19T13:49:38.6927020Z" end-time="2024-02-19T13:49:38.6927815Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(5)';&#xA; result: &quot;5&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(5)'
Result: '"5"'
Expected: '"5"'
]]></output>
                </test-case>
                <test-case id="0-1928" name="function-string.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="564674629" result="Passed" start-time="2024-02-19T13:49:38.6927888Z" end-time="2024-02-19T13:49:38.6928575Z" duration="0.000069" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(22/7)';&#xA; result: &quot;3.14285714285714&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(22/7)'
Result: '"3.14285714285714"'
Expected: '"3.14285714285714"'
]]></output>
                </test-case>
                <test-case id="0-1929" name="function-string.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="676076478" result="Passed" start-time="2024-02-19T13:49:38.6928644Z" end-time="2024-02-19T13:49:38.6929759Z" duration="0.000112" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(1e100)';&#xA; result: &quot;1e+100&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(1e100)'
Result: '"1e+100"'
Expected: '"1e+100"'
]]></output>
                </test-case>
                <test-case id="0-1930" name="function-string.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="149082080" result="Failed" start-time="2024-02-19T13:49:38.6929837Z" end-time="2024-02-19T13:49:38.6938911Z" duration="0.000908" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(1e-100)';&#xA; result: &quot;1e-100&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1e-100"', got '"0"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$string(1e-100)'
Result: '"0"'
Expected: '"1e-100"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1e-100"', got '"0"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1931" name="function-string.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="848938129" result="Passed" start-time="2024-02-19T13:49:38.6939054Z" end-time="2024-02-19T13:49:38.6940063Z" duration="0.000101" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(1e-6)';&#xA; result: &quot;0.000001&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(1e-6)'
Result: '"0.000001"'
Expected: '"0.000001"'
]]></output>
                </test-case>
                <test-case id="0-1932" name="function-string.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="970648339" result="Failed" start-time="2024-02-19T13:49:38.6940154Z" end-time="2024-02-19T13:49:38.6947647Z" duration="0.000749" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(1e-7)';&#xA; result: &quot;1e-7&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1e-7"', got '"0.0000001"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$string(1e-7)'
Result: '"0.0000001"'
Expected: '"1e-7"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1e-7"', got '"0.0000001"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1933" name="function-string.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1955143939" result="Passed" start-time="2024-02-19T13:49:38.6947788Z" end-time="2024-02-19T13:49:38.6948803Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(1e20)';&#xA; result: &quot;100000000000000000000&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(1e20)'
Result: '"100000000000000000000"'
Expected: '"100000000000000000000"'
]]></output>
                </test-case>
                <test-case id="0-1934" name="function-string.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="555304946" result="Failed" start-time="2024-02-19T13:49:38.6948911Z" end-time="2024-02-19T13:49:38.6956289Z" duration="0.000738" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(1e21)';&#xA; result: &quot;1e+21&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"1e+21"', got '"1000000000000000000000"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$string(1e21)'
Result: '"1000000000000000000000"'
Expected: '"1e+21"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"1e+21"', got '"1000000000000000000000"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1935" name="function-string.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="488102309" result="Passed" start-time="2024-02-19T13:49:38.6956435Z" end-time="2024-02-19T13:49:38.6957883Z" duration="0.000145" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.$string($sum(Product.(Price* Quantity)))';&#xA; result: [&quot;90.57&quot;,&quot;245.79&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.$string($sum(Product.(Price* Quantity)))'
Result: '["90.57","245.79"]'
Expected: '["90.57","245.79"]'
]]></output>
                </test-case>
                <test-case id="0-1936" name="function-string.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="554694116" result="Passed" start-time="2024-02-19T13:49:38.6957971Z" end-time="2024-02-19T13:49:38.6958804Z" duration="0.000083" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(true)';&#xA; result: &quot;true&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(true)'
Result: '"true"'
Expected: '"true"'
]]></output>
                </test-case>
                <test-case id="0-1937" name="function-string.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1751572930" result="Passed" start-time="2024-02-19T13:49:38.6958897Z" end-time="2024-02-19T13:49:38.6960434Z" duration="0.000154" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(false)';&#xA; result: &quot;false&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(false)'
Result: '"false"'
Expected: '"false"'
]]></output>
                </test-case>
                <test-case id="0-1938" name="function-string.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="838768611" result="Passed" start-time="2024-02-19T13:49:38.6960556Z" end-time="2024-02-19T13:49:38.6961640Z" duration="0.000108" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(null)';&#xA; result: &quot;null&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(null)'
Result: '"null"'
Expected: '"null"'
]]></output>
                </test-case>
                <test-case id="0-1939" name="function-string.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2085954414" result="Passed" start-time="2024-02-19T13:49:38.6961756Z" end-time="2024-02-19T13:49:38.6962929Z" duration="0.000118" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$string(blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1940" name="function-string.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1760527658" result="Passed" start-time="2024-02-19T13:49:38.6963046Z" end-time="2024-02-19T13:49:38.6964106Z" duration="0.000106" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string($string)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string($string)'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1941" name="function-string.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1949800862" result="Passed" start-time="2024-02-19T13:49:38.6964199Z" end-time="2024-02-19T13:49:38.6965679Z" duration="0.000148" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(function(){true})';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(function(){true})'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1942" name="function-string.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="166331497" result="Passed" start-time="2024-02-19T13:49:38.6965774Z" end-time="2024-02-19T13:49:38.6966591Z" duration="0.000082" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string(function(){1})';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(function(){1})'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1943" name="function-string.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="247040841" result="Passed" start-time="2024-02-19T13:49:38.6966686Z" end-time="2024-02-19T13:49:38.6973222Z" duration="0.000654" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string({&quot;string&quot;: &quot;hello&quot;})';&#xA; result: &quot;{\&quot;string\&quot;:\&quot;hello\&quot;}&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string({"string": "hello"})'
Result: '"{\"string\":\"hello\"}"'
Expected: '"{\"string\":\"hello\"}"'
]]></output>
                </test-case>
                <test-case id="0-1944" name="function-string.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="981277376" result="Passed" start-time="2024-02-19T13:49:38.6973334Z" end-time="2024-02-19T13:49:38.6975934Z" duration="0.000260" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string([&quot;string&quot;, 5])';&#xA; result: &quot;[\&quot;string\&quot;,5]&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(["string", 5])'
Result: '"[\"string\",5]"'
Expected: '"[\"string\",5]"'
]]></output>
                </test-case>
                <test-case id="0-1945" name="function-string.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1908208005" result="Passed" start-time="2024-02-19T13:49:38.6976043Z" end-time="2024-02-19T13:49:38.6978294Z" duration="0.000225" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string({  &quot;string&quot;: &quot;hello&quot;,  &quot;number&quot;: 78.8 / 2,  &quot;null&quot;:null,  &quot;boolean&quot;: false,  &quot;function&quot;: $sum,  &quot;lambda&quot;: function(){true},  &quot;object&quot;: {    &quot;str&quot;: &quot;another&quot;,    &quot;lambda2&quot;: function($n){$n}  },  &quot;array&quot;: []})';&#xA; result: &quot;{\&quot;string\&quot;:\&quot;hello\&quot;,\&quot;number\&quot;:39.4,\&quot;null\&quot;:null,\&quot;boolean\&quot;:false,\&quot;function\&quot;:\&quot;\&quot;,\&quot;lambda\&quot;:\&quot;\&quot;,\&quot;object\&quot;:{\&quot;str\&quot;:\&quot;another\&quot;,\&quot;lambda2\&quot;:\&quot;\&quot;},\&quot;array\&quot;:[]}&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string({  "string": "hello",  "number": 78.8 / 2,  "null":null,  "boolean": false,  "function": $sum,  "lambda": function(){true},  "object": {    "str": "another",    "lambda2": function($n){$n}  },  "array": []})'
Result: '"{\"string\":\"hello\",\"number\":39.4,\"null\":null,\"boolean\":false,\"function\":\"\",\"lambda\":\"\",\"object\":{\"str\":\"another\",\"lambda2\":\"\"},\"array\":[]}"'
Expected: '"{\"string\":\"hello\",\"number\":39.4,\"null\":null,\"boolean\":false,\"function\":\"\",\"lambda\":\"\",\"object\":{\"str\":\"another\",\"lambda2\":\"\"},\"array\":[]}"'
]]></output>
                </test-case>
                <test-case id="0-1946" name="function-string.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="968019800" result="Passed" start-time="2024-02-19T13:49:38.6978423Z" end-time="2024-02-19T13:49:38.6983818Z" duration="0.000540" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$string(1/0)';&#xA; result: error D3001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3001.
Actually thrown S0102.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$string(1/0)'
]]></output>
                </test-case>
                <test-case id="0-1947" name="function-string.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1441213208" result="Passed" start-time="2024-02-19T13:49:38.6983928Z" end-time="2024-02-19T13:49:38.6989441Z" duration="0.000552" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$string({&quot;inf&quot;: 1/0})';&#xA; result: error D1001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D1001.
Actually thrown S0102.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$string({"inf": 1/0})'
]]></output>
                </test-case>
                <test-case id="0-1948" name="function-string.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="681555119" result="Passed" start-time="2024-02-19T13:49:38.6989586Z" end-time="2024-02-19T13:49:38.6998832Z" duration="0.000925" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$string(2,3)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$string(2,3)'
]]></output>
                </test-case>
                <test-case id="0-1949" name="function-string.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1564466071" result="Passed" start-time="2024-02-19T13:49:38.6998995Z" end-time="2024-02-19T13:49:38.7000747Z" duration="0.000175" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string()';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$string()'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1950" name="function-string.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="347011360" result="Passed" start-time="2024-02-19T13:49:38.7000885Z" end-time="2024-02-19T13:49:38.7001973Z" duration="0.000109" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string({&quot;string&quot;: &quot;hello&quot;}, false)';&#xA; result: &quot;{\&quot;string\&quot;:\&quot;hello\&quot;}&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string({"string": "hello"}, false)'
Result: '"{\"string\":\"hello\"}"'
Expected: '"{\"string\":\"hello\"}"'
]]></output>
                </test-case>
                <test-case id="0-1951" name="function-string.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="819266819" result="Passed" start-time="2024-02-19T13:49:38.7002080Z" end-time="2024-02-19T13:49:38.7011013Z" duration="0.000893" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string({&quot;string&quot;: &quot;hello&quot;}, true)';&#xA; result: &quot;{\n  \&quot;string\&quot;: \&quot;hello\&quot;\n}&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string({"string": "hello"}, true)'
Result: '"{\n  \"string\": \"hello\"\n}"'
Expected: '"{\n  \"string\": \"hello\"\n}"'
]]></output>
                </test-case>
                <test-case id="0-1952" name="function-string.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1042101339" result="Passed" start-time="2024-02-19T13:49:38.7011169Z" end-time="2024-02-19T13:49:38.7012607Z" duration="0.000144" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string([&quot;string&quot;, 5], false)';&#xA; result: &quot;[\&quot;string\&quot;,5]&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(["string", 5], false)'
Result: '"[\"string\",5]"'
Expected: '"[\"string\",5]"'
]]></output>
                </test-case>
                <test-case id="0-1953" name="function-string.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="615117796" result="Passed" start-time="2024-02-19T13:49:38.7012728Z" end-time="2024-02-19T13:49:38.7015608Z" duration="0.000288" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string([&quot;string&quot;, 5], true)';&#xA; result: &quot;[\n  \&quot;string\&quot;,\n  5\n]&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string(["string", 5], true)'
Result: '"[\n  \"string\",\n  5\n]"'
Expected: '"[\n  \"string\",\n  5\n]"'
]]></output>
                </test-case>
                <test-case id="0-1954" name="function-string.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2071336651" result="Passed" start-time="2024-02-19T13:49:38.7015743Z" end-time="2024-02-19T13:49:38.7018463Z" duration="0.000272" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string({  &quot;string&quot;: &quot;hello&quot;,  &quot;number&quot;: 78.8 / 2,  &quot;null&quot;:null,  &quot;boolean&quot;: false,  &quot;function&quot;: $sum,  &quot;lambda&quot;: function(){true},  &quot;object&quot;: {    &quot;str&quot;: &quot;another&quot;,    &quot;lambda2&quot;: function($n){$n}  },  &quot;array&quot;: []}, false)';&#xA; result: &quot;{\&quot;string\&quot;:\&quot;hello\&quot;,\&quot;number\&quot;:39.4,\&quot;null\&quot;:null,\&quot;boolean\&quot;:false,\&quot;function\&quot;:\&quot;\&quot;,\&quot;lambda\&quot;:\&quot;\&quot;,\&quot;object\&quot;:{\&quot;str\&quot;:\&quot;another\&quot;,\&quot;lambda2\&quot;:\&quot;\&quot;},\&quot;array\&quot;:[]}&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string({  "string": "hello",  "number": 78.8 / 2,  "null":null,  "boolean": false,  "function": $sum,  "lambda": function(){true},  "object": {    "str": "another",    "lambda2": function($n){$n}  },  "array": []}, false)'
Result: '"{\"string\":\"hello\",\"number\":39.4,\"null\":null,\"boolean\":false,\"function\":\"\",\"lambda\":\"\",\"object\":{\"str\":\"another\",\"lambda2\":\"\"},\"array\":[]}"'
Expected: '"{\"string\":\"hello\",\"number\":39.4,\"null\":null,\"boolean\":false,\"function\":\"\",\"lambda\":\"\",\"object\":{\"str\":\"another\",\"lambda2\":\"\"},\"array\":[]}"'
]]></output>
                </test-case>
                <test-case id="0-1955" name="function-string.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1045056373" result="Passed" start-time="2024-02-19T13:49:38.7018594Z" end-time="2024-02-19T13:49:38.7023853Z" duration="0.000526" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string({  &quot;string&quot;: &quot;hello&quot;,  &quot;number&quot;: 78.8 / 2,  &quot;null&quot;:null,  &quot;boolean&quot;: false,  &quot;function&quot;: $sum,  &quot;lambda&quot;: function(){true},  &quot;object&quot;: {    &quot;str&quot;: &quot;another&quot;,    &quot;lambda2&quot;: function($n){$n}  },  &quot;array&quot;: []}, true)';&#xA; result: &quot;{\n  \&quot;string\&quot;: \&quot;hello\&quot;,\n  \&quot;number\&quot;: 39.4,\n  \&quot;null\&quot;: null,\n  \&quot;boolean\&quot;: false,\n  \&quot;function\&quot;: \&quot;\&quot;,\n  \&quot;lambda\&quot;: \&quot;\&quot;,\n  \&quot;object\&quot;: {\n    \&quot;str\&quot;: \&quot;another\&quot;,\n    \&quot;lambda2\&quot;: \&quot;\&quot;\n  },\n  \&quot;array\&quot;: []\n}&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$string({  "string": "hello",  "number": 78.8 / 2,  "null":null,  "boolean": false,  "function": $sum,  "lambda": function(){true},  "object": {    "str": "another",    "lambda2": function($n){$n}  },  "array": []}, true)'
Result: '"{\n  \"string\": \"hello\",\n  \"number\": 39.4,\n  \"null\": null,\n  \"boolean\": false,\n  \"function\": \"\",\n  \"lambda\": \"\",\n  \"object\": {\n    \"str\": \"another\",\n    \"lambda2\": \"\"\n  },\n  \"array\": []\n}"'
Expected: '"{\n  \"string\": \"hello\",\n  \"number\": 39.4,\n  \"null\": null,\n  \"boolean\": false,\n  \"function\": \"\",\n  \"lambda\": \"\",\n  \"object\": {\n    \"str\": \"another\",\n    \"lambda2\": \"\"\n  },\n  \"array\": []\n}"'
]]></output>
                </test-case>
                <test-case id="0-1956" name="function-string.case029" fullname="Jsonata.Net.Native.TestSuite.Tests.function-string.case029" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1945718394" result="Failed" start-time="2024-02-19T13:49:38.7023973Z" end-time="2024-02-19T13:49:38.7035208Z" duration="0.001124" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$string()';&#xA; result: &quot;[4,true]&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"[4,true]"', got '"[[4,true]]"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$string()'
Result: '"[[4,true]]"'
Expected: '"[4,true]"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"[4,true]"', got '"[[4,true]]"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1957" name="function-substring.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2036543028" result="Passed" start-time="2024-02-19T13:49:38.7035435Z" end-time="2024-02-19T13:49:38.7036665Z" duration="0.000123" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, 0, 5)';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", 0, 5)'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-1958" name="function-substring.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="318428839" result="Passed" start-time="2024-02-19T13:49:38.7036757Z" end-time="2024-02-19T13:49:38.7037731Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, -5, 5)';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", -5, 5)'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-1959" name="function-substring.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2037691391" result="Passed" start-time="2024-02-19T13:49:38.7037819Z" end-time="2024-02-19T13:49:38.7038707Z" duration="0.000089" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, 6)';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", 6)'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-1960" name="function-substring.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1349136603" result="Passed" start-time="2024-02-19T13:49:38.7038791Z" end-time="2024-02-19T13:49:38.7039783Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(blah, 6)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$substring(blah, 6)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1961" name="function-substring.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="441932389" result="Failed" start-time="2024-02-19T13:49:38.7039875Z" end-time="2024-02-19T13:49:38.7047538Z" duration="0.000767" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring('𝄞💩', 0, 2)';&#xA; result: &quot;𝄞💩&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"𝄞💩"', got '"𝄞"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$substring('𝄞💩', 0, 2)'
Result: '"𝄞"'
Expected: '"𝄞💩"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"𝄞💩"', got '"𝄞"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1962" name="function-substring.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2050749956" result="Failed" start-time="2024-02-19T13:49:38.7047742Z" end-time="2024-02-19T13:49:38.7054975Z" duration="0.000723" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring('𝄞💩', 0, 1)';&#xA; result: &quot;𝄞&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"𝄞"', got '"\ud834"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$substring('𝄞💩', 0, 1)'
Result: '"\ud834"'
Expected: '"𝄞"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"𝄞"', got '"\ud834"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1963" name="function-substring.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1272736983" result="Failed" start-time="2024-02-19T13:49:38.7055287Z" end-time="2024-02-19T13:49:38.7066152Z" duration="0.001087" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring('𝄞💩', 1, 1)';&#xA; result: &quot;💩&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"💩"', got '"\udd1e"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$substring('𝄞💩', 1, 1)'
Result: '"\udd1e"'
Expected: '"💩"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"💩"', got '"\udd1e"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1964" name="function-substring.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1168879463" result="Passed" start-time="2024-02-19T13:49:38.7066352Z" end-time="2024-02-19T13:49:38.7067827Z" duration="0.000148" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, -5)';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", -5)'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-1965" name="function-substring.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="110503040" result="Passed" start-time="2024-02-19T13:49:38.7067935Z" end-time="2024-02-19T13:49:38.7068868Z" duration="0.000093" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, -5, 5)';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", -5, 5)'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-1966" name="function-substring.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="967426885" result="Passed" start-time="2024-02-19T13:49:38.7068955Z" end-time="2024-02-19T13:49:38.7070087Z" duration="0.000113" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, -5, 4)';&#xA; result: &quot;worl&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", -5, 4)'
Result: '"worl"'
Expected: '"worl"'
]]></output>
                </test-case>
                <test-case id="0-1967" name="function-substring.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="343554569" result="Passed" start-time="2024-02-19T13:49:38.7070207Z" end-time="2024-02-19T13:49:38.7071874Z" duration="0.000167" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, -5, 1)';&#xA; result: &quot;w&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", -5, 1)'
Result: '"w"'
Expected: '"w"'
]]></output>
                </test-case>
                <test-case id="0-1968" name="function-substring.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="295391339" result="Passed" start-time="2024-02-19T13:49:38.7071989Z" end-time="2024-02-19T13:49:38.7073060Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, -5, 0)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", -5, 0)'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1969" name="function-substring.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1266385257" result="Passed" start-time="2024-02-19T13:49:38.7073165Z" end-time="2024-02-19T13:49:38.7074229Z" duration="0.000106" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, -5, -1)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", -5, -1)'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1970" name="function-substring.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="31360119" result="Passed" start-time="2024-02-19T13:49:38.7074325Z" end-time="2024-02-19T13:49:38.7075281Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, 0, -6)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", 0, -6)'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1971" name="function-substring.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1954569590" result="Passed" start-time="2024-02-19T13:49:38.7075366Z" end-time="2024-02-19T13:49:38.7076691Z" duration="0.000133" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;hello world&quot;, -100, 3)';&#xA; result: &quot;hel&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("hello world", -100, 3)'
Result: '"hel"'
Expected: '"hel"'
]]></output>
                </test-case>
                <test-case id="0-1972" name="function-substring.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1620175379" result="Failed" start-time="2024-02-19T13:49:38.7076796Z" end-time="2024-02-19T13:49:38.7084058Z" duration="0.000726" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;😂😁😀&quot;, -2, 1)';&#xA; result: &quot;😁&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"😁"', got '"\ud83d"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$substring("😂😁😀", -2, 1)'
Result: '"\ud83d"'
Expected: '"😁"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"😁"', got '"\ud83d"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1973" name="function-substring.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="752861364" result="Failed" start-time="2024-02-19T13:49:38.7084198Z" end-time="2024-02-19T13:49:38.7093070Z" duration="0.000887" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;😂😁😀&quot;, -3, 1)';&#xA; result: &quot;😂&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"😂"', got '"\ude01"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$substring("😂😁😀", -3, 1)'
Result: '"\ude01"'
Expected: '"😂"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"😂"', got '"\ude01"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1974" name="function-substring.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1869816352" result="Failed" start-time="2024-02-19T13:49:38.7093213Z" end-time="2024-02-19T13:49:38.7101239Z" duration="0.000803" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;😂😁😀&quot;, -4, 1)';&#xA; result: &quot;😂&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"😂"', got '"\ud83d"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$substring("😂😁😀", -4, 1)'
Result: '"\ud83d"'
Expected: '"😂"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"😂"', got '"\ud83d"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1975" name="function-substring.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substring.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="634413304" result="Failed" start-time="2024-02-19T13:49:38.7101392Z" end-time="2024-02-19T13:49:38.7125141Z" duration="0.002375" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;😂😁😀&quot;, -5, 1)';&#xA; result: &quot;😂&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"😂"', got '"\ude02"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$substring("😂😁😀", -5, 1)'
Result: '"\ude02"'
Expected: '"😂"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"😂"', got '"\ude02"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1976" name="function-substringAfter.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="120766953" result="Passed" start-time="2024-02-19T13:49:38.7125352Z" end-time="2024-02-19T13:49:38.7127193Z" duration="0.000184" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;Hello World&quot;, &quot; &quot;)';&#xA; result: &quot;World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter("Hello World", " ")'
Result: '"World"'
Expected: '"World"'
]]></output>
                </test-case>
                <test-case id="0-1977" name="function-substringAfter.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1926346749" result="Passed" start-time="2024-02-19T13:49:38.7127318Z" end-time="2024-02-19T13:49:38.7128710Z" duration="0.000139" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;Hello World&quot;, &quot;l&quot;)';&#xA; result: &quot;lo World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter("Hello World", "l")'
Result: '"lo World"'
Expected: '"lo World"'
]]></output>
                </test-case>
                <test-case id="0-1978" name="function-substringAfter.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="519056581" result="Passed" start-time="2024-02-19T13:49:38.7128827Z" end-time="2024-02-19T13:49:38.7130979Z" duration="0.000215" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;Hello World&quot;, &quot;f&quot;)';&#xA; result: &quot;Hello World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter("Hello World", "f")'
Result: '"Hello World"'
Expected: '"Hello World"'
]]></output>
                </test-case>
                <test-case id="0-1979" name="function-substringAfter.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1906151759" result="Passed" start-time="2024-02-19T13:49:38.7131104Z" end-time="2024-02-19T13:49:38.7132162Z" duration="0.000106" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;Hello World&quot;, &quot;ld&quot;)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter("Hello World", "ld")'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1980" name="function-substringAfter.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringAfter.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="25437736" result="Passed" start-time="2024-02-19T13:49:38.7132274Z" end-time="2024-02-19T13:49:38.7133139Z" duration="0.000087" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(blah, &quot;ld&quot;)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter(blah, "ld")'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1981" name="function-substringBefore.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="988486345" result="Passed" start-time="2024-02-19T13:49:38.7133219Z" end-time="2024-02-19T13:49:38.7133974Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Hello World&quot;, &quot; &quot;)';&#xA; result: &quot;Hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("Hello World", " ")'
Result: '"Hello"'
Expected: '"Hello"'
]]></output>
                </test-case>
                <test-case id="0-1982" name="function-substringBefore.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1282996054" result="Passed" start-time="2024-02-19T13:49:38.7134043Z" end-time="2024-02-19T13:49:38.7135359Z" duration="0.000132" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Hello World&quot;, &quot;l&quot;)';&#xA; result: &quot;He&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("Hello World", "l")'
Result: '"He"'
Expected: '"He"'
]]></output>
                </test-case>
                <test-case id="0-1983" name="function-substringBefore.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1147692205" result="Passed" start-time="2024-02-19T13:49:38.7135463Z" end-time="2024-02-19T13:49:38.7136653Z" duration="0.000119" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Hello World&quot;, &quot;f&quot;)';&#xA; result: &quot;Hello World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("Hello World", "f")'
Result: '"Hello World"'
Expected: '"Hello World"'
]]></output>
                </test-case>
                <test-case id="0-1984" name="function-substringBefore.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="329065118" result="Passed" start-time="2024-02-19T13:49:38.7136757Z" end-time="2024-02-19T13:49:38.7137836Z" duration="0.000108" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Hello World&quot;, &quot;He&quot;)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("Hello World", "He")'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-1985" name="function-substringBefore.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-substringBefore.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1477298908" result="Passed" start-time="2024-02-19T13:49:38.7137927Z" end-time="2024-02-19T13:49:38.7138874Z" duration="0.000095" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(blah, &quot;He&quot;)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore(blah, "He")'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1986" name="function-sum.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sum.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1954320437" result="Passed" start-time="2024-02-19T13:49:38.7138978Z" end-time="2024-02-19T13:49:38.7140572Z" duration="0.000159" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sum(Account.Order.Product.(Price * Quantity))';&#xA; result: 336.36" />
                  </properties>
                  <output><![CDATA[Expr is '$sum(Account.Order.Product.(Price * Quantity))'
Result: '336.36'
Expected: '336.36'
]]></output>
                </test-case>
                <test-case id="0-1987" name="function-sum.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sum.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="355530543" result="Passed" start-time="2024-02-19T13:49:38.7140670Z" end-time="2024-02-19T13:49:38.7141939Z" duration="0.000127" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.$sum(Product.(Price * Quantity))';&#xA; result: [90.57000000000001,245.79000000000002]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.$sum(Product.(Price * Quantity))'
Result: '[90.57,245.79]'
Expected: '[90.57000000000001,245.79000000000002]'
]]></output>
                </test-case>
                <test-case id="0-1988" name="function-sum.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sum.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2031290935" result="Passed" start-time="2024-02-19T13:49:38.7142021Z" end-time="2024-02-19T13:49:38.7143323Z" duration="0.000130" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.(OrderID &amp; &quot;: &quot; &amp; $sum(Product.(Price*Quantity)))';&#xA; result: [&quot;order103: 90.57&quot;,&quot;order104: 245.79&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.(OrderID & ": " & $sum(Product.(Price*Quantity)))'
Result: '["order103: 90.57","order104: 245.79"]'
Expected: '["order103: 90.57","order104: 245.79"]'
]]></output>
                </test-case>
                <test-case id="0-1989" name="function-sum.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sum.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1657732220" result="Passed" start-time="2024-02-19T13:49:38.7143439Z" end-time="2024-02-19T13:49:38.7149661Z" duration="0.000622" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$sum()';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$sum()'
]]></output>
                </test-case>
                <test-case id="0-1990" name="function-sum.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sum.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="689867562" result="Passed" start-time="2024-02-19T13:49:38.7149897Z" end-time="2024-02-19T13:49:38.7150893Z" duration="0.000100" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sum(1)';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '$sum(1)'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-1991" name="function-sum.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sum.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="665634735" result="Passed" start-time="2024-02-19T13:49:38.7151008Z" end-time="2024-02-19T13:49:38.7157969Z" duration="0.000696" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$sum(Account.Order)';&#xA; result: error T0412" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0412.
Actually thrown T0412.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$sum(Account.Order)'
]]></output>
                </test-case>
                <test-case id="0-1992" name="function-sum.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-sum.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1433144091" result="Passed" start-time="2024-02-19T13:49:38.7158087Z" end-time="2024-02-19T13:49:38.7158771Z" duration="0.000069" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$sum(undefined)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$sum(undefined)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-1993" name="function-tomillis.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="948560867" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7158843Z" end-time="2024-02-19T13:49:38.7168292Z" duration="0.000945" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(&quot;1970-01-01T00:00:00.001Z&quot;)';&#xA; result: 1" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '1970-01-01T00:00:00.001Z']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$toMillis("1970-01-01T00:00:00.001Z")'
]]></output>
                </test-case>
                <test-case id="0-1994" name="function-tomillis.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="736817811" result="Passed" start-time="2024-02-19T13:49:38.7168610Z" end-time="2024-02-19T13:49:38.7170564Z" duration="0.000195" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(&quot;2018-02-01T09:42:13.123+0000&quot;)';&#xA; result: 1517478133123" />
                  </properties>
                  <output><![CDATA[Expr is '$toMillis("2018-02-01T09:42:13.123+0000")'
Result: '1517478133123'
Expected: '1517478133123'
]]></output>
                </test-case>
                <test-case id="0-1995" name="function-tomillis.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1318595269" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7170687Z" end-time="2024-02-19T13:49:38.7178097Z" duration="0.000741" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(&quot;2017-10-30&quot;)';&#xA; result: 1509321600000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2017-10-30']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$toMillis("2017-10-30")'
]]></output>
                </test-case>
                <test-case id="0-1996" name="function-tomillis.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2046534553" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7178235Z" end-time="2024-02-19T13:49:38.7185530Z" duration="0.000730" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(&quot;2017-10-30T15:28:34Z&quot;)';&#xA; result: 1509377314000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2017-10-30T15:28:34Z']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$toMillis("2017-10-30T15:28:34Z")'
]]></output>
                </test-case>
                <test-case id="0-1997" name="function-tomillis.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1041078161" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7185680Z" end-time="2024-02-19T13:49:38.7194160Z" duration="0.000848" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(&quot;2018&quot;)';&#xA; result: 1514764800000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2018']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$toMillis("2018")'
]]></output>
                </test-case>
                <test-case id="0-1998" name="function-tomillis.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1225645025" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7194330Z" end-time="2024-02-19T13:49:38.7202844Z" duration="0.000852" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(foo)';&#xA; result: undefined" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : T0410: Argument 1 ('timestamp') of function toMillis should be String but incompatible value of type Undefined was specified]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.ConvertFunctionArg(Int32 parameterIndex, JToken argToken, ArgumentInfo argumentInfo, Boolean& returnUndefined) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 308
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.TryBindFunctionArguments(List`1 args, JToken context, EvaluationEnvironment env, Boolean& returnUndefined) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 194
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.BindFunctionArguments(List`1 args, JToken context, EvaluationEnvironment env, Boolean& returnUndefined) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 130
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$toMillis(foo)'
]]></output>
                </test-case>
                <test-case id="0-1999" name="function-tomillis.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="870774336" result="Passed" start-time="2024-02-19T13:49:38.7203019Z" end-time="2024-02-19T13:49:38.7208870Z" duration="0.000585" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(&quot;foo&quot;)';&#xA; result: error D3110" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3110.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$toMillis("foo")'
]]></output>
                </test-case>
                <test-case id="0-2000" name="function-tomillis.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="940781120" result="Passed" start-time="2024-02-19T13:49:38.7209031Z" end-time="2024-02-19T13:49:38.7214466Z" duration="0.000544" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(&quot;01-02-2018&quot;)';&#xA; result: error D3110" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3110.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$toMillis("01-02-2018")'
]]></output>
                </test-case>
                <test-case id="0-2001" name="function-tomillis.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="624465231" result="Passed" start-time="2024-02-19T13:49:38.7214568Z" end-time="2024-02-19T13:49:38.7219755Z" duration="0.000519" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(&quot;2018-02-03 11:15:33&quot;)';&#xA; result: error D3110" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3110.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$toMillis("2018-02-03 11:15:33")'
]]></output>
                </test-case>
                <test-case id="0-2002" name="function-tomillis.parseDateTime[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1145821869" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7219877Z" end-time="2024-02-19T13:49:38.7224097Z" duration="0.000422" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis(undefined, 'pic')';&#xA; result: undefined" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : T0410: Argument 1 ('timestamp') of function toMillis should be String but incompatible value of type Undefined was specified]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.ConvertFunctionArg(Int32 parameterIndex, JToken argToken, ArgumentInfo argumentInfo, Boolean& returnUndefined) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 308
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.TryBindFunctionArguments(List`1 args, JToken context, EvaluationEnvironment env, Boolean& returnUndefined) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 194
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.BindFunctionArguments(List`1 args, JToken context, EvaluationEnvironment env, Boolean& returnUndefined) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 130
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 99
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should return undefined'
Expr is '$toMillis(undefined, 'pic')'
]]></output>
                </test-case>
                <test-case id="0-2003" name="function-tomillis.parseDateTime[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1562653509" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7224275Z" end-time="2024-02-19T13:49:38.7230891Z" duration="0.000662" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('Hello', 'Hello')';&#xA; result: undefined" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'Hello']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse string literal'
Expr is '$toMillis('Hello', 'Hello')'
]]></output>
                </test-case>
                <test-case id="0-2004" name="function-tomillis.parseDateTime[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1533105952" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7231064Z" end-time="2024-02-19T13:49:38.7236013Z" duration="0.000495" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018', '[Y1]')';&#xA; result: 1514764800000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2018']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year'
Expr is '$toMillis('2018', '[Y1]')'
]]></output>
                </test-case>
                <test-case id="0-2005" name="function-tomillis.parseDateTime[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="539925417" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7236550Z" end-time="2024-02-19T13:49:38.7243111Z" duration="0.000656" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-03-27', '[Y1]-[M01]-[D01]')';&#xA; result: 1522108800000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2018-03-27']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('2018-03-27', '[Y1]-[M01]-[D01]')'
]]></output>
                </test-case>
                <test-case id="0-2006" name="function-tomillis.parseDateTime[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1346575087" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7243291Z" end-time="2024-02-19T13:49:38.7249689Z" duration="0.000640" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-03-27T14:03:00.123Z', '[Y0001]-[M01]-[D01]T[H01]:[m01]:[s01].[f001]Z')';&#xA; result: 1522159380123" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2018-03-27T14:03:00.123Z']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse ISO 8601 format'
Expr is '$toMillis('2018-03-27T14:03:00.123Z', '[Y0001]-[M01]-[D01]T[H01]:[m01]:[s01].[f001]Z')'
]]></output>
                </test-case>
                <test-case id="0-2007" name="function-tomillis.parseDateTime[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="289239975" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7249911Z" end-time="2024-02-19T13:49:38.7256325Z" duration="0.000642" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('27th 3 1976', '[D1o] [M#1] [Y0001]')';&#xA; result: 196732800000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '27th 3 1976']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('27th 3 1976', '[D1o] [M#1] [Y0001]')'
]]></output>
                </test-case>
                <test-case id="0-2008" name="function-tomillis.parseDateTime[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="892785091" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7256515Z" end-time="2024-02-19T13:49:38.7262207Z" duration="0.000569" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('21st 12 1881', '[D1o] [M01] [Y0001]')';&#xA; result: -2777932800000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '21st 12 1881']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('21st 12 1881', '[D1o] [M01] [Y0001]')'
]]></output>
                </test-case>
                <test-case id="0-2009" name="function-tomillis.parseDateTime[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1436923347" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7262419Z" end-time="2024-02-19T13:49:38.7268203Z" duration="0.000579" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2nd 12 2012', '[D1o] [M01] [Y0001]')';&#xA; result: 1354406400000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2nd 12 2012']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('2nd 12 2012', '[D1o] [M01] [Y0001]')'
]]></output>
                </test-case>
                <test-case id="0-2010" name="function-tomillis.parseDateTime[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="924289420" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7268340Z" end-time="2024-02-19T13:49:38.7274321Z" duration="0.000598" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('MCMLXXXIV', '[YI]')';&#xA; result: 441763200000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'MCMLXXXIV']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year'
Expr is '$toMillis('MCMLXXXIV', '[YI]')'
]]></output>
                </test-case>
                <test-case id="0-2011" name="function-tomillis.parseDateTime[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="19371645" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7274470Z" end-time="2024-02-19T13:49:38.7280665Z" duration="0.000620" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('27 03 MMXVIII', '[D1] [M01] [YI]')';&#xA; result: 1522108800000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '27 03 MMXVIII']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('27 03 MMXVIII', '[D1] [M01] [YI]')'
]]></output>
                </test-case>
                <test-case id="0-2012" name="function-tomillis.parseDateTime[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1517486447" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7280807Z" end-time="2024-02-19T13:49:38.7287359Z" duration="0.000655" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('27 iii MMXVIII', '[D1] [Mi] [YI]')';&#xA; result: 1522108800000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '27 iii MMXVIII']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('27 iii MMXVIII', '[D1] [Mi] [YI]')'
]]></output>
                </test-case>
                <test-case id="0-2013" name="function-tomillis.parseDateTime[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="559760727" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7287566Z" end-time="2024-02-19T13:49:38.7294910Z" duration="0.000735" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('w C mmxviii', '[Da] [MA] [Yi]')';&#xA; result: 1521763200000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'w C mmxviii']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'day/month in letters, year in roman numerals'
Expr is '$toMillis('w C mmxviii', '[Da] [MA] [Yi]')'
]]></output>
                </test-case>
                <test-case id="0-2014" name="function-tomillis.parseDateTime[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2012253655" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7295118Z" end-time="2024-02-19T13:49:38.7301453Z" duration="0.000633" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('ae C mmxviii', '[Da] [MA] [Yi]')';&#xA; result: 1522454400000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'ae C mmxviii']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'day/month in letters, year in roman numerals'
Expr is '$toMillis('ae C mmxviii', '[Da] [MA] [Yi]')'
]]></output>
                </test-case>
                <test-case id="0-2015" name="function-tomillis.parseDateTime[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="360650258" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7301737Z" end-time="2024-02-19T13:49:38.7307735Z" duration="0.000600" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('27th April 2008', '[D1o] [MNn] [Y0001]')';&#xA; result: 1209254400000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '27th April 2008']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('27th April 2008', '[D1o] [MNn] [Y0001]')'
]]></output>
                </test-case>
                <test-case id="0-2016" name="function-tomillis.parseDateTime[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1306419982" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7307930Z" end-time="2024-02-19T13:49:38.7314302Z" duration="0.000637" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('21 August 2017', '[D1] [MNn] [Y0001]')';&#xA; result: 1503273600000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '21 August 2017']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('21 August 2017', '[D1] [MNn] [Y0001]')'
]]></output>
                </test-case>
                <test-case id="0-2017" name="function-tomillis.parseDateTime[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="903057751" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7314459Z" end-time="2024-02-19T13:49:38.7319737Z" duration="0.000528" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2 Feb 2012', '[D1] [MNn,3-3] [Y0001]')';&#xA; result: 1328140800000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2 Feb 2012']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year/month/day'
Expr is '$toMillis('2 Feb 2012', '[D1] [MNn,3-3] [Y0001]')'
]]></output>
                </test-case>
                <test-case id="0-2018" name="function-tomillis.parseDateTime[17]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[17]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="943671865" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7319931Z" end-time="2024-02-19T13:49:38.7326292Z" duration="0.000636" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('one thousand, nine hundred and eighty-four', '[Yw]')';&#xA; result: 441763200000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'one thousand, nine hundred and eighty-four']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year in words'
Expr is '$toMillis('one thousand, nine hundred and eighty-four', '[Yw]')'
]]></output>
                </test-case>
                <test-case id="0-2019" name="function-tomillis.parseDateTime[18]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[18]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1839064202" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7326417Z" end-time="2024-02-19T13:49:38.7331032Z" duration="0.000462" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('nineteen hundred and eighty-four', '[Yw]')';&#xA; result: 441763200000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'nineteen hundred and eighty-four']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse year in words'
Expr is '$toMillis('nineteen hundred and eighty-four', '[Yw]')'
]]></output>
                </test-case>
                <test-case id="0-2020" name="function-tomillis.parseDateTime[19]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[19]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="303666250" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7331170Z" end-time="2024-02-19T13:49:38.7335007Z" duration="0.000384" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('twenty-seven April 2008', '[Dw] [MNn] [Y0001]')';&#xA; result: 1209254400000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'twenty-seven April 2008']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse date/month in words'
Expr is '$toMillis('twenty-seven April 2008', '[Dw] [MNn] [Y0001]')'
]]></output>
                </test-case>
                <test-case id="0-2021" name="function-tomillis.parseDateTime[20]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[20]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="611896342" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7335108Z" end-time="2024-02-19T13:49:38.7356333Z" duration="0.002123" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('twenty-seventh April 2008', '[Dw] [MNn] [Y0001]')';&#xA; result: 1209254400000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'twenty-seventh April 2008']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse date/month in ordinal words'
Expr is '$toMillis('twenty-seventh April 2008', '[Dw] [MNn] [Y0001]')'
]]></output>
                </test-case>
                <test-case id="0-2022" name="function-tomillis.parseDateTime[21]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[21]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="459747281" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7356452Z" end-time="2024-02-19T13:49:38.7360962Z" duration="0.000451" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('twenty-first August two thousand and seventeen', '[Dw] [MNn] [Yw]')';&#xA; result: 1503273600000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'twenty-first August two thousand and seventeen']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse ordinal date/month/year'
Expr is '$toMillis('twenty-first August two thousand and seventeen', '[Dw] [MNn] [Yw]')'
]]></output>
                </test-case>
                <test-case id="0-2023" name="function-tomillis.parseDateTime[22]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[22]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="785142766" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7361079Z" end-time="2024-02-19T13:49:38.7366964Z" duration="0.000589" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('TWENTY-SECOND August two thousand and seventeen', '[DW] [MNn] [Yw]')';&#xA; result: 1503360000000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'TWENTY-SECOND August two thousand and seventeen']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse ordinal date/month/year'
Expr is '$toMillis('TWENTY-SECOND August two thousand and seventeen', '[DW] [MNn] [Yw]')'
]]></output>
                </test-case>
                <test-case id="0-2024" name="function-tomillis.parseDateTime[23]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[23]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="576517695" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7367085Z" end-time="2024-02-19T13:49:38.7373046Z" duration="0.000596" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('Twentieth of August, two thousand and seventeen', '[DW] of [MNn], [Yw]')';&#xA; result: 1503187200000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'Twentieth of August, two thousand and seventeen']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse ordinal date/month/year'
Expr is '$toMillis('Twentieth of August, two thousand and seventeen', '[DW] of [MNn], [Yw]')'
]]></output>
                </test-case>
                <test-case id="0-2025" name="function-tomillis.parseDateTime[24]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[24]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1513209031" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7373206Z" end-time="2024-02-19T13:49:38.7379145Z" duration="0.000594" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('4/4/2018 12:06 am', '[D1]/[M1]/[Y0001] [h]:[m] [P]')';&#xA; result: 1522800360000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '4/4/2018 12:06 am']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'just after midnight'
Expr is '$toMillis('4/4/2018 12:06 am', '[D1]/[M1]/[Y0001] [h]:[m] [P]')'
]]></output>
                </test-case>
                <test-case id="0-2026" name="function-tomillis.parseDateTime[25]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[25]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="521425499" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7379343Z" end-time="2024-02-19T13:49:38.7385228Z" duration="0.000589" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('4/4/2018 06:30 am', '[D1]/[M1]/[Y0001] [h]:[m] [P]')';&#xA; result: 1522823400000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '4/4/2018 06:30 am']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'breakfast time'
Expr is '$toMillis('4/4/2018 06:30 am', '[D1]/[M1]/[Y0001] [h]:[m] [P]')'
]]></output>
                </test-case>
                <test-case id="0-2027" name="function-tomillis.parseDateTime[26]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[26]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="671614512" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7385395Z" end-time="2024-02-19T13:49:38.7391793Z" duration="0.000640" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('4/4/2018 12:06 pm', '[D1]/[M1]/[Y0001] [h]:[m] [P]')';&#xA; result: 1522843560000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '4/4/2018 12:06 pm']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'just after midday'
Expr is '$toMillis('4/4/2018 12:06 pm', '[D1]/[M1]/[Y0001] [h]:[m] [P]')'
]]></output>
                </test-case>
                <test-case id="0-2028" name="function-tomillis.parseDateTime[27]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[27]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="16043553" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7391943Z" end-time="2024-02-19T13:49:38.7396570Z" duration="0.000463" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('4/4/2018 11:30 pm', '[D1]/[M1]/[Y0001] [h]:[m] [P]')';&#xA; result: 1522884600000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '4/4/2018 11:30 pm']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'just before midnight'
Expr is '$toMillis('4/4/2018 11:30 pm', '[D1]/[M1]/[Y0001] [h]:[m] [P]')'
]]></output>
                </test-case>
                <test-case id="0-2029" name="function-tomillis.parseDateTime[28]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[28]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="551221083" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7396682Z" end-time="2024-02-19T13:49:38.7402129Z" duration="0.000545" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-094', '[Y0001]-[d001]')';&#xA; result: 1522800000000" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2018-094']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'ordinal date: day 94 of the year 2018'
Expr is '$toMillis('2018-094', '[Y0001]-[d001]')'
]]></output>
                </test-case>
                <test-case id="0-2030" name="function-tomillis.parseDateTime[29]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[29]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="735362398" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7402261Z" end-time="2024-02-19T13:49:38.7408409Z" duration="0.000615" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('13:45', '[H]:[m]') ~&gt; $fromMillis() ~&gt; $substringBefore('T') = $substringBefore($now(), 'T')';&#xA; result: true" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '13:45']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 319
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 119
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 319
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 119
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalComparisonOperator(ComparisonOperatorNode comparisonOperatorNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 646
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 123
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'time only defaults to todays date'
Expr is '$toMillis('13:45', '[H]:[m]') ~> $fromMillis() ~> $substringBefore('T') = $substringBefore($now(), 'T')'
]]></output>
                </test-case>
                <test-case id="0-2031" name="function-tomillis.parseDateTime[30]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[30]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1227172439" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7408533Z" end-time="2024-02-19T13:49:38.7414171Z" duration="0.000564" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('13:45', '[H]:[m]') ~&gt; $fromMillis() ~&gt; $substringAfter('T')';&#xA; result: &quot;13:45:00.000Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '13:45']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 319
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 119
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 319
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 119
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'hours/minutes only defaults seconds to zero'
Expr is '$toMillis('13:45', '[H]:[m]') ~> $fromMillis() ~> $substringAfter('T')'
]]></output>
                </test-case>
                <test-case id="0-2032" name="function-tomillis.parseDateTime[31]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[31]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="700701724" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7414292Z" end-time="2024-02-19T13:49:38.7421486Z" duration="0.000720" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('Wednesday, 14th November 2018', '[FNn], [D1o] [MNn] [Y]') ~&gt; $fromMillis()';&#xA; result: &quot;2018-11-14T00:00:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'Wednesday, 14th November 2018']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 319
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 119
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'date only defaults time to midnight'
Expr is '$toMillis('Wednesday, 14th November 2018', '[FNn], [D1o] [MNn] [Y]') ~> $fromMillis()'
]]></output>
                </test-case>
                <test-case id="0-2033" name="function-tomillis.parseDateTime[32]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[32]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1795765892" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7421641Z" end-time="2024-02-19T13:49:38.7429131Z" duration="0.000749" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('Mon, Twelfth November 2018', '[FNn,*-3], [DWwo] [MNn] [Y]') ~&gt; $fromMillis()';&#xA; result: &quot;2018-11-12T00:00:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'Mon, Twelfth November 2018']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 319
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 119
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'date only defaults time to midnight'
Expr is '$toMillis('Mon, Twelfth November 2018', '[FNn,*-3], [DWwo] [MNn] [Y]') ~> $fromMillis()'
]]></output>
                </test-case>
                <test-case id="0-2034" name="function-tomillis.parseDateTime[33]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[33]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="965370639" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7429276Z" end-time="2024-02-19T13:49:38.7435683Z" duration="0.000641" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018--180', '[Y]--[d]') ~&gt; $fromMillis()';&#xA; result: &quot;2018-06-29T00:00:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2018--180']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 319
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 119
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '180th day of 2018 is 29th June'
Expr is '$toMillis('2018--180', '[Y]--[d]') ~> $fromMillis()'
]]></output>
                </test-case>
                <test-case id="0-2035" name="function-tomillis.parseDateTime[34]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[34]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1548456152" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7435889Z" end-time="2024-02-19T13:49:38.7441154Z" duration="0.000527" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('three hundred and sixty-fifth day of 2018', '[dwo] day of [Y]') ~&gt; $fromMillis()';&#xA; result: &quot;2018-12-31T00:00:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'three hundred and sixty-fifth day of 2018']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 319
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 119
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: '365th day of 2018 is 31st December'
Expr is '$toMillis('three hundred and sixty-fifth day of 2018', '[dwo] day of [Y]') ~> $fromMillis()'
]]></output>
                </test-case>
                <test-case id="0-2036" name="function-tomillis.parseDateTime[35]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[35]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1990148123" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7441328Z" end-time="2024-02-19T13:49:38.7445629Z" duration="0.000430" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('irrelevent string', '[Y]-[M]-[D]')';&#xA; result: undefined" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from 'irrelevent string']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'parsing a non-date string returns undefined'
Expr is '$toMillis('irrelevent string', '[Y]-[M]-[D]')'
]]></output>
                </test-case>
                <test-case id="0-2037" name="function-tomillis.parseDateTime[36]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[36]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1867826192" result="Passed" start-time="2024-02-19T13:49:38.7445766Z" end-time="2024-02-19T13:49:38.7451505Z" duration="0.000574" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-05-22', '[Y]-[M]-[q]')';&#xA; result: error D3132" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3132.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Description: 'picture string contains an unknown component'
Expr is '$toMillis('2018-05-22', '[Y]-[M]-[q]')'
]]></output>
                </test-case>
                <test-case id="0-2038" name="function-tomillis.parseDateTime[37]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[37]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1762069900" result="Passed" start-time="2024-02-19T13:49:38.7451642Z" end-time="2024-02-19T13:49:38.7457137Z" duration="0.000550" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-05-22', '[YN]-[M]-[D]')';&#xA; result: error D3133" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3133.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Description: 'picture string contains a named year'
Expr is '$toMillis('2018-05-22', '[YN]-[M]-[D]')'
]]></output>
                </test-case>
                <test-case id="0-2039" name="function-tomillis.parseDateTime[38]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[38]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1936623348" result="Passed" start-time="2024-02-19T13:49:38.7457295Z" end-time="2024-02-19T13:49:38.7464697Z" duration="0.000740" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-22', '[Y]-[D]')';&#xA; result: error D3136" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3136.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Description: 'year/date with no month'
Expr is '$toMillis('2018-22', '[Y]-[D]')'
]]></output>
                </test-case>
                <test-case id="0-2040" name="function-tomillis.parseDateTime[39]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[39]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="130723821" result="Passed" start-time="2024-02-19T13:49:38.7464957Z" end-time="2024-02-19T13:49:38.7472319Z" duration="0.000736" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('5-22 23:59', '[M]-[D] [m]:[s]')';&#xA; result: error D3136" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3136.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Description: 'month/date, min/sec with no hours'
Expr is '$toMillis('5-22 23:59', '[M]-[D] [m]:[s]')'
]]></output>
                </test-case>
                <test-case id="0-2041" name="function-tomillis.parseDateTime[40]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[40]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1665080462" result="Passed" start-time="2024-02-19T13:49:38.7472550Z" end-time="2024-02-19T13:49:38.7479782Z" duration="0.000723" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-3-2-5', '[X]-[x]-[w]-[F1]')';&#xA; result: error D3136" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3136.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Description: 'currently no support for year/month-of-year/week-of-month/day-of-week'
Expr is '$toMillis('2018-3-2-5', '[X]-[x]-[w]-[F1]')'
]]></output>
                </test-case>
                <test-case id="0-2042" name="function-tomillis.parseDateTime[41]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[41]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1610229099" result="Passed" start-time="2024-02-19T13:49:38.7479999Z" end-time="2024-02-19T13:49:38.7486929Z" duration="0.000693" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2018-32-5', '[X]-[W]-[F1]')';&#xA; result: error D3136" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3136.
Actually thrown D3136.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Description: 'currently no support for year/week-of-year/day-of-week'
Expr is '$toMillis('2018-32-5', '[X]-[W]-[F1]')'
]]></output>
                </test-case>
                <test-case id="0-2043" name="function-tomillis.parseDateTime[42]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[42]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="594367588" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7487130Z" end-time="2024-02-19T13:49:38.7493103Z" duration="0.000597" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2020-09-09 08:00:00 +02:00', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [Z]') ~&gt; $fromMillis() ';&#xA; result: &quot;2020-09-09T06:00:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2020-09-09 08:00:00 +02:00']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 319
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 119
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse a date containing timezones'
Expr is '$toMillis('2020-09-09 08:00:00 +02:00', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [Z]') ~> $fromMillis() '
]]></output>
                </test-case>
                <test-case id="0-2044" name="function-tomillis.parseDateTime[43]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[43]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="733442800" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7493290Z" end-time="2024-02-19T13:49:38.7498076Z" duration="0.000479" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2020-09-09 08:00:00 GMT-05:00', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [z]') ~&gt; $fromMillis() ';&#xA; result: &quot;2020-09-09T13:00:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2020-09-09 08:00:00 GMT-05:00']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 319
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 119
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse a date containing timezones'
Expr is '$toMillis('2020-09-09 08:00:00 GMT-05:00', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [z]') ~> $fromMillis() '
]]></output>
                </test-case>
                <test-case id="0-2045" name="function-tomillis.parseDateTime[44]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[44]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="670495917" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7498189Z" end-time="2024-02-19T13:49:38.7503100Z" duration="0.000491" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2020-09-09 12:00:00 +05:30', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [Z]') ~&gt; $fromMillis() ';&#xA; result: &quot;2020-09-09T06:30:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2020-09-09 12:00:00 +05:30']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 319
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 119
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse a date containing timezones'
Expr is '$toMillis('2020-09-09 12:00:00 +05:30', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [Z]') ~> $fromMillis() '
]]></output>
                </test-case>
                <test-case id="0-2046" name="function-tomillis.parseDateTime[45]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[45]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1295631935" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7503247Z" end-time="2024-02-19T13:49:38.7509108Z" duration="0.000586" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2020-09-09 12:00:00 GMT-5', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [z01]') ~&gt; $fromMillis() ';&#xA; result: &quot;2020-09-09T17:00:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2020-09-09 12:00:00 GMT-5']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 319
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 119
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse a date containing timezones'
Expr is '$toMillis('2020-09-09 12:00:00 GMT-5', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [z01]') ~> $fromMillis() '
]]></output>
                </test-case>
                <test-case id="0-2047" name="function-tomillis.parseDateTime[46]" fullname="Jsonata.Net.Native.TestSuite.Tests.function-tomillis.parseDateTime[46]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="873383364" result="Failed" label="Error" start-time="2024-02-19T13:49:38.7509226Z" end-time="2024-02-19T13:49:38.7514814Z" duration="0.000559" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$toMillis('2020-09-09 12:00:00 +0530', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [Z0001]') ~&gt; $fromMillis() ';&#xA; result: &quot;2020-09-09T06:30:00Z&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : D3136: Failed to parse date/time from '2020-09-09 12:00:00 +0530']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.toMillis(String timestamp, String picture) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 1842
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionApplication(FunctionApplicationNode functionApplicationNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 319
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 119
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Description: 'should parse a date containing timezones'
Expr is '$toMillis('2020-09-09 12:00:00 +0530', '[Y0001]-[M01]-[D01] [H01]:[m01]:[s01] [Z0001]') ~> $fromMillis() '
]]></output>
                </test-case>
                <test-case id="0-2048" name="function-trim.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-trim.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1083790859" result="Passed" start-time="2024-02-19T13:49:38.7514935Z" end-time="2024-02-19T13:49:38.7515910Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$trim(&quot;Hello World&quot;)';&#xA; result: &quot;Hello World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$trim("Hello World")'
Result: '"Hello World"'
Expected: '"Hello World"'
]]></output>
                </test-case>
                <test-case id="0-2049" name="function-trim.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-trim.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="376167553" result="Passed" start-time="2024-02-19T13:49:38.7515988Z" end-time="2024-02-19T13:49:38.7516569Z" duration="0.000058" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$trim(&quot;   Hello  &#xA;  &#x9; World  &#x9; &quot;)';&#xA; result: &quot;Hello World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$trim("   Hello  
  	 World  	 ")'
Result: '"Hello World"'
Expected: '"Hello World"'
]]></output>
                </test-case>
                <test-case id="0-2050" name="function-trim.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-trim.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="12175287" result="Passed" start-time="2024-02-19T13:49:38.7516636Z" end-time="2024-02-19T13:49:38.7517311Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$trim()';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$trim()'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2051" name="function-typeOf.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1143476802" result="Passed" start-time="2024-02-19T13:49:38.7517378Z" end-time="2024-02-19T13:49:38.7518145Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= undefined; $type($var))';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= undefined; $type($var))'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2052" name="function-typeOf.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="97406296" result="Passed" start-time="2024-02-19T13:49:38.7518212Z" end-time="2024-02-19T13:49:38.7518861Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= null; $type($var))';&#xA; result: &quot;null&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= null; $type($var))'
Result: '"null"'
Expected: '"null"'
]]></output>
                </test-case>
                <test-case id="0-2053" name="function-typeOf.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1534064470" result="Passed" start-time="2024-02-19T13:49:38.7518934Z" end-time="2024-02-19T13:49:38.7519913Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= 123; $type($var))';&#xA; result: &quot;number&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= 123; $type($var))'
Result: '"number"'
Expected: '"number"'
]]></output>
                </test-case>
                <test-case id="0-2054" name="function-typeOf.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="567108086" result="Passed" start-time="2024-02-19T13:49:38.7520024Z" end-time="2024-02-19T13:49:38.7520934Z" duration="0.000091" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= '123'; $type($var))';&#xA; result: &quot;string&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= '123'; $type($var))'
Result: '"string"'
Expected: '"string"'
]]></output>
                </test-case>
                <test-case id="0-2055" name="function-typeOf.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="328884778" result="Passed" start-time="2024-02-19T13:49:38.7521019Z" end-time="2024-02-19T13:49:38.7521801Z" duration="0.000078" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= true; $type($var))';&#xA; result: &quot;boolean&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= true; $type($var))'
Result: '"boolean"'
Expected: '"boolean"'
]]></output>
                </test-case>
                <test-case id="0-2056" name="function-typeOf.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="164717950" result="Passed" start-time="2024-02-19T13:49:38.7521873Z" end-time="2024-02-19T13:49:38.7522605Z" duration="0.000073" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= 'true'; $type($var))';&#xA; result: &quot;string&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= 'true'; $type($var))'
Result: '"string"'
Expected: '"string"'
]]></output>
                </test-case>
                <test-case id="0-2057" name="function-typeOf.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="360679103" result="Passed" start-time="2024-02-19T13:49:38.7522677Z" end-time="2024-02-19T13:49:38.7523572Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= []; $type($var))';&#xA; result: &quot;array&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= []; $type($var))'
Result: '"array"'
Expected: '"array"'
]]></output>
                </test-case>
                <test-case id="0-2058" name="function-typeOf.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="986135814" result="Passed" start-time="2024-02-19T13:49:38.7523673Z" end-time="2024-02-19T13:49:38.7525077Z" duration="0.000141" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= ['a']; $type($var))';&#xA; result: &quot;array&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= ['a']; $type($var))'
Result: '"array"'
Expected: '"array"'
]]></output>
                </test-case>
                <test-case id="0-2059" name="function-typeOf.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="19896921" result="Passed" start-time="2024-02-19T13:49:38.7525179Z" end-time="2024-02-19T13:49:38.7526629Z" duration="0.000145" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= ['a','b']; $type($var))';&#xA; result: &quot;array&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= ['a','b']; $type($var))'
Result: '"array"'
Expected: '"array"'
]]></output>
                </test-case>
                <test-case id="0-2060" name="function-typeOf.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="18499918" result="Passed" start-time="2024-02-19T13:49:38.7526754Z" end-time="2024-02-19T13:49:38.7528323Z" duration="0.000157" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= function(){true}; $type($var))';&#xA; result: &quot;function&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= function(){true}; $type($var))'
Result: '"function"'
Expected: '"function"'
]]></output>
                </test-case>
                <test-case id="0-2061" name="function-typeOf.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="674960575" result="Passed" start-time="2024-02-19T13:49:38.7528444Z" end-time="2024-02-19T13:49:38.7530451Z" duration="0.000201" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= (λ($v, $i, $a) {$v.price = $max($a.price)}); $type($var))';&#xA; result: &quot;function&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= (λ($v, $i, $a) {$v.price = $max($a.price)}); $type($var))'
Result: '"function"'
Expected: '"function"'
]]></output>
                </test-case>
                <test-case id="0-2062" name="function-typeOf.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="273196422" result="Passed" start-time="2024-02-19T13:49:38.7530583Z" end-time="2024-02-19T13:49:38.7532241Z" duration="0.000166" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= {}; $type($var))';&#xA; result: &quot;object&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= {}; $type($var))'
Result: '"object"'
Expected: '"object"'
]]></output>
                </test-case>
                <test-case id="0-2063" name="function-typeOf.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.function-typeOf.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="341564008" result="Passed" start-time="2024-02-19T13:49:38.7532366Z" end-time="2024-02-19T13:49:38.7533836Z" duration="0.000147" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($var:= {&quot;foo&quot;:&quot;bar&quot;}; $type($var))';&#xA; result: &quot;object&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($var:= {"foo":"bar"}; $type($var))'
Result: '"object"'
Expected: '"object"'
]]></output>
                </test-case>
                <test-case id="0-2064" name="function-uppercase.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-uppercase.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="701560949" result="Passed" start-time="2024-02-19T13:49:38.7533938Z" end-time="2024-02-19T13:49:38.7534841Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(&quot;Hello World&quot;)';&#xA; result: &quot;HELLO WORLD&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase("Hello World")'
Result: '"HELLO WORLD"'
Expected: '"HELLO WORLD"'
]]></output>
                </test-case>
                <test-case id="0-2065" name="function-uppercase.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-uppercase.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1844600628" result="Passed" start-time="2024-02-19T13:49:38.7534915Z" end-time="2024-02-19T13:49:38.7535872Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(blah)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase(blah)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2066" name="function-zip.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.function-zip.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1466153568" result="Passed" start-time="2024-02-19T13:49:38.7535973Z" end-time="2024-02-19T13:49:38.7536993Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$zip([1,2,3],[4,5,6])';&#xA; result: [[1,4],[2,5],[3,6]]" />
                  </properties>
                  <output><![CDATA[Expr is '$zip([1,2,3],[4,5,6])'
Result: '[[1,4],[2,5],[3,6]]'
Expected: '[[1,4],[2,5],[3,6]]'
]]></output>
                </test-case>
                <test-case id="0-2067" name="function-zip.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.function-zip.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1869204202" result="Passed" start-time="2024-02-19T13:49:38.7537083Z" end-time="2024-02-19T13:49:38.7537777Z" duration="0.000070" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$zip([1,2,3],[4,5,6],[7,8,9])';&#xA; result: [[1,4,7],[2,5,8],[3,6,9]]" />
                  </properties>
                  <output><![CDATA[Expr is '$zip([1,2,3],[4,5,6],[7,8,9])'
Result: '[[1,4,7],[2,5,8],[3,6,9]]'
Expected: '[[1,4,7],[2,5,8],[3,6,9]]'
]]></output>
                </test-case>
                <test-case id="0-2068" name="function-zip.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.function-zip.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1741873735" result="Passed" start-time="2024-02-19T13:49:38.7537839Z" end-time="2024-02-19T13:49:38.7538426Z" duration="0.000059" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$zip([1,2,3],[4,5],[7,8,9])';&#xA; result: [[1,4,7],[2,5,8]]" />
                  </properties>
                  <output><![CDATA[Expr is '$zip([1,2,3],[4,5],[7,8,9])'
Result: '[[1,4,7],[2,5,8]]'
Expected: '[[1,4,7],[2,5,8]]'
]]></output>
                </test-case>
                <test-case id="0-2069" name="function-zip.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.function-zip.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="463797503" result="Passed" start-time="2024-02-19T13:49:38.7538486Z" end-time="2024-02-19T13:49:38.7539003Z" duration="0.000052" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$zip([1,2,3])';&#xA; result: [[1],[2],[3]]" />
                  </properties>
                  <output><![CDATA[Expr is '$zip([1,2,3])'
Result: '[[1],[2],[3]]'
Expected: '[[1],[2],[3]]'
]]></output>
                </test-case>
                <test-case id="0-2070" name="function-zip.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.function-zip.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="517985782" result="Passed" start-time="2024-02-19T13:49:38.7539061Z" end-time="2024-02-19T13:49:38.7539556Z" duration="0.000050" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$zip(1,2,3)';&#xA; result: [[1,2,3]]" />
                  </properties>
                  <output><![CDATA[Expr is '$zip(1,2,3)'
Result: '[[1,2,3]]'
Expected: '[[1,2,3]]'
]]></output>
                </test-case>
                <test-case id="0-2071" name="function-zip.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.function-zip.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1586077437" result="Passed" start-time="2024-02-19T13:49:38.7539616Z" end-time="2024-02-19T13:49:38.7540154Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$zip([1,2,3], [4,5,6], nothing)';&#xA; result: []" />
                  </properties>
                  <output><![CDATA[Expr is '$zip([1,2,3], [4,5,6], nothing)'
Result: '[]'
Expected: '[]'
]]></output>
                </test-case>
                <test-case id="0-2072" name="higher-order-functions.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.higher-order-functions.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1288471498" result="Passed" start-time="2024-02-19T13:49:38.7540223Z" end-time="2024-02-19T13:49:38.7540980Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($twice:=function($f){function($x){$f($f($x))}}; $add3:=function($y){$y+3}; $add6:=$twice($add3); $add6(7))';&#xA; result: 13" />
                  </properties>
                  <output><![CDATA[Expr is '($twice:=function($f){function($x){$f($f($x))}}; $add3:=function($y){$y+3}; $add6:=$twice($add3); $add6(7))'
Result: '13'
Expected: '13'
]]></output>
                </test-case>
                <test-case id="0-2073" name="higher-order-functions.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.higher-order-functions.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1154532164" result="Passed" start-time="2024-02-19T13:49:38.7541042Z" end-time="2024-02-19T13:49:38.7542052Z" duration="0.000101" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($f) { λ($x) { $x($x) }( λ($g) { $f( (λ($a) {$g($g)($a)}))})}(λ($f) { λ($n) { $n &lt; 2 ? 1 : $n * $f($n - 1) } })(6)';&#xA; result: 720" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($f) { λ($x) { $x($x) }( λ($g) { $f( (λ($a) {$g($g)($a)}))})}(λ($f) { λ($n) { $n < 2 ? 1 : $n * $f($n - 1) } })(6)'
Result: '720'
Expected: '720'
]]></output>
                </test-case>
                <test-case id="0-2074" name="higher-order-functions.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.higher-order-functions.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1708340381" result="Passed" start-time="2024-02-19T13:49:38.7542115Z" end-time="2024-02-19T13:49:38.7543678Z" duration="0.000156" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'λ($f) { λ($x) { $x($x) }( λ($g) { $f( (λ($a) {$g($g)($a)}))})}(λ($f) { λ($n) { $n &lt;= 1 ? $n : $f($n-1) + $f($n-2) } })(6) ';&#xA; result: 8" />
                  </properties>
                  <output><![CDATA[Expr is 'λ($f) { λ($x) { $x($x) }( λ($g) { $f( (λ($a) {$g($g)($a)}))})}(λ($f) { λ($n) { $n <= 1 ? $n : $f($n-1) + $f($n-2) } })(6) '
Result: '8'
Expected: '8'
]]></output>
                </test-case>
                <test-case id="0-2075" name="hof-filter.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-filter.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="786069435" result="Passed" start-time="2024-02-19T13:49:38.7543740Z" end-time="2024-02-19T13:49:38.7544831Z" duration="0.000109" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(library.books~&gt;$filter(λ($v, $i, $a) {$v.price = $max($a.price)})).isbn';&#xA; result: &quot;9780262510875&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(library.books~>$filter(λ($v, $i, $a) {$v.price = $max($a.price)})).isbn'
Result: '"9780262510875"'
Expected: '"9780262510875"'
]]></output>
                </test-case>
                <test-case id="0-2076" name="hof-filter.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-filter.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1149150890" result="Passed" start-time="2024-02-19T13:49:38.7544911Z" end-time="2024-02-19T13:49:38.7545670Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nothing~&gt;$filter(λ($v, $i, $a) {$v.price = $max($a.price)})';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'nothing~>$filter(λ($v, $i, $a) {$v.price = $max($a.price)})'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2077" name="hof-filter.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-filter.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2012863340" result="Passed" start-time="2024-02-19T13:49:38.7545733Z" end-time="2024-02-19T13:49:38.7546284Z" duration="0.000055" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$filter(data, function($d) { true })';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '$filter(data, function($d) { true })'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-2078" name="hof-filter.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-filter.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="51699966" result="Passed" start-time="2024-02-19T13:49:38.7546347Z" end-time="2024-02-19T13:49:38.7558288Z" duration="0.001194" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$filter([0, 1, 2], $boolean)';&#xA; result: [1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '$filter([0, 1, 2], $boolean)'
Result: '[1,2]'
Expected: '[1,2]'
]]></output>
                </test-case>
                <test-case id="0-2079" name="hof-map.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2053505425" result="Passed" start-time="2024-02-19T13:49:38.7558401Z" end-time="2024-02-19T13:49:38.7560293Z" duration="0.000189" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $data := {    &quot;one&quot;: [1,2,3,4,5],    &quot;two&quot;: [5,4,3,2,1]  };  $add := function($x){$x*$x};  $map($data.one, $add) )  ';&#xA; result: [1,4,9,16,25]" />
                  </properties>
                  <output><![CDATA[Expr is '(  $data := {    "one": [1,2,3,4,5],    "two": [5,4,3,2,1]  };  $add := function($x){$x*$x};  $map($data.one, $add) )  '
Result: '[1,4,9,16,25]'
Expected: '[1,4,9,16,25]'
]]></output>
                </test-case>
                <test-case id="0-2080" name="hof-map.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="217577096" result="Passed" start-time="2024-02-19T13:49:38.7560414Z" end-time="2024-02-19T13:49:38.7568704Z" duration="0.000829" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '(  $data := {    &quot;one&quot;: [1,2,3,4,5],    &quot;two&quot;: [5,4,3,2,1]  };  $add := function($x){$x*$x};  $map($add) )  ';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '(  $data := {    "one": [1,2,3,4,5],    "two": [5,4,3,2,1]  };  $add := function($x){$x*$x};  $map($add) )  '
]]></output>
                </test-case>
                <test-case id="0-2081" name="hof-map.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1795525782" result="Passed" start-time="2024-02-19T13:49:38.7568840Z" end-time="2024-02-19T13:49:38.7569934Z" duration="0.000109" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$map([1,2,3], $string)';&#xA; result: [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$map([1,2,3], $string)'
Result: '["1","2","3"]'
Expected: '["1","2","3"]'
]]></output>
                </test-case>
                <test-case id="0-2082" name="hof-map.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1735307300" result="Passed" start-time="2024-02-19T13:49:38.7570034Z" end-time="2024-02-19T13:49:38.7571888Z" duration="0.000186" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product ~&gt; $map(λ($prod, $index) { $index+1 &amp; &quot;: &quot; &amp; $prod.&quot;Product Name&quot; })';&#xA; result: [&quot;1: Bowler Hat&quot;,&quot;2: Trilby hat&quot;,&quot;3: Bowler Hat&quot;,&quot;4: Cloak&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product ~> $map(λ($prod, $index) { $index+1 & ": " & $prod."Product Name" })'
Result: '["1: Bowler Hat","2: Trilby hat","3: Bowler Hat","4: Cloak"]'
Expected: '["1: Bowler Hat","2: Trilby hat","3: Bowler Hat","4: Cloak"]'
]]></output>
                </test-case>
                <test-case id="0-2083" name="hof-map.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1787359647" result="Passed" start-time="2024-02-19T13:49:38.7572008Z" end-time="2024-02-19T13:49:38.7574461Z" duration="0.000246" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product ~&gt; $map(λ($prod, $index, $arr) { $index+1 &amp; &quot;/&quot; &amp; $count($arr) &amp; &quot;: &quot; &amp; $prod.&quot;Product Name&quot; })';&#xA; result: [&quot;1/4: Bowler Hat&quot;,&quot;2/4: Trilby hat&quot;,&quot;3/4: Bowler Hat&quot;,&quot;4/4: Cloak&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product ~> $map(λ($prod, $index, $arr) { $index+1 & "/" & $count($arr) & ": " & $prod."Product Name" })'
Result: '["1/4: Bowler Hat","2/4: Trilby hat","3/4: Bowler Hat","4/4: Cloak"]'
Expected: '["1/4: Bowler Hat","2/4: Trilby hat","3/4: Bowler Hat","4/4: Cloak"]'
]]></output>
                </test-case>
                <test-case id="0-2084" name="hof-map.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="539045796" result="Passed" start-time="2024-02-19T13:49:38.7574769Z" end-time="2024-02-19T13:49:38.7576061Z" duration="0.000129" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$map(Phone, function($v, $i) {$i[$v.type=&quot;office&quot;]})';&#xA; result: [1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '$map(Phone, function($v, $i) {$i[$v.type="office"]})'
Result: '[1,2]'
Expected: '[1,2]'
]]></output>
                </test-case>
                <test-case id="0-2085" name="hof-map.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1739369243" result="Passed" start-time="2024-02-19T13:49:38.7576156Z" end-time="2024-02-19T13:49:38.7577233Z" duration="0.000108" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$map(Phone, function($v, $i) {$v.type=&quot;office&quot; ? $i})';&#xA; result: [1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '$map(Phone, function($v, $i) {$v.type="office" ? $i})'
Result: '[1,2]'
Expected: '[1,2]'
]]></output>
                </test-case>
                <test-case id="0-2086" name="hof-map.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1129766143" result="Passed" start-time="2024-02-19T13:49:38.7577317Z" end-time="2024-02-19T13:49:38.7581146Z" duration="0.000383" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$map(Phone, function($v, $i) {$v.type=&quot;office&quot; ? $i: null})';&#xA; result: [null,1,2,null]" />
                  </properties>
                  <output><![CDATA[Expr is '$map(Phone, function($v, $i) {$v.type="office" ? $i: null})'
Result: '[null,1,2,null]'
Expected: '[null,1,2,null]'
]]></output>
                </test-case>
                <test-case id="0-2087" name="hof-map.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1314120901" result="Passed" start-time="2024-02-19T13:49:38.7581249Z" end-time="2024-02-19T13:49:38.7582357Z" duration="0.000111" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$map(Phone, function($v, $i) {$v.type=&quot;office&quot; ? $i: null})';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$map(Phone, function($v, $i) {$v.type="office" ? $i: null})'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2088" name="hof-map.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-map.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1228657806" result="Passed" start-time="2024-02-19T13:49:38.7582443Z" end-time="2024-02-19T13:49:38.7583572Z" duration="0.000113" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$map([0, 1, 2], $boolean)';&#xA; result: [false,true,true]" />
                  </properties>
                  <output><![CDATA[Expr is '$map([0, 1, 2], $boolean)'
Result: '[false,true,true]'
Expected: '[false,true,true]'
]]></output>
                </test-case>
                <test-case id="0-2089" name="hof-reduce.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="636485861" result="Passed" start-time="2024-02-19T13:49:38.7583657Z" end-time="2024-02-19T13:49:38.7584624Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $seq := [1,2,3,4,5];  $reduce($seq, function($x, $y){$x+$y})) ';&#xA; result: 15" />
                  </properties>
                  <output><![CDATA[Expr is '(  $seq := [1,2,3,4,5];  $reduce($seq, function($x, $y){$x+$y})) '
Result: '15'
Expected: '15'
]]></output>
                </test-case>
                <test-case id="0-2090" name="hof-reduce.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1383738202" result="Passed" start-time="2024-02-19T13:49:38.7584709Z" end-time="2024-02-19T13:49:38.7585988Z" duration="0.000128" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $concat := function($s){function($a, $b){$string($a) &amp; $s &amp; $string($b)}};  $comma_join := $concat(' ... ');  $reduce([1,2,3,4,5], $comma_join))      ';&#xA; result: &quot;1 ... 2 ... 3 ... 4 ... 5&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(  $concat := function($s){function($a, $b){$string($a) & $s & $string($b)}};  $comma_join := $concat(' ... ');  $reduce([1,2,3,4,5], $comma_join))      '
Result: '"1 ... 2 ... 3 ... 4 ... 5"'
Expected: '"1 ... 2 ... 3 ... 4 ... 5"'
]]></output>
                </test-case>
                <test-case id="0-2091" name="hof-reduce.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1629469020" result="Passed" start-time="2024-02-19T13:49:38.7586075Z" end-time="2024-02-19T13:49:38.7587139Z" duration="0.000106" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $seq := [1,2,3,4,5];  $reduce($seq, function($x, $y){$x+$y}, 2))';&#xA; result: 17" />
                  </properties>
                  <output><![CDATA[Expr is '(  $seq := [1,2,3,4,5];  $reduce($seq, function($x, $y){$x+$y}, 2))'
Result: '17'
Expected: '17'
]]></output>
                </test-case>
                <test-case id="0-2092" name="hof-reduce.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="881690378" result="Passed" start-time="2024-02-19T13:49:38.7587224Z" end-time="2024-02-19T13:49:38.7588513Z" duration="0.000129" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $seq := 1;  $reduce($seq, function($x, $y){$x+$y}))';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '(  $seq := 1;  $reduce($seq, function($x, $y){$x+$y}))'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-2093" name="hof-reduce.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1742172979" result="Passed" start-time="2024-02-19T13:49:38.7588630Z" end-time="2024-02-19T13:49:38.7590117Z" duration="0.000149" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $seq := 1;  $reduce($seq, function($x, $y){$x+$y}))';&#xA; result: 1" />
                  </properties>
                  <output><![CDATA[Expr is '(  $seq := 1;  $reduce($seq, function($x, $y){$x+$y}))'
Result: '1'
Expected: '1'
]]></output>
                </test-case>
                <test-case id="0-2094" name="hof-reduce.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1918123430" result="Passed" start-time="2024-02-19T13:49:38.7590245Z" end-time="2024-02-19T13:49:38.7593391Z" duration="0.000315" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$reduce(Account.Order.Product.Quantity, $append)';&#xA; result: [2,1,4,1]" />
                  </properties>
                  <output><![CDATA[Expr is '$reduce(Account.Order.Product.Quantity, $append)'
Result: '[2,1,4,1]'
Expected: '[2,1,4,1]'
]]></output>
                </test-case>
                <test-case id="0-2095" name="hof-reduce.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1603246893" result="Passed" start-time="2024-02-19T13:49:38.7593501Z" end-time="2024-02-19T13:49:38.7594705Z" duration="0.000121" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$reduce(Account.Order.Product.Quantity, $append)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$reduce(Account.Order.Product.Quantity, $append)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2096" name="hof-reduce.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1391884040" result="Passed" start-time="2024-02-19T13:49:38.7594822Z" end-time="2024-02-19T13:49:38.7597928Z" duration="0.000311" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($product := function($a, $b) { $a * $b };$power := function($x, $n) { $n = 0 ? 1 : $reduce([1..$n].($x), $product) };[0..5].$power(2, $))';&#xA; result: [1,2,4,8,16,32]" />
                  </properties>
                  <output><![CDATA[Expr is '($product := function($a, $b) { $a * $b };$power := function($x, $n) { $n = 0 ? 1 : $reduce([1..$n].($x), $product) };[0..5].$power(2, $))'
Result: '[1,2,4,8,16,32]'
Expected: '[1,2,4,8,16,32]'
]]></output>
                </test-case>
                <test-case id="0-2097" name="hof-reduce.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1268665091" result="Passed" start-time="2024-02-19T13:49:38.7598058Z" end-time="2024-02-19T13:49:38.7608654Z" duration="0.001060" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '(  $seq := 1;  $reduce($seq, function($x){$x}))';&#xA; result: error D3050" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3050.
Actually thrown D3050.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '(  $seq := 1;  $reduce($seq, function($x){$x}))'
]]></output>
                </test-case>
                <test-case id="0-2098" name="hof-reduce.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2040290286" result="Passed" start-time="2024-02-19T13:49:38.7608786Z" end-time="2024-02-19T13:49:38.7610598Z" duration="0.000181" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(&#xD;&#xA; $months := [&#xD;&#xA;        &quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;,&#xD;&#xA;        &quot;Jul&quot;, &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;&#xD;&#xA; ];&#xD;&#xA; $indexof := λ($array, $value) {&#xD;&#xA;  $reduce($array, λ($acc, $v, $i) {&#xD;&#xA;   $v=$value ? $i : $acc&#xD;&#xA;  })&#xD;&#xA; };&#xD;&#xA; $indexof($months, 'May')&#xD;&#xA;)&#xD;&#xA;';&#xA; result: 4" />
                  </properties>
                  <output><![CDATA[Expr is '(
 $months := [
        "Jan", "Feb", "Mar", "Apr", "May", "Jun",
        "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
 ];
 $indexof := λ($array, $value) {
  $reduce($array, λ($acc, $v, $i) {
   $v=$value ? $i : $acc
  })
 };
 $indexof($months, 'May')
)
'
Result: '4'
Expected: '4'
]]></output>
                </test-case>
                <test-case id="0-2099" name="hof-reduce.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-reduce.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1036325819" result="Passed" start-time="2024-02-19T13:49:38.7610720Z" end-time="2024-02-19T13:49:38.7611918Z" duration="0.000120" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(&#xD;&#xA;  $mean := $reduce(?, λ($acc, $v, $i, $arr) {(&#xD;&#xA;    $total := $acc + $v;&#xD;&#xA;    $length := $count($arr);&#xD;&#xA;    $i = $length - 1 ? $total / $length : $total&#xD;&#xA;  )});&#xD;&#xA;&#xD;&#xA;  $mean([7,3,8])&#xD;&#xA;)&#xD;&#xA;';&#xA; result: 6" />
                  </properties>
                  <output><![CDATA[Expr is '(
  $mean := $reduce(?, λ($acc, $v, $i, $arr) {(
    $total := $acc + $v;
    $length := $count($arr);
    $i = $length - 1 ? $total / $length : $total
  )});

  $mean([7,3,8])
)
'
Result: '6'
Expected: '6'
]]></output>
                </test-case>
                <test-case id="0-2100" name="hof-single.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1351825996" result="Passed" start-time="2024-02-19T13:49:38.7612003Z" end-time="2024-02-19T13:49:38.7617085Z" duration="0.000508" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(library.books~&gt;$single(λ($v, $i, $a) {$v.price = $max($a.price)})).isbn';&#xA; result: &quot;9780262510875&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(library.books~>$single(λ($v, $i, $a) {$v.price = $max($a.price)})).isbn'
Result: '"9780262510875"'
Expected: '"9780262510875"'
]]></output>
                </test-case>
                <test-case id="0-2101" name="hof-single.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1573911380" result="Passed" start-time="2024-02-19T13:49:38.7617207Z" end-time="2024-02-19T13:49:38.7618993Z" duration="0.000179" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nothing~&gt;$single(λ($v, $i, $a) {$v.price = $max($a.price)})';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'nothing~>$single(λ($v, $i, $a) {$v.price = $max($a.price)})'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2102" name="hof-single.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1278993276" result="Passed" start-time="2024-02-19T13:49:38.7619133Z" end-time="2024-02-19T13:49:38.7620302Z" duration="0.000117" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$single(data, function($d) { true })';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '$single(data, function($d) { true })'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-2103" name="hof-single.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="619993356" result="Passed" start-time="2024-02-19T13:49:38.7620588Z" end-time="2024-02-19T13:49:38.7629127Z" duration="0.000854" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$single([0, 1, 2], $boolean)';&#xA; result: error D3138" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3138.
Actually thrown D3138.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$single([0, 1, 2], $boolean)'
]]></output>
                </test-case>
                <test-case id="0-2104" name="hof-single.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2005665418" result="Passed" start-time="2024-02-19T13:49:38.7629250Z" end-time="2024-02-19T13:49:38.7634074Z" duration="0.000483" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$single([0, 1, 2], function($v) {$v = 3})';&#xA; result: error D3139" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3139.
Actually thrown D3139.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$single([0, 1, 2], function($v) {$v = 3})'
]]></output>
                </test-case>
                <test-case id="0-2105" name="hof-single.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="573581497" result="Passed" start-time="2024-02-19T13:49:38.7634176Z" end-time="2024-02-19T13:49:38.7638799Z" duration="0.000462" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$single([0, 1, 2])';&#xA; result: error D3138" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3138.
Actually thrown D3138.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$single([0, 1, 2])'
]]></output>
                </test-case>
                <test-case id="0-2106" name="hof-single.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2002488951" result="Passed" start-time="2024-02-19T13:49:38.7638900Z" end-time="2024-02-19T13:49:38.7639555Z" duration="0.000066" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$single([0])';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$single([0])'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-2107" name="hof-single.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1090357779" result="Passed" start-time="2024-02-19T13:49:38.7639620Z" end-time="2024-02-19T13:49:38.7647709Z" duration="0.000809" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$single([])';&#xA; result: error D3139" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3139.
Actually thrown D3139.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$single([])'
]]></output>
                </test-case>
                <test-case id="0-2108" name="hof-single.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1973207736" result="Passed" start-time="2024-02-19T13:49:38.7647879Z" end-time="2024-02-19T13:49:38.7649108Z" duration="0.000123" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$single([true, false, true], function($v) {$v=false})';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$single([true, false, true], function($v) {$v=false})'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2109" name="hof-single.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1928522298" result="Passed" start-time="2024-02-19T13:49:38.7649237Z" end-time="2024-02-19T13:49:38.7650316Z" duration="0.000108" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$single(['zero', 'one', 'two'], function($v, $i, $k) {$i=1})';&#xA; result: &quot;one&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$single(['zero', 'one', 'two'], function($v, $i, $k) {$i=1})'
Result: '"one"'
Expected: '"one"'
]]></output>
                </test-case>
                <test-case id="0-2110" name="hof-single.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-single.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1327217535" result="Passed" start-time="2024-02-19T13:49:38.7650416Z" end-time="2024-02-19T13:49:38.7652009Z" duration="0.000159" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Phone ~&gt; $filter(function($p) {$p.type = 'home'}) ~&gt; $single(function($p) {$p.number = '0203 544 1234'})';&#xA; result: {&quot;type&quot;:&quot;home&quot;,&quot;number&quot;:&quot;0203 544 1234&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'Phone ~> $filter(function($p) {$p.type = 'home'}) ~> $single(function($p) {$p.number = '0203 544 1234'})'
Result: '{"type":"home","number":"0203 544 1234"}'
Expected: '{"type":"home","number":"0203 544 1234"}'
]]></output>
                </test-case>
                <test-case id="0-2111" name="hof-zip-map.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-zip-map.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="299338257" result="Passed" start-time="2024-02-19T13:49:38.7652111Z" end-time="2024-02-19T13:49:38.7654910Z" duration="0.000280" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $data := {    &quot;one&quot;: [1,2,3,4,5],    &quot;two&quot;: [5,4,3,2,1]  };  $map($zip($data.one, $data.two), $sum)) ';&#xA; result: [6,6,6,6,6]" />
                  </properties>
                  <output><![CDATA[Expr is '(  $data := {    "one": [1,2,3,4,5],    "two": [5,4,3,2,1]  };  $map($zip($data.one, $data.two), $sum)) '
Result: '[6,6,6,6,6]'
Expected: '[6,6,6,6,6]'
]]></output>
                </test-case>
                <test-case id="0-2112" name="hof-zip-map.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-zip-map.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="308979137" result="Passed" start-time="2024-02-19T13:49:38.7655151Z" end-time="2024-02-19T13:49:38.7660225Z" duration="0.000507" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $data := {    &quot;one&quot;: [1,2,3,4,5],    &quot;two&quot;: [5,4,3,2,1]  };  $data.$zip(one, two) ~&gt; $map($sum)) ';&#xA; result: [6,6,6,6,6]" />
                  </properties>
                  <output><![CDATA[Expr is '(  $data := {    "one": [1,2,3,4,5],    "two": [5,4,3,2,1]  };  $data.$zip(one, two) ~> $map($sum)) '
Result: '[6,6,6,6,6]'
Expected: '[6,6,6,6,6]'
]]></output>
                </test-case>
                <test-case id="0-2113" name="hof-zip-map.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-zip-map.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1080114036" result="Passed" start-time="2024-02-19T13:49:38.7660823Z" end-time="2024-02-19T13:49:38.7662306Z" duration="0.000148" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $data := {    &quot;one&quot;: [1],    &quot;two&quot;: [5]  };  $data.$zip(one, two) ~&gt; $map($sum)) ';&#xA; result: 6" />
                  </properties>
                  <output><![CDATA[Expr is '(  $data := {    "one": [1],    "two": [5]  };  $data.$zip(one, two) ~> $map($sum)) '
Result: '6'
Expected: '6'
]]></output>
                </test-case>
                <test-case id="0-2114" name="hof-zip-map.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.hof-zip-map.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1949803472" result="Passed" start-time="2024-02-19T13:49:38.7662437Z" end-time="2024-02-19T13:49:38.7663655Z" duration="0.000122" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $data := {    &quot;one&quot;: 1,    &quot;two&quot;: 5  };  $data.$zip(one, two) ~&gt; $map($sum)) ';&#xA; result: 6" />
                  </properties>
                  <output><![CDATA[Expr is '(  $data := {    "one": 1,    "two": 5  };  $data.$zip(one, two) ~> $map($sum)) '
Result: '6'
Expected: '6'
]]></output>
                </test-case>
                <test-case id="0-2115" name="inclusion-operator.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="370457783" result="Passed" start-time="2024-02-19T13:49:38.7664109Z" end-time="2024-02-19T13:49:38.7664939Z" duration="0.000083" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '1 in [1,2]';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '1 in [1,2]'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2116" name="inclusion-operator.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1087136922" result="Passed" start-time="2024-02-19T13:49:38.7665131Z" end-time="2024-02-19T13:49:38.7665917Z" duration="0.000079" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '3 in [1,2]';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '3 in [1,2]'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2117" name="inclusion-operator.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="633320422" result="Passed" start-time="2024-02-19T13:49:38.7666024Z" end-time="2024-02-19T13:49:38.7666833Z" duration="0.000081" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello&quot; in [1,2]';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '"hello" in [1,2]'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2118" name="inclusion-operator.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1950001859" result="Passed" start-time="2024-02-19T13:49:38.7666937Z" end-time="2024-02-19T13:49:38.7667517Z" duration="0.000058" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;world&quot; in [&quot;hello&quot;, &quot;world&quot;]';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '"world" in ["hello", "world"]'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2119" name="inclusion-operator.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1109675353" result="Passed" start-time="2024-02-19T13:49:38.7667584Z" end-time="2024-02-19T13:49:38.7668051Z" duration="0.000047" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'in in [&quot;hello&quot;, &quot;world&quot;]';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'in in ["hello", "world"]'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2120" name="inclusion-operator.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="714834485" result="Passed" start-time="2024-02-19T13:49:38.7668118Z" end-time="2024-02-19T13:49:38.7668689Z" duration="0.000057" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;world&quot; in in';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '"world" in in'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2121" name="inclusion-operator.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="152032667" result="Passed" start-time="2024-02-19T13:49:38.7668781Z" end-time="2024-02-19T13:49:38.7669584Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello&quot; in &quot;hello&quot;';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '"hello" in "hello"'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2122" name="inclusion-operator.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="640546396" result="Passed" start-time="2024-02-19T13:49:38.7669882Z" end-time="2024-02-19T13:49:38.7671100Z" duration="0.000122" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'library.books[&quot;Aho&quot; in authors].title';&#xA; result: [&quot;The AWK Programming Language&quot;,&quot;Compilers: Principles, Techniques, and Tools&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'library.books["Aho" in authors].title'
Result: '["The AWK Programming Language","Compilers: Principles, Techniques, and Tools"]'
Expected: '["The AWK Programming Language","Compilers: Principles, Techniques, and Tools"]'
]]></output>
                </test-case>
                <test-case id="0-2123" name="inclusion-operator.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.inclusion-operator.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1105387874" result="Passed" start-time="2024-02-19T13:49:38.7671206Z" end-time="2024-02-19T13:49:38.7672002Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'content.integration.$lowercase(name)';&#xA; result: &quot;fakeintegrationname&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'content.integration.$lowercase(name)'
Result: '"fakeintegrationname"'
Expected: '"fakeintegrationname"'
]]></output>
                </test-case>
                <test-case id="0-2124" name="joins.employee-map-reduce[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1227542948" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7672079Z" end-time="2024-02-19T13:49:38.7682413Z" duration="0.001034" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.(Contact)[ssn = $e.SSN].{ 'name': $e.(FirstName &amp; ' ' &amp; Surname), 'phone': Phone[type='mobile'].number }';&#xA; result: [{&quot;name&quot;:&quot;Fred Smith&quot;,&quot;phone&quot;:&quot;077 7700 1234&quot;},{&quot;name&quot;:&quot;Darren Cruse&quot;,&quot;phone&quot;:&quot;315 782 9279&quot;},{&quot;name&quot;:&quot;Hugh Jones&quot;},{&quot;name&quot;:&quot;Hugh Jones&quot;},{&quot;name&quot;:&quot;Hugh Jones&quot;,&quot;phone&quot;:&quot;07735 853535&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.(Contact)[ssn = $e.SSN].{ 'name': $e.(FirstName & ' ' & Surname), 'phone': Phone[type='mobile'].number }'
]]></output>
                </test-case>
                <test-case id="0-2125" name="joins.employee-map-reduce[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1036000409" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7682556Z" end-time="2024-02-19T13:49:38.7688668Z" duration="0.000611" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.(Contact)[ssn = $e.SSN]{ $e.FirstName: Phone[type='mobile'].number }';&#xA; result: {&quot;Fred&quot;:&quot;077 7700 1234&quot;,&quot;Darren&quot;:&quot;315 782 9279&quot;,&quot;Hugh&quot;:&quot;07735 853535&quot;}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.(Contact)[ssn = $e.SSN]{ $e.FirstName: Phone[type='mobile'].number }'
]]></output>
                </test-case>
                <test-case id="0-2126" name="joins.employee-map-reduce[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="704387059" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7688802Z" end-time="2024-02-19T13:49:38.7694078Z" duration="0.000528" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName &amp; ' ' &amp; Surname): $join($c.Phone.number, ', ') }';&#xA; result: {&quot;Fred Smith&quot;:&quot;0203 544 1234, 01962 001234, 077 7700 1234&quot;,&quot;Darren Cruse&quot;:&quot;3146458343, 315 782 9279&quot;,&quot;Hugh Jones&quot;:&quot;0280 564 6543, 0280 864 8643, 07735 853535&quot;}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName & ' ' & Surname): $join($c.Phone.number, ', ') }'
]]></output>
                </test-case>
                <test-case id="0-2127" name="joins.employee-map-reduce[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1693782166" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7694437Z" end-time="2024-02-19T13:49:38.7702458Z" duration="0.000802" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName &amp; ' ' &amp; Surname): $c.Phone[type != 'home'].number ~&gt; $join(', ') }';&#xA; result: {&quot;Fred Smith&quot;:&quot;01962 001234, 077 7700 1234&quot;,&quot;Darren Cruse&quot;:&quot;315 782 9279&quot;,&quot;Hugh Jones&quot;:&quot;0280 864 8643, 07735 853535&quot;}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName & ' ' & Surname): $c.Phone[type != 'home'].number ~> $join(', ') }'
]]></output>
                </test-case>
                <test-case id="0-2128" name="joins.employee-map-reduce[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1383892381" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7702594Z" end-time="2024-02-19T13:49:38.7707124Z" duration="0.000453" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName &amp; ' ' &amp; Surname): $c.Phone[type != 'home'].number }';&#xA; result: {&quot;Fred Smith&quot;:[&quot;01962 001234&quot;,&quot;077 7700 1234&quot;],&quot;Darren Cruse&quot;:&quot;315 782 9279&quot;,&quot;Hugh Jones&quot;:[&quot;0280 864 8643&quot;,&quot;07735 853535&quot;]}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName & ' ' & Surname): $c.Phone[type != 'home'].number }'
]]></output>
                </test-case>
                <test-case id="0-2129" name="joins.employee-map-reduce[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="105093488" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7707230Z" end-time="2024-02-19T13:49:38.7713216Z" duration="0.000599" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName &amp; ' ' &amp; Surname): $c.Phone[type != 'home'].number[] }';&#xA; result: {&quot;Fred Smith&quot;:[&quot;01962 001234&quot;,&quot;077 7700 1234&quot;],&quot;Darren Cruse&quot;:[&quot;315 782 9279&quot;],&quot;Hugh Jones&quot;:[&quot;0280 864 8643&quot;,&quot;07735 853535&quot;]}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.(FirstName & ' ' & Surname): $c.Phone[type != 'home'].number[] }'
]]></output>
                </test-case>
                <test-case id="0-2130" name="joins.employee-map-reduce[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1541669042" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7713500Z" end-time="2024-02-19T13:49:38.7718662Z" duration="0.000516" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.FirstName: $c.Phone.number }';&#xA; result: {&quot;Fred&quot;:[&quot;0203 544 1234&quot;,&quot;01962 001234&quot;,&quot;077 7700 1234&quot;],&quot;Darren&quot;:[&quot;3146458343&quot;,&quot;315 782 9279&quot;],&quot;Hugh&quot;:[&quot;0280 564 6543&quot;,&quot;0280 864 8643&quot;,&quot;07735 853535&quot;]}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.Contact@$c[$c.ssn = $e.SSN]{ $e.FirstName: $c.Phone.number }'
]]></output>
                </test-case>
                <test-case id="0-2131" name="joins.employee-map-reduce[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2027969446" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7718805Z" end-time="2024-02-19T13:49:38.7727366Z" duration="0.000856" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e^($e.Surname).Contact@$c[$e.SSN=$c.ssn].{ 'name': $e.Surname, 'phone': $c.Phone.number }';&#xA; result: [{&quot;name&quot;:&quot;Cruse&quot;,&quot;phone&quot;:[&quot;3146458343&quot;,&quot;315 782 9279&quot;]},{&quot;name&quot;:&quot;Jones&quot;,&quot;phone&quot;:&quot;0280 564 6543&quot;},{&quot;name&quot;:&quot;Jones&quot;,&quot;phone&quot;:&quot;0280 864 8643&quot;},{&quot;name&quot;:&quot;Jones&quot;,&quot;phone&quot;:&quot;07735 853535&quot;},{&quot;name&quot;:&quot;Smith&quot;,&quot;phone&quot;:[&quot;0203 544 1234&quot;,&quot;01962 001234&quot;,&quot;077 7700 1234&quot;]}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e^($e.Surname).Contact@$c[$e.SSN=$c.ssn].{ 'name': $e.Surname, 'phone': $c.Phone.number }'
]]></output>
                </test-case>
                <test-case id="0-2132" name="joins.employee-map-reduce[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2120056701" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7727509Z" end-time="2024-02-19T13:49:38.7734848Z" duration="0.000734" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e^($e.FirstName).Contact@$c[$e.SSN=$c.ssn].{ 'name': $e.Surname, 'phone': $c.Phone.number }';&#xA; result: [{&quot;name&quot;:&quot;Cruse&quot;,&quot;phone&quot;:[&quot;3146458343&quot;,&quot;315 782 9279&quot;]},{&quot;name&quot;:&quot;Smith&quot;,&quot;phone&quot;:[&quot;0203 544 1234&quot;,&quot;01962 001234&quot;,&quot;077 7700 1234&quot;]},{&quot;name&quot;:&quot;Jones&quot;,&quot;phone&quot;:&quot;0280 564 6543&quot;},{&quot;name&quot;:&quot;Jones&quot;,&quot;phone&quot;:&quot;0280 864 8643&quot;},{&quot;name&quot;:&quot;Jones&quot;,&quot;phone&quot;:&quot;07735 853535&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e^($e.FirstName).Contact@$c[$e.SSN=$c.ssn].{ 'name': $e.Surname, 'phone': $c.Phone.number }'
]]></output>
                </test-case>
                <test-case id="0-2133" name="joins.employee-map-reduce[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1162857794" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7735009Z" end-time="2024-02-19T13:49:38.7741020Z" duration="0.000601" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.Contact@$c[$e.SSN=$c.ssn]{ $e.Surname: $c.Phone.number^($) }';&#xA; result: {&quot;Smith&quot;:[&quot;01962 001234&quot;,&quot;0203 544 1234&quot;,&quot;077 7700 1234&quot;],&quot;Cruse&quot;:[&quot;3146458343&quot;,&quot;315 782 9279&quot;],&quot;Jones&quot;:[&quot;0280 564 6543&quot;,&quot;0280 864 8643&quot;,&quot;07735 853535&quot;]}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.Contact@$c[$e.SSN=$c.ssn]{ $e.Surname: $c.Phone.number^($) }'
]]></output>
                </test-case>
                <test-case id="0-2134" name="joins.employee-map-reduce[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="701679429" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7741165Z" end-time="2024-02-19T13:49:38.7760377Z" duration="0.001921" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employee@$e.Contact@$c[$e.SSN=$c.ssn]{ $e.Surname: $c.Phone.number^(&gt;$) }';&#xA; result: {&quot;Smith&quot;:[&quot;077 7700 1234&quot;,&quot;0203 544 1234&quot;,&quot;01962 001234&quot;],&quot;Cruse&quot;:[&quot;315 782 9279&quot;,&quot;3146458343&quot;],&quot;Jones&quot;:[&quot;07735 853535&quot;,&quot;0280 864 8643&quot;,&quot;0280 564 6543&quot;]}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employee@$e.Contact@$c[$e.SSN=$c.ssn]{ $e.Surname: $c.Phone.number^(>$) }'
]]></output>
                </test-case>
                <test-case id="0-2135" name="joins.employee-map-reduce[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.employee-map-reduce[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="791149363" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7760559Z" end-time="2024-02-19T13:49:38.7766151Z" duration="0.000559" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$@$i';&#xA; result: [1,2,3]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$@$i'
]]></output>
                </test-case>
                <test-case id="0-2136" name="joins.errors[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.errors[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="516532506" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7766300Z" end-time="2024-02-19T13:49:38.7771805Z" duration="0.000551" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order@o.Product';&#xA; result: error S0214" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order@o.Product'
]]></output>
                </test-case>
                <test-case id="0-2137" name="joins.errors[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.errors[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1115313944" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7771921Z" end-time="2024-02-19T13:49:38.7776393Z" duration="0.000447" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order@$o#i.Product';&#xA; result: error S0214" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order@$o#i.Product'
]]></output>
                </test-case>
                <test-case id="0-2138" name="joins.errors[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.errors[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1929177876" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7776516Z" end-time="2024-02-19T13:49:38.7783743Z" duration="0.000723" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order[1]@$o.Product';&#xA; result: error S0215" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.consume(TokenType expected, Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 201
   at Jsonata.Net.Native.Parsing.Parser.parsePredicate(Token t, Node lhs) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser_Leds.cs:line 156
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 231
   at Jsonata.Net.Native.Parsing.Parser.parseDot(Token t, Node lhs) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser_Leds.cs:line 244
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 231
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order[1]@$o.Product'
]]></output>
                </test-case>
                <test-case id="0-2139" name="joins.errors[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.errors[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2112947946" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7783880Z" end-time="2024-02-19T13:49:38.7797546Z" duration="0.001367" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order^(&gt;OrderID)@$o.Product.{ 'name':`Product Name`, 'orderid':$o.OrderID }';&#xA; result: error S0216" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.consume(TokenType expected, Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 201
   at Jsonata.Net.Native.Parsing.Parser.parseSort(Token t, Node lhs) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser_Leds.cs:line 237
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 231
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order^(>OrderID)@$o.Product.{ 'name':`Product Name`, 'orderid':$o.OrderID }'
]]></output>
                </test-case>
                <test-case id="0-2140" name="joins.index[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1884363939" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7797728Z" end-time="2024-02-19T13:49:38.7808197Z" duration="0.001047" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[$pos&lt;3]';&#xA; result: [3,1,4]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[$pos<3]'
]]></output>
                </test-case>
                <test-case id="0-2141" name="joins.index[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="39408364" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7808374Z" end-time="2024-02-19T13:49:38.7813967Z" duration="0.000559" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[$pos&lt;3] = $[[0..2]]';&#xA; result: true" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[$pos<3] = $[[0..2]]'
]]></output>
                </test-case>
                <test-case id="0-2142" name="joins.index[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1488396812" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7814093Z" end-time="2024-02-19T13:49:38.7819939Z" duration="0.000585" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$.$#$pos[$pos&lt;3]';&#xA; result: [3,1,4,1,5,9]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$.$#$pos[$pos<3]'
]]></output>
                </test-case>
                <test-case id="0-2143" name="joins.index[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1447619155" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7820058Z" end-time="2024-02-19T13:49:38.7825502Z" duration="0.000545" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$.$#$pos[$pos&lt;3] = $.$[[0..2]]';&#xA; result: true" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$.$#$pos[$pos<3] = $.$[[0..2]]'
]]></output>
                </test-case>
                <test-case id="0-2144" name="joins.index[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1456751973" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7825635Z" end-time="2024-02-19T13:49:38.7831181Z" duration="0.000555" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[$pos&lt;3]^($)';&#xA; result: [1,3,4]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[$pos<3]^($)'
]]></output>
                </test-case>
                <test-case id="0-2145" name="joins.index[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1084399945" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7831308Z" end-time="2024-02-19T13:49:38.7837112Z" duration="0.000581" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[$pos&lt;3]^(&gt;$)';&#xA; result: [4,3,1]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[$pos<3]^(>$)'
]]></output>
                </test-case>
                <test-case id="0-2146" name="joins.index[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1320489883" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7837247Z" end-time="2024-02-19T13:49:38.7844762Z" duration="0.000752" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$^($)#$pos[$pos&lt;3] ';&#xA; result: [1,1,3]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.consume(TokenType expected, Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 201
   at Jsonata.Net.Native.Parsing.Parser.parseSort(Token t, Node lhs) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser_Leds.cs:line 237
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 231
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$^($)#$pos[$pos<3] '
]]></output>
                </test-case>
                <test-case id="0-2147" name="joins.index[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1949059989" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7844902Z" end-time="2024-02-19T13:49:38.7850434Z" duration="0.000553" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[$pos&lt;3][1]';&#xA; result: 1" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[$pos<3][1]'
]]></output>
                </test-case>
                <test-case id="0-2148" name="joins.index[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1939853154" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7850573Z" end-time="2024-02-19T13:49:38.7856222Z" duration="0.000565" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[$pos&lt;3][1][]';&#xA; result: [1]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[$pos<3][1][]'
]]></output>
                </test-case>
                <test-case id="0-2149" name="joins.index[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1547665647" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7856361Z" end-time="2024-02-19T13:49:38.7861733Z" duration="0.000537" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[$pos&lt;3]^($)[-1]';&#xA; result: 4" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[$pos<3]^($)[-1]'
]]></output>
                </test-case>
                <test-case id="0-2150" name="joins.index[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="516109971" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7861865Z" end-time="2024-02-19T13:49:38.7867106Z" duration="0.000524" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[][$pos&lt;3]^($)[-1]';&#xA; result: [4]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[][$pos<3]^($)[-1]'
]]></output>
                </test-case>
                <test-case id="0-2151" name="joins.index[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="758563618" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7867241Z" end-time="2024-02-19T13:49:38.7872456Z" duration="0.000522" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$#$pos[$pos&lt;3]^($)[-1][]';&#xA; result: [4]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 83
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 17
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$#$pos[$pos<3]^($)[-1][]'
]]></output>
                </test-case>
                <test-case id="0-2152" name="joins.index[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1466146879" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7872599Z" end-time="2024-02-19T13:49:38.7879479Z" duration="0.000688" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$[[1..4]]#$pos[$pos&gt;=2]';&#xA; result: [1,5]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.consume(TokenType expected, Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 201
   at Jsonata.Net.Native.Parsing.Parser.parsePredicate(Token t, Node lhs) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser_Leds.cs:line 156
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 231
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$[[1..4]]#$pos[$pos>=2]'
]]></output>
                </test-case>
                <test-case id="0-2153" name="joins.index[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="930614933" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7879623Z" end-time="2024-02-19T13:49:38.7889219Z" duration="0.000960" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order#$o.Product[ProductID=858383].{ 'Product': `Product Name`, 'Order Index': $o }';&#xA; result: [{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order Index&quot;:0},{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order Index&quot;:1}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order#$o.Product[ProductID=858383].{ 'Product': `Product Name`, 'Order Index': $o }'
]]></output>
                </test-case>
                <test-case id="0-2154" name="joins.index[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="321491334" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7889394Z" end-time="2024-02-19T13:49:38.7897457Z" duration="0.000806" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order#$i.Missing';&#xA; result: undefined" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order#$i.Missing'
]]></output>
                </test-case>
                <test-case id="0-2155" name="joins.index[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.index[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1199793329" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7897642Z" end-time="2024-02-19T13:49:38.7906018Z" duration="0.000838" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order#$i.Product{ $string(ProductID): $i }';&#xA; result: {&quot;345664&quot;:1,&quot;858236&quot;:0,&quot;858383&quot;:[0,1]}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order#$i.Product{ $string(ProductID): $i }'
]]></output>
                </test-case>
                <test-case id="0-2156" name="joins.library-joins[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="933364984" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7906175Z" end-time="2024-02-19T13:49:38.7913300Z" duration="0.000713" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l.books@$b[$l.isbn=$b.isbn].{&#xD;&#xA;  'title': $b.title,&#xD;&#xA;  'customer': $l.customer&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10001&quot;},{&quot;title&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;10003&quot;},{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10003&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l.books@$b[$l.isbn=$b.isbn].{
  'title': $b.title,
  'customer': $l.customer
}
'
]]></output>
                </test-case>
                <test-case id="0-2157" name="joins.library-joins[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="173605402" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7913773Z" end-time="2024-02-19T13:49:38.7924870Z" duration="0.001110" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l.books[$l.isbn=isbn].{&#xD;&#xA;  'title': title,&#xD;&#xA;  'customer': $l.customer&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10001&quot;},{&quot;title&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;10003&quot;},{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10003&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l.books[$l.isbn=isbn].{
  'title': title,
  'customer': $l.customer
}
'
]]></output>
                </test-case>
                <test-case id="0-2158" name="joins.library-joins[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1539934055" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7925112Z" end-time="2024-02-19T13:49:38.7932234Z" duration="0.000712" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.books#$pos.$[$substring(title,0,3) = 'The'].$pos';&#xA; result: [1,2]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.books#$pos.$[$substring(title,0,3) = 'The'].$pos'
]]></output>
                </test-case>
                <test-case id="0-2159" name="joins.library-joins[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="969665009" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7932452Z" end-time="2024-02-19T13:49:38.7937869Z" duration="0.000542" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l.books@$b[$l.isbn=$b.isbn].customers[$l.customer=id].{&#xD;&#xA;  'title': $b.title,&#xD;&#xA;  'customer': $l.customer,&#xD;&#xA;  'name': name&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10001&quot;,&quot;name&quot;:&quot;Joe Doe&quot;},{&quot;title&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;10003&quot;,&quot;name&quot;:&quot;Jason Arthur&quot;},{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10003&quot;,&quot;name&quot;:&quot;Jason Arthur&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l.books@$b[$l.isbn=$b.isbn].customers[$l.customer=id].{
  'title': $b.title,
  'customer': $l.customer,
  'name': name
}
'
]]></output>
                </test-case>
                <test-case id="0-2160" name="joins.library-joins[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2016678085" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7938169Z" end-time="2024-02-19T13:49:38.7944846Z" duration="0.000668" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l.books@$b[$l.isbn=$b.isbn].customers@$c[$l.customer=$c.id].{&#xD;&#xA;  'title': $b.title,&#xD;&#xA;  'customer': $l.customer,&#xD;&#xA;  'name': $c.name&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10001&quot;,&quot;name&quot;:&quot;Joe Doe&quot;},{&quot;title&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;10003&quot;,&quot;name&quot;:&quot;Jason Arthur&quot;},{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10003&quot;,&quot;name&quot;:&quot;Jason Arthur&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l.books@$b[$l.isbn=$b.isbn].customers@$c[$l.customer=$c.id].{
  'title': $b.title,
  'customer': $l.customer,
  'name': $c.name
}
'
]]></output>
                </test-case>
                <test-case id="0-2161" name="joins.library-joins[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="308706785" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7945041Z" end-time="2024-02-19T13:49:38.7951634Z" duration="0.000659" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l#$il.books@$b#$ib[$l.isbn=$b.isbn].customers@$c#$ic[$l.customer=$c.id].{&#xD;&#xA;  'title': $b.title,&#xD;&#xA;  'customer': $l.customer,&#xD;&#xA;  'name': $c.name,&#xD;&#xA;  'loan-index': $il,&#xD;&#xA;  'book-index': $ib,&#xD;&#xA;  'customer-index': $ic&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10001&quot;,&quot;name&quot;:&quot;Joe Doe&quot;,&quot;loan-index&quot;:0,&quot;book-index&quot;:0,&quot;customer-index&quot;:0},{&quot;title&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;10003&quot;,&quot;name&quot;:&quot;Jason Arthur&quot;,&quot;loan-index&quot;:1,&quot;book-index&quot;:3,&quot;customer-index&quot;:2},{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10003&quot;,&quot;name&quot;:&quot;Jason Arthur&quot;,&quot;loan-index&quot;:2,&quot;book-index&quot;:0,&quot;customer-index&quot;:2}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l#$il.books@$b#$ib[$l.isbn=$b.isbn].customers@$c#$ic[$l.customer=$c.id].{
  'title': $b.title,
  'customer': $l.customer,
  'name': $c.name,
  'loan-index': $il,
  'book-index': $ib,
  'customer-index': $ic
}
'
]]></output>
                </test-case>
                <test-case id="0-2162" name="joins.library-joins[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1853949045" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7951807Z" end-time="2024-02-19T13:49:38.7959061Z" duration="0.000726" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l#$il.customers#$ic[$il=$ic].{&#xD;&#xA;  'customer': name,&#xD;&#xA;  'return': $l.return&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;customer&quot;:&quot;Joe Doe&quot;,&quot;return&quot;:&quot;2016-12-05&quot;},{&quot;customer&quot;:&quot;Fred Bloggs&quot;,&quot;return&quot;:&quot;2016-10-22&quot;},{&quot;customer&quot;:&quot;Jason Arthur&quot;,&quot;return&quot;:&quot;2016-12-22&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l#$il.customers#$ic[$il=$ic].{
  'customer': name,
  'return': $l.return
}
'
]]></output>
                </test-case>
                <test-case id="0-2163" name="joins.library-joins[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1868114248" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7959185Z" end-time="2024-02-19T13:49:38.7964189Z" duration="0.000501" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l#$il.books@$b#$ib[$l.isbn=$b.isbn]#$ib2.customers@$c#$ic[$l.customer=$c.id].{&#xD;&#xA;  'title': $b.title,&#xD;&#xA;  'customer': $l.customer,&#xD;&#xA;  'name': $c.name,&#xD;&#xA;  'loan-index': $il,&#xD;&#xA;  'book-index': $ib,&#xD;&#xA;  'customer-index': $ic,&#xD;&#xA;  'ib2': $ib2&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10001&quot;,&quot;name&quot;:&quot;Joe Doe&quot;,&quot;loan-index&quot;:0,&quot;book-index&quot;:0,&quot;customer-index&quot;:0,&quot;ib2&quot;:0},{&quot;title&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;10003&quot;,&quot;name&quot;:&quot;Jason Arthur&quot;,&quot;loan-index&quot;:1,&quot;book-index&quot;:3,&quot;customer-index&quot;:2,&quot;ib2&quot;:1},{&quot;title&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;10003&quot;,&quot;name&quot;:&quot;Jason Arthur&quot;,&quot;loan-index&quot;:2,&quot;book-index&quot;:0,&quot;customer-index&quot;:2,&quot;ib2&quot;:2}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l#$il.books@$b#$ib[$l.isbn=$b.isbn]#$ib2.customers@$c#$ic[$l.customer=$c.id].{
  'title': $b.title,
  'customer': $l.customer,
  'name': $c.name,
  'loan-index': $il,
  'book-index': $ib,
  'customer-index': $ic,
  'ib2': $ib2
}
'
]]></output>
                </test-case>
                <test-case id="0-2164" name="joins.library-joins[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="386853256" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7964307Z" end-time="2024-02-19T13:49:38.7968517Z" duration="0.000421" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l.books@$b[$l.isbn=$b.isbn][1].{&#xD;&#xA;  'title': $b.title,&#xD;&#xA;  'customer': $l.customer&#xD;&#xA;}&#xD;&#xA;';&#xA; result: {&quot;title&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;10003&quot;}" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l.books@$b[$l.isbn=$b.isbn][1].{
  'title': $b.title,
  'customer': $l.customer
}
'
]]></output>
                </test-case>
                <test-case id="0-2165" name="joins.library-joins[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1446731736" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7968652Z" end-time="2024-02-19T13:49:38.7973363Z" duration="0.000471" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l.books@$b[$l.isbn=$b.isbn][5].{&#xD;&#xA;  'title': $b.title,&#xD;&#xA;  'customer': $l.customer&#xD;&#xA;}&#xD;&#xA;';&#xA; result: undefined" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l.books@$b[$l.isbn=$b.isbn][5].{
  'title': $b.title,
  'customer': $l.customer
}
'
]]></output>
                </test-case>
                <test-case id="0-2166" name="joins.library-joins[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.joins.library-joins[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="326765203" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.7973470Z" end-time="2024-02-19T13:49:38.7977068Z" duration="0.000360" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$l.books@$b[$l.isbn=$b.isbn][1][].{&#xD;&#xA;  'title': $b.title,&#xD;&#xA;  'customer': $l.customer&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;title&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;10003&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$l.books@$b[$l.isbn=$b.isbn][1][].{
  'title': $b.title,
  'customer': $l.customer
}
'
]]></output>
                </test-case>
                <test-case id="0-2167" name="lambdas.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1293604990" result="Passed" start-time="2024-02-19T13:49:38.7977175Z" end-time="2024-02-19T13:49:38.7978176Z" duration="0.000100" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'function($x){$x*$x}(5)';&#xA; result: 25" />
                  </properties>
                  <output><![CDATA[Expr is 'function($x){$x*$x}(5)'
Result: '25'
Expected: '25'
]]></output>
                </test-case>
                <test-case id="0-2168" name="lambdas.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="378434607" result="Passed" start-time="2024-02-19T13:49:38.7978291Z" end-time="2024-02-19T13:49:38.7979937Z" duration="0.000165" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'function($x){$x&gt;5 ? &quot;foo&quot;}(6)';&#xA; result: &quot;foo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'function($x){$x>5 ? "foo"}(6)'
Result: '"foo"'
Expected: '"foo"'
]]></output>
                </test-case>
                <test-case id="0-2169" name="lambdas.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1158654109" result="Passed" start-time="2024-02-19T13:49:38.7980053Z" end-time="2024-02-19T13:49:38.7981597Z" duration="0.000155" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'function($x){$x&gt;5 ? &quot;foo&quot;}(3)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'function($x){$x>5 ? "foo"}(3)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2170" name="lambdas.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2001408924" result="Passed" start-time="2024-02-19T13:49:38.7981695Z" end-time="2024-02-19T13:49:38.7983208Z" duration="0.000152" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($factorial:= function($x){$x &lt;= 1 ? 1 : $x * $factorial($x-1)}; $factorial(4))';&#xA; result: 24" />
                  </properties>
                  <output><![CDATA[Expr is '($factorial:= function($x){$x <= 1 ? 1 : $x * $factorial($x-1)}; $factorial(4))'
Result: '24'
Expected: '24'
]]></output>
                </test-case>
                <test-case id="0-2171" name="lambdas.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2119306625" result="Passed" start-time="2024-02-19T13:49:38.8247080Z" end-time="2024-02-19T13:49:38.8254607Z" duration="0.000752" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($fibonacci := function($x){$x &lt;= 1 ? $x : $fibonacci($x-1) + $fibonacci($x-2)}; [1,2,3,4,5,6,7,8,9].$fibonacci($))';&#xA; result: [1,1,2,3,5,8,13,21,34]" />
                  </properties>
                  <output><![CDATA[Expr is '($fibonacci := function($x){$x <= 1 ? $x : $fibonacci($x-1) + $fibonacci($x-2)}; [1,2,3,4,5,6,7,8,9].$fibonacci($))'
Result: '[1,1,2,3,5,8,13,21,34]'
Expected: '[1,1,2,3,5,8,13,21,34]'
]]></output>
                </test-case>
                <test-case id="0-2172" name="lambdas.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="851626193" result="Passed" start-time="2024-02-19T13:49:38.8254820Z" end-time="2024-02-19T13:49:38.8258503Z" duration="0.000369" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($nth_price := function($n) { (Account.Order.Product.Price)[$n] }; $nth_price(1) )';&#xA; result: 21.67" />
                  </properties>
                  <output><![CDATA[Expr is '($nth_price := function($n) { (Account.Order.Product.Price)[$n] }; $nth_price(1) )'
Result: '21.67'
Expected: '21.67'
]]></output>
                </test-case>
                <test-case id="0-2173" name="lambdas.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1984537560" result="Passed" start-time="2024-02-19T13:49:38.8258666Z" end-time="2024-02-19T13:49:38.8264935Z" duration="0.000627" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '            (              $even := function($n) { $n = 0 ? true : $odd($n-1) };              $odd := function($n) { $n = 0 ? false : $even($n-1) };              $even(82)            )';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '            (              $even := function($n) { $n = 0 ? true : $odd($n-1) };              $odd := function($n) { $n = 0 ? false : $even($n-1) };              $even(82)            )'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2174" name="lambdas.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1372795061" result="Passed" start-time="2024-02-19T13:49:38.8265057Z" end-time="2024-02-19T13:49:38.8267751Z" duration="0.000270" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '            (              $even := function($n) { $n = 0 ? true : $odd($n-1) };               $odd := function($n) { $n = 0 ? false : $even($n-1) };               $even(65) )';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '            (              $even := function($n) { $n = 0 ? true : $odd($n-1) };               $odd := function($n) { $n = 0 ? false : $even($n-1) };               $even(65) )'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2175" name="lambdas.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="675426121" result="Passed" start-time="2024-02-19T13:49:38.8267860Z" end-time="2024-02-19T13:49:38.8270573Z" duration="0.000272" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '        (          $even := function($n) { $n = 0 ? true : $odd($n-1) };           $odd := function($n) { $n = 0 ? false : $even($n-1) };           $odd(65)         )';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '        (          $even := function($n) { $n = 0 ? true : $odd($n-1) };           $odd := function($n) { $n = 0 ? false : $even($n-1) };           $odd(65)         )'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2176" name="lambdas.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="811119502" result="Passed" start-time="2024-02-19T13:49:38.8270698Z" end-time="2024-02-19T13:49:38.8272214Z" duration="0.000152" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $gcd := λ($a, $b){$b = 0 ? $a : $gcd($b, $a%$b) };  [$gcd(8,12), $gcd(9,12)])';&#xA; result: [4,3]" />
                  </properties>
                  <output><![CDATA[Expr is '(  $gcd := λ($a, $b){$b = 0 ? $a : $gcd($b, $a%$b) };  [$gcd(8,12), $gcd(9,12)])'
Result: '[4,3]'
Expected: '[4,3]'
]]></output>
                </test-case>
                <test-case id="0-2177" name="lambdas.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1340410888" result="Passed" start-time="2024-02-19T13:49:38.8272350Z" end-time="2024-02-19T13:49:38.8274089Z" duration="0.000174" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $range := function($start, $end, $step) { (    $step:=($step?$step:1);    $start+$step &gt; $end ? $start : $append($start, $range($start+$step, $end, $step))   )};  $range(0,15))        ';&#xA; result: [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]" />
                  </properties>
                  <output><![CDATA[Expr is '(  $range := function($start, $end, $step) { (    $step:=($step?$step:1);    $start+$step > $end ? $start : $append($start, $range($start+$step, $end, $step))   )};  $range(0,15))        '
Result: '[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]'
Expected: '[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]'
]]></output>
                </test-case>
                <test-case id="0-2178" name="lambdas.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1796119548" result="Passed" start-time="2024-02-19T13:49:38.8274206Z" end-time="2024-02-19T13:49:38.8275397Z" duration="0.000119" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $range := function($start, $end, $step) { (      $step:=($step?$step:1);        $start+$step &gt; $end ? $start : $append($start, $range($start+$step, $end, $step))   )};  $range(0,15,2))        ';&#xA; result: [0,2,4,6,8,10,12,14]" />
                  </properties>
                  <output><![CDATA[Expr is '(  $range := function($start, $end, $step) { (      $step:=($step?$step:1);        $start+$step > $end ? $start : $append($start, $range($start+$step, $end, $step))   )};  $range(0,15,2))        '
Result: '[0,2,4,6,8,10,12,14]'
Expected: '[0,2,4,6,8,10,12,14]'
]]></output>
                </test-case>
                <test-case id="0-2179" name="lambdas.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.lambdas.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="143143003" result="Passed" start-time="2024-02-19T13:49:38.8275468Z" end-time="2024-02-19T13:49:38.8276725Z" duration="0.000126" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $median := λ($x){$sort($x)[$count($x)/2]};  $median([5,4,3,2,1,6,7,8,1]) )';&#xA; result: 4" />
                  </properties>
                  <output><![CDATA[Expr is '( $median := λ($x){$sort($x)[$count($x)/2]};  $median([5,4,3,2,1,6,7,8,1]) )'
Result: '4'
Expected: '4'
]]></output>
                </test-case>
                <test-case id="0-2180" name="literals.array-inputs[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.array-inputs[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1862994173" result="Passed" start-time="2024-02-19T13:49:38.8276842Z" end-time="2024-02-19T13:49:38.8278000Z" duration="0.000116" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}';&#xA; result: {&quot;fgFoo:0:hausnummer&quot;:{&quot;type&quot;:&quot;de.example.api.PossibleValuesList&quot;,&quot;value&quot;:[{&quot;label&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}'
Result: '{"fgFoo:0:hausnummer":{"type":"de.example.api.PossibleValuesList","value":[{"label":"","value":""}]}}'
Expected: '{"fgFoo:0:hausnummer":{"type":"de.example.api.PossibleValuesList","value":[{"label":"","value":""}]}}'
]]></output>
                </test-case>
                <test-case id="0-2181" name="literals.array-inputs[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.array-inputs[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="902810717" result="Passed" start-time="2024-02-19T13:49:38.8278112Z" end-time="2024-02-19T13:49:38.8279162Z" duration="0.000105" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}';&#xA; result: {&quot;fgFoo:0:hausnummer&quot;:{&quot;type&quot;:&quot;de.example.api.PossibleValuesList&quot;,&quot;value&quot;:[{&quot;label&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}'
Result: '{"fgFoo:0:hausnummer":{"type":"de.example.api.PossibleValuesList","value":[{"label":"","value":""}]}}'
Expected: '{"fgFoo:0:hausnummer":{"type":"de.example.api.PossibleValuesList","value":[{"label":"","value":""}]}}'
]]></output>
                </test-case>
                <test-case id="0-2182" name="literals.array-inputs[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.array-inputs[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1901412659" result="Passed" start-time="2024-02-19T13:49:38.8279273Z" end-time="2024-02-19T13:49:38.8280591Z" duration="0.000132" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}';&#xA; result: {&quot;fgFoo:0:hausnummer&quot;:{&quot;type&quot;:&quot;de.example.api.PossibleValuesList&quot;,&quot;value&quot;:[{&quot;label&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}'
Result: '{"fgFoo:0:hausnummer":{"type":"de.example.api.PossibleValuesList","value":[{"label":"","value":""}]}}'
Expected: '{"fgFoo:0:hausnummer":{"type":"de.example.api.PossibleValuesList","value":[{"label":"","value":""}]}}'
]]></output>
                </test-case>
                <test-case id="0-2183" name="literals.array-inputs[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.array-inputs[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1983710381" result="Passed" start-time="2024-02-19T13:49:38.8280716Z" end-time="2024-02-19T13:49:38.8281707Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}';&#xA; result: {&quot;fgFoo:0:hausnummer&quot;:{&quot;type&quot;:&quot;de.example.api.PossibleValuesList&quot;,&quot;value&quot;:[{&quot;label&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '{'fgFoo:0:hausnummer': {'type': 'de.example.api.PossibleValuesList', 'value': [{'label': '', 'value': ''}] }}'
Result: '{"fgFoo:0:hausnummer":{"type":"de.example.api.PossibleValuesList","value":[{"label":"","value":""}]}}'
Expected: '{"fgFoo:0:hausnummer":{"type":"de.example.api.PossibleValuesList","value":[{"label":"","value":""}]}}'
]]></output>
                </test-case>
                <test-case id="0-2184" name="literals.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1736467164" result="Passed" start-time="2024-02-19T13:49:38.8281791Z" end-time="2024-02-19T13:49:38.8282329Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello&quot;';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"hello"'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-2185" name="literals.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="783105424" result="Passed" start-time="2024-02-19T13:49:38.8282390Z" end-time="2024-02-19T13:49:38.8282898Z" duration="0.000051" asserts="1">
                  <properties>
                    <property name="Description" value="expr: ''hello'';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is ''hello''
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-2186" name="literals.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="561822567" result="Passed" start-time="2024-02-19T13:49:38.8282988Z" end-time="2024-02-19T13:49:38.8283667Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;Wayne's World&quot;';&#xA; result: &quot;Wayne's World&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"Wayne's World"'
Result: '"Wayne's World"'
Expected: '"Wayne's World"'
]]></output>
                </test-case>
                <test-case id="0-2187" name="literals.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1189441768" result="Passed" start-time="2024-02-19T13:49:38.8283959Z" end-time="2024-02-19T13:49:38.8284934Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '42';&#xA; result: 42" />
                  </properties>
                  <output><![CDATA[Expr is '42'
Result: '42'
Expected: '42'
]]></output>
                </test-case>
                <test-case id="0-2188" name="literals.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="841366460" result="Passed" start-time="2024-02-19T13:49:38.8285054Z" end-time="2024-02-19T13:49:38.8285958Z" duration="0.000091" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '-42';&#xA; result: -42" />
                  </properties>
                  <output><![CDATA[Expr is '-42'
Result: '-42'
Expected: '-42'
]]></output>
                </test-case>
                <test-case id="0-2189" name="literals.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1649369747" result="Passed" start-time="2024-02-19T13:49:38.8286065Z" end-time="2024-02-19T13:49:38.8287458Z" duration="0.000139" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '3.14159';&#xA; result: 3.14159" />
                  </properties>
                  <output><![CDATA[Expr is '3.14159'
Result: '3.14159'
Expected: '3.14159'
]]></output>
                </test-case>
                <test-case id="0-2190" name="literals.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2005268026" result="Passed" start-time="2024-02-19T13:49:38.8287594Z" end-time="2024-02-19T13:49:38.8289193Z" duration="0.000160" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '6.022e23';&#xA; result: 6.022E+23" />
                  </properties>
                  <output><![CDATA[Expr is '6.022e23'
Result: '602200000000000000000000.0'
Expected: '6.022E+23'
]]></output>
                </test-case>
                <test-case id="0-2191" name="literals.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="342927104" result="Passed" start-time="2024-02-19T13:49:38.8289292Z" end-time="2024-02-19T13:49:38.8289958Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '1.602E-19';&#xA; result: 1.602E-19" />
                  </properties>
                  <output><![CDATA[Expr is '1.602E-19'
Result: '0.0000000000000000001602'
Expected: '1.602E-19'
]]></output>
                </test-case>
                <test-case id="0-2192" name="literals.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1722863536" result="Passed" start-time="2024-02-19T13:49:38.8290036Z" end-time="2024-02-19T13:49:38.8295565Z" duration="0.000553" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '10e1000';&#xA; result: error S0102" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0102.
Actually thrown S0102.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '10e1000'
]]></output>
                </test-case>
                <test-case id="0-2193" name="literals.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="959512867" result="Passed" start-time="2024-02-19T13:49:38.8295671Z" end-time="2024-02-19T13:49:38.8296345Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello\tworld&quot;';&#xA; result: &quot;hello\tworld&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"hello\tworld"'
Result: '"hello\tworld"'
Expected: '"hello\tworld"'
]]></output>
                </test-case>
                <test-case id="0-2194" name="literals.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="96269861" result="Passed" start-time="2024-02-19T13:49:38.8296408Z" end-time="2024-02-19T13:49:38.8296898Z" duration="0.000049" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello\nworld&quot;';&#xA; result: &quot;hello\nworld&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"hello\nworld"'
Result: '"hello\nworld"'
Expected: '"hello\nworld"'
]]></output>
                </test-case>
                <test-case id="0-2195" name="literals.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1575657154" result="Passed" start-time="2024-02-19T13:49:38.8296958Z" end-time="2024-02-19T13:49:38.8297447Z" duration="0.000049" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello \&quot;world\&quot;&quot;';&#xA; result: &quot;hello \&quot;world\&quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"hello \"world\""'
Result: '"hello \"world\""'
Expected: '"hello \"world\""'
]]></output>
                </test-case>
                <test-case id="0-2196" name="literals.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="332942966" result="Passed" start-time="2024-02-19T13:49:38.8297503Z" end-time="2024-02-19T13:49:38.8297965Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;C:\\Test\\test.txt&quot;';&#xA; result: &quot;C:\\Test\\test.txt&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"C:\\Test\\test.txt"'
Result: '"C:\\Test\\test.txt"'
Expected: '"C:\\Test\\test.txt"'
]]></output>
                </test-case>
                <test-case id="0-2197" name="literals.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1767766211" result="Passed" start-time="2024-02-19T13:49:38.8298021Z" end-time="2024-02-19T13:49:38.8298513Z" duration="0.000049" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;\u03BB-calculus rocks&quot;';&#xA; result: &quot;λ-calculus rocks&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"\u03BB-calculus rocks"'
Result: '"λ-calculus rocks"'
Expected: '"λ-calculus rocks"'
]]></output>
                </test-case>
                <test-case id="0-2198" name="literals.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1060765899" result="Passed" start-time="2024-02-19T13:49:38.8298592Z" end-time="2024-02-19T13:49:38.8299205Z" duration="0.000061" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;𝄞&quot;';&#xA; result: &quot;𝄞&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"𝄞"'
Result: '"𝄞"'
Expected: '"𝄞"'
]]></output>
                </test-case>
                <test-case id="0-2199" name="literals.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="10020237" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.8299278Z" end-time="2024-02-19T13:49:38.8313735Z" duration="0.001446" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '&quot;\y&quot;';&#xA; result: error S0103" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Invalid pattern '\y' at offset 2. Unrecognized escape sequence \\y.
(RegexParseException)
   at System.Text.RegularExpressions.RegexParser.ScanCharEscape()
   at System.Text.RegularExpressions.RegexParser.UnescapeImpl(String input, Int32 i)
   at System.Text.RegularExpressions.RegexParser.Unescape(String input)
   at System.Text.RegularExpressions.Regex.Unescape(String str)
   at Jsonata.Net.Native.Parsing.Helpers.Unescape(String src) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Helpers.cs:line 28
   at Jsonata.Net.Native.Parsing.Parser.parseString(Token t) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser_Nuds.cs:line 16
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 221
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '"\y"'
]]></output>
                </test-case>
                <test-case id="0-2200" name="literals.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="757634742" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.8313919Z" end-time="2024-02-19T13:49:38.8321303Z" duration="0.000739" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '&quot;\u&quot;';&#xA; result: error S0104" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Invalid pattern '\u' at offset 2. Insufficient hexadecimal digits.
(RegexParseException)
   at System.Text.RegularExpressions.RegexParser.ScanHex(Int32 c)
   at System.Text.RegularExpressions.RegexParser.ScanCharEscape()
   at System.Text.RegularExpressions.RegexParser.UnescapeImpl(String input, Int32 i)
   at System.Text.RegularExpressions.RegexParser.Unescape(String input)
   at System.Text.RegularExpressions.Regex.Unescape(String str)
   at Jsonata.Net.Native.Parsing.Helpers.Unescape(String src) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Helpers.cs:line 28
   at Jsonata.Net.Native.Parsing.Parser.parseString(Token t) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser_Nuds.cs:line 16
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 221
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '"\u"'
]]></output>
                </test-case>
                <test-case id="0-2201" name="literals.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="26884893" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.8321426Z" end-time="2024-02-19T13:49:38.8331715Z" duration="0.001029" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '&quot;\u123t&quot;';&#xA; result: error S0104" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Invalid pattern '\u123t' at offset 6. Insufficient hexadecimal digits.
(RegexParseException)
   at System.Text.RegularExpressions.RegexParser.ScanHex(Int32 c)
   at System.Text.RegularExpressions.RegexParser.ScanCharEscape()
   at System.Text.RegularExpressions.RegexParser.UnescapeImpl(String input, Int32 i)
   at System.Text.RegularExpressions.RegexParser.Unescape(String input)
   at System.Text.RegularExpressions.Regex.Unescape(String str)
   at Jsonata.Net.Native.Parsing.Helpers.Unescape(String src) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Helpers.cs:line 28
   at Jsonata.Net.Native.Parsing.Parser.parseString(Token t) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser_Nuds.cs:line 16
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 221
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is '"\u123t"'
]]></output>
                </test-case>
                <test-case id="0-2202" name="literals.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1570625382" result="Passed" start-time="2024-02-19T13:49:38.8332006Z" end-time="2024-02-19T13:49:38.8333364Z" duration="0.000136" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{ 'foo': { 'sequence': 123, 'bar': 'baz' } } ';&#xA; result: {&quot;foo&quot;:{&quot;sequence&quot;:123,&quot;bar&quot;:&quot;baz&quot;}}" />
                  </properties>
                  <output><![CDATA[Expr is '{ 'foo': { 'sequence': 123, 'bar': 'baz' } } '
Result: '{"foo":{"sequence":123,"bar":"baz"}}'
Expected: '{"foo":{"sequence":123,"bar":"baz"}}'
]]></output>
                </test-case>
                <test-case id="0-2203" name="literals.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.literals.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="781199045" result="Passed" start-time="2024-02-19T13:49:38.8333480Z" end-time="2024-02-19T13:49:38.8334575Z" duration="0.000110" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{ 'foo': { 'sequence': true, 'bar': 'baz' } } ';&#xA; result: {&quot;foo&quot;:{&quot;sequence&quot;:true,&quot;bar&quot;:&quot;baz&quot;}}" />
                  </properties>
                  <output><![CDATA[Expr is '{ 'foo': { 'sequence': true, 'bar': 'baz' } } '
Result: '{"foo":{"sequence":true,"bar":"baz"}}'
Expected: '{"foo":{"sequence":true,"bar":"baz"}}'
]]></output>
                </test-case>
                <test-case id="0-2204" name="matchers.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.matchers.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1693740370" result="Failed" label="Error" start-time="2024-02-19T13:49:38.8334696Z" end-time="2024-02-19T13:49:38.8372093Z" duration="0.003740" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '(&#xD;&#xA;    $generateMatcher := function($ch) {&#xD;&#xA;      $match := function($str, $offset) {(&#xD;&#xA;        $before := $substringBefore($str, $ch);&#xD;&#xA;        $start := $length($before) + ($exists($offset) ? $offset : 0);&#xD;&#xA;        $end := $start + $length($ch);&#xD;&#xA;        $before != $str and $length($ch) &gt; 0 ? {&#xD;&#xA;          'match': $ch,&#xD;&#xA;          'start': $start,&#xD;&#xA;          'end': $end,&#xD;&#xA;          'groups': [],&#xD;&#xA;          'next': function() {$match($substringAfter($str, $ch), $end)}&#xD;&#xA;        }&#xD;&#xA;      )}&#xD;&#xA;    };&#xD;&#xA;&#xD;&#xA;    $match(&quot;abracadabra&quot;, $generateMatcher('a'))&#xD;&#xA;)';&#xA; result: [{&quot;match&quot;:&quot;a&quot;,&quot;index&quot;:0,&quot;groups&quot;:[]},{&quot;match&quot;:&quot;a&quot;,&quot;index&quot;:3,&quot;groups&quot;:[]},{&quot;match&quot;:&quot;a&quot;,&quot;index&quot;:5,&quot;groups&quot;:[]},{&quot;match&quot;:&quot;a&quot;,&quot;index&quot;:7,&quot;groups&quot;:[]},{&quot;match&quot;:&quot;a&quot;,&quot;index&quot;:10,&quot;groups&quot;:[]}]" />
                  </properties>
                  <failure>
                    <message><![CDATA[Jsonata.Net.Native.JsonataException : T0410: Argument 2 of function match should be regex. Passed Function ("")]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.Eval.BuiltinFunctions.match(String str, JToken pattern, Int32 limit) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\BuiltinFunctions.cs:line 402
--- End of stack trace from previous location ---
   at Jsonata.Net.Native.Eval.FunctionTokenCsharp.Invoke(List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\FunctionTokenCsharp.cs:line 114
   at Jsonata.Net.Native.Eval.EvalProcessor.InvokeFunction(FunctionToken function, List`1 args, JToken context, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 474
   at Jsonata.Net.Native.Eval.EvalProcessor.evalFunctionCall(FunctionCallNode functionCallNode, JToken input, EvaluationEnvironment env, JToken evalutedFirstArgFromApplication) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 469
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 117
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.evalBlock(BlockNode blockNode, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 443
   at Jsonata.Net.Native.Eval.EvalProcessor.EvalInternal(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 95
   at Jsonata.Net.Native.Eval.EvalProcessor.Eval(Node node, JToken input, EvaluationEnvironment env) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 47
   at Jsonata.Net.Native.Eval.EvalProcessor.EvaluateJson(Node rootNode, JToken data, EvaluationEnvironment parentEnvironment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Eval\EvalProcessor.cs:line 29
   at Jsonata.Net.Native.JsonataQuery.Eval(JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 44
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, EvaluationEnvironment environment) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 186
   at Jsonata.Net.Native.JsonNet.JsonataExtensions.EvalNewtonsoft(JsonataQuery query, JToken data, JObject bindings) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.JsonNet\JsonataExtensions.cs:line 181
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 94]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '(
    $generateMatcher := function($ch) {
      $match := function($str, $offset) {(
        $before := $substringBefore($str, $ch);
        $start := $length($before) + ($exists($offset) ? $offset : 0);
        $end := $start + $length($ch);
        $before != $str and $length($ch) > 0 ? {
          'match': $ch,
          'start': $start,
          'end': $end,
          'groups': [],
          'next': function() {$match($substringAfter($str, $ch), $end)}
        }
      )}
    };

    $match("abracadabra", $generateMatcher('a'))
)'
]]></output>
                </test-case>
                <test-case id="0-2205" name="matchers.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.matchers.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="544286993" result="Passed" start-time="2024-02-19T13:49:38.8372365Z" end-time="2024-02-19T13:49:38.8380180Z" duration="0.000782" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$split('some text', $uppercase)';&#xA; result: error T1010" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1010.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$split('some text', $uppercase)'
]]></output>
                </test-case>
                <test-case id="0-2206" name="missing-paths.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.missing-paths.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2054421072" result="Passed" start-time="2024-02-19T13:49:38.8380426Z" end-time="2024-02-19T13:49:38.8381409Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'fdf';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'fdf'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2207" name="missing-paths.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.missing-paths.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1629092966" result="Passed" start-time="2024-02-19T13:49:38.8381509Z" end-time="2024-02-19T13:49:38.8382310Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'fdf.ett';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'fdf.ett'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2208" name="missing-paths.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.missing-paths.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1705303519" result="Passed" start-time="2024-02-19T13:49:38.8382508Z" end-time="2024-02-19T13:49:38.8383311Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'fdf.ett[10]';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'fdf.ett[10]'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2209" name="missing-paths.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.missing-paths.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1793548860" result="Passed" start-time="2024-02-19T13:49:38.8383409Z" end-time="2024-02-19T13:49:38.8384405Z" duration="0.000100" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'fdf.ett[vc &gt; 10]';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'fdf.ett[vc > 10]'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2210" name="missing-paths.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.missing-paths.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="388673827" result="Passed" start-time="2024-02-19T13:49:38.8384529Z" end-time="2024-02-19T13:49:38.8385868Z" duration="0.000134" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'fdf.ett + 27';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'fdf.ett + 27'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2211" name="missing-paths.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.missing-paths.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1740437743" result="Passed" start-time="2024-02-19T13:49:38.8385985Z" end-time="2024-02-19T13:49:38.8387031Z" duration="0.000105" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$fdsd';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$fdsd'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2212" name="multiple-array-selectors.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.multiple-array-selectors.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="524969501" result="Passed" start-time="2024-02-19T13:49:38.8387130Z" end-time="2024-02-19T13:49:38.8388112Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..10][[1..3,8,-1]]';&#xA; result: [2,3,4,9,10]" />
                  </properties>
                  <output><![CDATA[Expr is '[1..10][[1..3,8,-1]]'
Result: '[2,3,4,9,10]'
Expected: '[2,3,4,9,10]'
]]></output>
                </test-case>
                <test-case id="0-2213" name="multiple-array-selectors.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.multiple-array-selectors.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1396791052" result="Passed" start-time="2024-02-19T13:49:38.8388194Z" end-time="2024-02-19T13:49:38.8389179Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..10][[1..3,8,5]]';&#xA; result: [2,3,4,6,9]" />
                  </properties>
                  <output><![CDATA[Expr is '[1..10][[1..3,8,5]]'
Result: '[2,3,4,6,9]'
Expected: '[2,3,4,6,9]'
]]></output>
                </test-case>
                <test-case id="0-2214" name="multiple-array-selectors.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.multiple-array-selectors.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1254154483" result="Passed" start-time="2024-02-19T13:49:38.8389271Z" end-time="2024-02-19T13:49:38.8390264Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..10][[1..3,8,false]]';&#xA; result: [1,2,3,4,5,6,7,8,9,10]" />
                  </properties>
                  <output><![CDATA[Expr is '[1..10][[1..3,8,false]]'
Result: '[1,2,3,4,5,6,7,8,9,10]'
Expected: '[1,2,3,4,5,6,7,8,9,10]'
]]></output>
                </test-case>
                <test-case id="0-2215" name="null.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.null.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1113867368" result="Passed" start-time="2024-02-19T13:49:38.8390339Z" end-time="2024-02-19T13:49:38.8390867Z" duration="0.000053" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'null';&#xA; result: null" />
                  </properties>
                  <output><![CDATA[Expr is 'null'
Result: 'null'
Expected: 'null'
]]></output>
                </test-case>
                <test-case id="0-2216" name="null.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.null.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="554777773" result="Passed" start-time="2024-02-19T13:49:38.8390932Z" end-time="2024-02-19T13:49:38.8391638Z" duration="0.000071" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[null]';&#xA; result: [null]" />
                  </properties>
                  <output><![CDATA[Expr is '[null]'
Result: '[null]'
Expected: '[null]'
]]></output>
                </test-case>
                <test-case id="0-2217" name="null.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.null.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2017722311" result="Passed" start-time="2024-02-19T13:49:38.8391722Z" end-time="2024-02-19T13:49:38.8392266Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[null, null]';&#xA; result: [null,null]" />
                  </properties>
                  <output><![CDATA[Expr is '[null, null]'
Result: '[null,null]'
Expected: '[null,null]'
]]></output>
                </test-case>
                <test-case id="0-2218" name="null.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.null.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="131647084" result="Passed" start-time="2024-02-19T13:49:38.8392324Z" end-time="2024-02-19T13:49:38.8392969Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$not(null)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$not(null)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2219" name="null.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.null.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1751231479" result="Passed" start-time="2024-02-19T13:49:38.8393042Z" end-time="2024-02-19T13:49:38.8393868Z" duration="0.000083" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'null = null';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is 'null = null'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2220" name="null.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.null.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="884909169" result="Passed" start-time="2024-02-19T13:49:38.8393971Z" end-time="2024-02-19T13:49:38.8394556Z" duration="0.000059" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'null != null';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'null != null'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2221" name="null.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.null.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1284807082" result="Passed" start-time="2024-02-19T13:49:38.8394623Z" end-time="2024-02-19T13:49:38.8395369Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;true&quot;: true, &quot;false&quot;:false, &quot;null&quot;: null}';&#xA; result: {&quot;true&quot;:true,&quot;false&quot;:false,&quot;null&quot;:null}" />
                  </properties>
                  <output><![CDATA[Expr is '{"true": true, "false":false, "null": null}'
Result: '{"true":true,"false":false,"null":null}'
Expected: '{"true":true,"false":false,"null":null}'
]]></output>
                </test-case>
                <test-case id="0-2222" name="numeric-operators.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="452238530" result="Passed" start-time="2024-02-19T13:49:38.8395443Z" end-time="2024-02-19T13:49:38.8396123Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar + bar';&#xA; result: 140" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar + bar'
Result: '140'
Expected: '140'
]]></output>
                </test-case>
                <test-case id="0-2223" name="numeric-operators.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="876548507" result="Passed" start-time="2024-02-19T13:49:38.8396195Z" end-time="2024-02-19T13:49:38.8397028Z" duration="0.000083" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar + foo.bar';&#xA; result: 140" />
                  </properties>
                  <output><![CDATA[Expr is 'bar + foo.bar'
Result: '140'
Expected: '140'
]]></output>
                </test-case>
                <test-case id="0-2224" name="numeric-operators.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1300869730" result="Passed" start-time="2024-02-19T13:49:38.8397116Z" end-time="2024-02-19T13:49:38.8397690Z" duration="0.000058" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar - bar';&#xA; result: -56" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar - bar'
Result: '-56'
Expected: '-56'
]]></output>
                </test-case>
                <test-case id="0-2225" name="numeric-operators.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1658481820" result="Passed" start-time="2024-02-19T13:49:38.8397748Z" end-time="2024-02-19T13:49:38.8398250Z" duration="0.000050" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar - foo.bar';&#xA; result: 56" />
                  </properties>
                  <output><![CDATA[Expr is 'bar - foo.bar'
Result: '56'
Expected: '56'
]]></output>
                </test-case>
                <test-case id="0-2226" name="numeric-operators.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="396443089" result="Passed" start-time="2024-02-19T13:49:38.8398307Z" end-time="2024-02-19T13:49:38.8399262Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar * bar';&#xA; result: 4116" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar * bar'
Result: '4116'
Expected: '4116'
]]></output>
                </test-case>
                <test-case id="0-2227" name="numeric-operators.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2039596973" result="Passed" start-time="2024-02-19T13:49:38.8399335Z" end-time="2024-02-19T13:49:38.8399850Z" duration="0.000052" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar * foo.bar';&#xA; result: 4116" />
                  </properties>
                  <output><![CDATA[Expr is 'bar * foo.bar'
Result: '4116'
Expected: '4116'
]]></output>
                </test-case>
                <test-case id="0-2228" name="numeric-operators.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1888267699" result="Passed" start-time="2024-02-19T13:49:38.8399914Z" end-time="2024-02-19T13:49:38.8400614Z" duration="0.000070" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar / bar';&#xA; result: 0.42857142857142855" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar / bar'
Result: '0.428571428571429'
Expected: '0.42857142857142855'
]]></output>
                </test-case>
                <test-case id="0-2229" name="numeric-operators.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1944621554" result="Passed" start-time="2024-02-19T13:49:38.8400679Z" end-time="2024-02-19T13:49:38.8401443Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar / foo.bar';&#xA; result: 2.3333333333333335" />
                  </properties>
                  <output><![CDATA[Expr is 'bar / foo.bar'
Result: '2.33333333333333'
Expected: '2.3333333333333335'
]]></output>
                </test-case>
                <test-case id="0-2230" name="numeric-operators.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="342483155" result="Passed" start-time="2024-02-19T13:49:38.8401544Z" end-time="2024-02-19T13:49:38.8402243Z" duration="0.000070" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar % bar';&#xA; result: 42" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar % bar'
Result: '42'
Expected: '42'
]]></output>
                </test-case>
                <test-case id="0-2231" name="numeric-operators.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1190836938" result="Passed" start-time="2024-02-19T13:49:38.8402320Z" end-time="2024-02-19T13:49:38.8402969Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar % foo.bar';&#xA; result: 14" />
                  </properties>
                  <output><![CDATA[Expr is 'bar % foo.bar'
Result: '14'
Expected: '14'
]]></output>
                </test-case>
                <test-case id="0-2232" name="numeric-operators.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="279644989" result="Passed" start-time="2024-02-19T13:49:38.8403062Z" end-time="2024-02-19T13:49:38.8403953Z" duration="0.000089" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar + foo.bar * bar';&#xA; result: 4214" />
                  </properties>
                  <output><![CDATA[Expr is 'bar + foo.bar * bar'
Result: '4214'
Expected: '4214'
]]></output>
                </test-case>
                <test-case id="0-2233" name="numeric-operators.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1786099311" result="Passed" start-time="2024-02-19T13:49:38.8404058Z" end-time="2024-02-19T13:49:38.8406249Z" duration="0.000219" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar * bar + bar';&#xA; result: 4214" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar * bar + bar'
Result: '4214'
Expected: '4214'
]]></output>
                </test-case>
                <test-case id="0-2234" name="numeric-operators.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1532991908" result="Passed" start-time="2024-02-19T13:49:38.8406353Z" end-time="2024-02-19T13:49:38.8407079Z" duration="0.000073" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '24 * notexist';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '24 * notexist'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2235" name="numeric-operators.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1836109280" result="Passed" start-time="2024-02-19T13:49:38.8407154Z" end-time="2024-02-19T13:49:38.8407760Z" duration="0.000061" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'notexist + 1';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'notexist + 1'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2236" name="numeric-operators.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1479668982" result="Passed" start-time="2024-02-19T13:49:38.8407827Z" end-time="2024-02-19T13:49:38.8419383Z" duration="0.001156" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '1/(10e300 * 10e100) ';&#xA; result: error D1001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D1001.
Actually thrown S0102.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '1/(10e300 * 10e100) '
]]></output>
                </test-case>
                <test-case id="0-2237" name="numeric-operators.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1120213614" result="Passed" start-time="2024-02-19T13:49:38.8419530Z" end-time="2024-02-19T13:49:38.8426897Z" duration="0.000737" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '&quot;5&quot; + &quot;5&quot;';&#xA; result: error T2001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2001.
Actually thrown T2001.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '"5" + "5"'
]]></output>
                </test-case>
                <test-case id="0-2238" name="numeric-operators.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="289970011" result="Passed" start-time="2024-02-19T13:49:38.8427070Z" end-time="2024-02-19T13:49:38.8428463Z" duration="0.000139" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '- notexist';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '- notexist'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2239" name="numeric-operators.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1192180171" result="Passed" start-time="2024-02-19T13:49:38.8428613Z" end-time="2024-02-19T13:49:38.8435381Z" duration="0.000677" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'false + 1';&#xA; result: error T2001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2001.
Actually thrown T2001.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'false + 1'
]]></output>
                </test-case>
                <test-case id="0-2240" name="numeric-operators.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.numeric-operators.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="876167999" result="Failed" start-time="2024-02-19T13:49:38.8435619Z" end-time="2024-02-19T13:49:38.8461744Z" duration="0.002612" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'false + $x';&#xA; result: error T2001" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error T2001 (), got 'undefined']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is 'false + $x'
Result: 'undefined'
Expected error T2001
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error T2001 (), got 'undefined']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2241" name="object-constructor.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1080213248" result="Passed" start-time="2024-02-19T13:49:38.8461900Z" end-time="2024-02-19T13:49:38.8463511Z" duration="0.000161" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{}';&#xA; result: {}" />
                  </properties>
                  <output><![CDATA[Expr is '{}'
Result: '{}'
Expected: '{}'
]]></output>
                </test-case>
                <test-case id="0-2242" name="object-constructor.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1631621896" result="Passed" start-time="2024-02-19T13:49:38.8463636Z" end-time="2024-02-19T13:49:38.8464702Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;key&quot;: &quot;value&quot;}';&#xA; result: {&quot;key&quot;:&quot;value&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is '{"key": "value"}'
Result: '{"key":"value"}'
Expected: '{"key":"value"}'
]]></output>
                </test-case>
                <test-case id="0-2243" name="object-constructor.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1195301247" result="Passed" start-time="2024-02-19T13:49:38.8464818Z" end-time="2024-02-19T13:49:38.8465887Z" duration="0.000107" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;one&quot;: 1, &quot;two&quot;: 2}';&#xA; result: {&quot;one&quot;:1,&quot;two&quot;:2}" />
                  </properties>
                  <output><![CDATA[Expr is '{"one": 1, "two": 2}'
Result: '{"one":1,"two":2}'
Expected: '{"one":1,"two":2}'
]]></output>
                </test-case>
                <test-case id="0-2244" name="object-constructor.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1260695920" result="Passed" start-time="2024-02-19T13:49:38.8465998Z" end-time="2024-02-19T13:49:38.8467011Z" duration="0.000101" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;one&quot;: 1, &quot;two&quot;: 2}.two';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '{"one": 1, "two": 2}.two'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-2245" name="object-constructor.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="264830283" result="Passed" start-time="2024-02-19T13:49:38.8467115Z" end-time="2024-02-19T13:49:38.8468220Z" duration="0.000111" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;one&quot;: 1, &quot;two&quot;: {&quot;three&quot;: 3, &quot;four&quot;: &quot;4&quot;}}';&#xA; result: {&quot;one&quot;:1,&quot;two&quot;:{&quot;three&quot;:3,&quot;four&quot;:&quot;4&quot;}}" />
                  </properties>
                  <output><![CDATA[Expr is '{"one": 1, "two": {"three": 3, "four": "4"}}'
Result: '{"one":1,"two":{"three":3,"four":"4"}}'
Expected: '{"one":1,"two":{"three":3,"four":"4"}}'
]]></output>
                </test-case>
                <test-case id="0-2246" name="object-constructor.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1965441250" result="Passed" start-time="2024-02-19T13:49:38.8468323Z" end-time="2024-02-19T13:49:38.8469421Z" duration="0.000110" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;one&quot;: 1, &quot;two&quot;: [3, &quot;four&quot;]}';&#xA; result: {&quot;one&quot;:1,&quot;two&quot;:[3,&quot;four&quot;]}" />
                  </properties>
                  <output><![CDATA[Expr is '{"one": 1, "two": [3, "four"]}'
Result: '{"one":1,"two":[3,"four"]}'
Expected: '{"one":1,"two":[3,"four"]}'
]]></output>
                </test-case>
                <test-case id="0-2247" name="object-constructor.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="326072484" result="Passed" start-time="2024-02-19T13:49:38.8469522Z" end-time="2024-02-19T13:49:38.8470502Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{&quot;test&quot;: ()}';&#xA; result: {}" />
                  </properties>
                  <output><![CDATA[Expr is '{"test": ()}'
Result: '{}'
Expected: '{}'
]]></output>
                </test-case>
                <test-case id="0-2248" name="object-constructor.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1852842031" result="Passed" start-time="2024-02-19T13:49:38.8470614Z" end-time="2024-02-19T13:49:38.8471492Z" duration="0.000088" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'blah.{}';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'blah.{}'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2249" name="object-constructor.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1129886140" result="Passed" start-time="2024-02-19T13:49:38.8471597Z" end-time="2024-02-19T13:49:38.8472922Z" duration="0.000133" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order{OrderID: Product.&quot;Product Name&quot;}';&#xA; result: {&quot;order103&quot;:[&quot;Bowler Hat&quot;,&quot;Trilby hat&quot;],&quot;order104&quot;:[&quot;Bowler Hat&quot;,&quot;Cloak&quot;]}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order{OrderID: Product."Product Name"}'
Result: '{"order103":["Bowler Hat","Trilby hat"],"order104":["Bowler Hat","Cloak"]}'
Expected: '{"order103":["Bowler Hat","Trilby hat"],"order104":["Bowler Hat","Cloak"]}'
]]></output>
                </test-case>
                <test-case id="0-2250" name="object-constructor.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1020879381" result="Passed" start-time="2024-02-19T13:49:38.8473025Z" end-time="2024-02-19T13:49:38.8474508Z" duration="0.000148" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.{OrderID: Product.&quot;Product Name&quot;}';&#xA; result: [{&quot;order103&quot;:[&quot;Bowler Hat&quot;,&quot;Trilby hat&quot;]},{&quot;order104&quot;:[&quot;Bowler Hat&quot;,&quot;Cloak&quot;]}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.{OrderID: Product."Product Name"}'
Result: '[{"order103":["Bowler Hat","Trilby hat"]},{"order104":["Bowler Hat","Cloak"]}]'
Expected: '[{"order103":["Bowler Hat","Trilby hat"]},{"order104":["Bowler Hat","Cloak"]}]'
]]></output>
                </test-case>
                <test-case id="0-2251" name="object-constructor.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="462704302" result="Passed" start-time="2024-02-19T13:49:38.8474991Z" end-time="2024-02-19T13:49:38.8478773Z" duration="0.000378" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product{$string(ProductID): Price}';&#xA; result: {&quot;345664&quot;:107.99,&quot;858236&quot;:21.67,&quot;858383&quot;:[34.45,34.45]}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product{$string(ProductID): Price}'
Result: '{"858383":[34.45,34.45],"858236":21.67,"345664":107.99}'
Expected: '{"345664":107.99,"858236":21.67,"858383":[34.45,34.45]}'
]]></output>
                </test-case>
                <test-case id="0-2252" name="object-constructor.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1636119127" result="Passed" start-time="2024-02-19T13:49:38.8478908Z" end-time="2024-02-19T13:49:38.8481054Z" duration="0.000215" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product{$string(ProductID): (Price)[0]}';&#xA; result: {&quot;345664&quot;:107.99,&quot;858236&quot;:21.67,&quot;858383&quot;:34.45}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product{$string(ProductID): (Price)[0]}'
Result: '{"858383":34.45,"858236":21.67,"345664":107.99}'
Expected: '{"345664":107.99,"858236":21.67,"858383":34.45}'
]]></output>
                </test-case>
                <test-case id="0-2253" name="object-constructor.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1457018067" result="Passed" start-time="2024-02-19T13:49:38.8481181Z" end-time="2024-02-19T13:49:38.8483071Z" duration="0.000189" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{$string(ProductID): Price}';&#xA; result: [{&quot;858383&quot;:34.45},{&quot;858236&quot;:21.67},{&quot;858383&quot;:34.45},{&quot;345664&quot;:107.99}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.{$string(ProductID): Price}'
Result: '[{"858383":34.45},{"858236":21.67},{"858383":34.45},{"345664":107.99}]'
Expected: '[{"858383":34.45},{"858236":21.67},{"858383":34.45},{"345664":107.99}]'
]]></output>
                </test-case>
                <test-case id="0-2254" name="object-constructor.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1272594715" result="Passed" start-time="2024-02-19T13:49:38.8483193Z" end-time="2024-02-19T13:49:38.8491880Z" duration="0.000869" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product{ProductID: &quot;Product Name&quot;}';&#xA; result: error T1003" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1003.
Actually thrown T1003.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order.Product{ProductID: "Product Name"}'
]]></output>
                </test-case>
                <test-case id="0-2255" name="object-constructor.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1620311307" result="Passed" start-time="2024-02-19T13:49:38.8492046Z" end-time="2024-02-19T13:49:38.8498187Z" duration="0.000614" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{ProductID: &quot;Product Name&quot;}';&#xA; result: error T1003" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1003.
Actually thrown T1003.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order.Product.{ProductID: "Product Name"}'
]]></output>
                </test-case>
                <test-case id="0-2256" name="object-constructor.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1722130010" result="Passed" start-time="2024-02-19T13:49:38.8498317Z" end-time="2024-02-19T13:49:38.8500106Z" duration="0.000179" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order{OrderID: $sum(Product.(Price*Quantity))}';&#xA; result: {&quot;order103&quot;:90.57000000000001,&quot;order104&quot;:245.79000000000002}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order{OrderID: $sum(Product.(Price*Quantity))}'
Result: '{"order103":90.57,"order104":245.79}'
Expected: '{"order103":90.57000000000001,"order104":245.79000000000002}'
]]></output>
                </test-case>
                <test-case id="0-2257" name="object-constructor.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="694076875" result="Passed" start-time="2024-02-19T13:49:38.8500219Z" end-time="2024-02-19T13:49:38.8503617Z" duration="0.000340" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.{OrderID: $sum(Product.(Price*Quantity))}';&#xA; result: [{&quot;order103&quot;:90.57000000000001},{&quot;order104&quot;:245.79000000000002}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.{OrderID: $sum(Product.(Price*Quantity))}'
Result: '[{"order103":90.57},{"order104":245.79}]'
Expected: '[{"order103":90.57000000000001},{"order104":245.79000000000002}]'
]]></output>
                </test-case>
                <test-case id="0-2258" name="object-constructor.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1627812962" result="Passed" start-time="2024-02-19T13:49:38.8503758Z" end-time="2024-02-19T13:49:38.8512322Z" duration="0.000857" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product{$.&quot;Product Name&quot;: Price, $.&quot;Product Name&quot;: Price}';&#xA; result: error D1009" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D1009.
Actually thrown D1009.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order.Product{$."Product Name": Price, $."Product Name": Price}'
]]></output>
                </test-case>
                <test-case id="0-2259" name="object-constructor.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="35258550" result="Passed" start-time="2024-02-19T13:49:38.8512468Z" end-time="2024-02-19T13:49:38.8514094Z" duration="0.000163" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product{`Product Name`: Price, SKU: Price}';&#xA; result: {&quot;Bowler Hat&quot;:[34.45,34.45],&quot;0406654608&quot;:34.45,&quot;Trilby hat&quot;:21.67,&quot;0406634348&quot;:21.67,&quot;040657863&quot;:34.45,&quot;Cloak&quot;:107.99,&quot;0406654603&quot;:107.99}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product{`Product Name`: Price, SKU: Price}'
Result: '{"Bowler Hat":[34.45,34.45],"0406654608":34.45,"Trilby hat":21.67,"0406634348":21.67,"040657863":34.45,"Cloak":107.99,"0406654603":107.99}'
Expected: '{"Bowler Hat":[34.45,34.45],"0406654608":34.45,"Trilby hat":21.67,"0406634348":21.67,"040657863":34.45,"Cloak":107.99,"0406654603":107.99}'
]]></output>
                </test-case>
                <test-case id="0-2260" name="object-constructor.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="147843904" result="Passed" start-time="2024-02-19T13:49:38.8514206Z" end-time="2024-02-19T13:49:38.8516231Z" duration="0.000203" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order{  OrderID: {    &quot;TotalPrice&quot;:$sum(Product.(Price * Quantity)),    &quot;Items&quot;: Product.&quot;Product Name&quot;  }}';&#xA; result: {&quot;order103&quot;:{&quot;TotalPrice&quot;:90.57000000000001,&quot;Items&quot;:[&quot;Bowler Hat&quot;,&quot;Trilby hat&quot;]},&quot;order104&quot;:{&quot;TotalPrice&quot;:245.79000000000002,&quot;Items&quot;:[&quot;Bowler Hat&quot;,&quot;Cloak&quot;]}}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order{  OrderID: {    "TotalPrice":$sum(Product.(Price * Quantity)),    "Items": Product."Product Name"  }}'
Result: '{"order103":{"TotalPrice":90.57,"Items":["Bowler Hat","Trilby hat"]},"order104":{"TotalPrice":245.79,"Items":["Bowler Hat","Cloak"]}}'
Expected: '{"order103":{"TotalPrice":90.57000000000001,"Items":["Bowler Hat","Trilby hat"]},"order104":{"TotalPrice":245.79000000000002,"Items":["Bowler Hat","Cloak"]}}'
]]></output>
                </test-case>
                <test-case id="0-2261" name="object-constructor.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="14824099" result="Passed" start-time="2024-02-19T13:49:38.8516337Z" end-time="2024-02-19T13:49:38.8518772Z" duration="0.000244" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{  &quot;Order&quot;: Account.Order.{      &quot;ID&quot;: OrderID,      &quot;Product&quot;: Product.{          &quot;Name&quot;: $.&quot;Product Name&quot;,          &quot;SKU&quot;: ProductID,          &quot;Details&quot;: {            &quot;Weight&quot;: Description.Weight,            &quot;Dimensions&quot;: Description.(Width &amp; &quot; x &quot; &amp; Height &amp; &quot; x &quot; &amp; Depth)          }        },      &quot;Total Price&quot;: $sum(Product.(Price * Quantity))    }}';&#xA; result: {&quot;Order&quot;:[{&quot;ID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Name&quot;:&quot;Bowler Hat&quot;,&quot;SKU&quot;:858383,&quot;Details&quot;:{&quot;Weight&quot;:0.75,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}},{&quot;Name&quot;:&quot;Trilby hat&quot;,&quot;SKU&quot;:858236,&quot;Details&quot;:{&quot;Weight&quot;:0.6,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}}],&quot;Total Price&quot;:90.57000000000001},{&quot;ID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Name&quot;:&quot;Bowler Hat&quot;,&quot;SKU&quot;:858383,&quot;Details&quot;:{&quot;Weight&quot;:0.75,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}},{&quot;Name&quot;:&quot;Cloak&quot;,&quot;SKU&quot;:345664,&quot;Details&quot;:{&quot;Weight&quot;:2,&quot;Dimensions&quot;:&quot;30 x 20 x 210&quot;}}],&quot;Total Price&quot;:245.79000000000002}]}" />
                  </properties>
                  <output><![CDATA[Expr is '{  "Order": Account.Order.{      "ID": OrderID,      "Product": Product.{          "Name": $."Product Name",          "SKU": ProductID,          "Details": {            "Weight": Description.Weight,            "Dimensions": Description.(Width & " x " & Height & " x " & Depth)          }        },      "Total Price": $sum(Product.(Price * Quantity))    }}'
Result: '{"Order":[{"ID":"order103","Product":[{"Name":"Bowler Hat","SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"Name":"Trilby hat","SKU":858236,"Details":{"Weight":0.6,"Dimensions":"300 x 200 x 210"}}],"Total Price":90.57},{"ID":"order104","Product":[{"Name":"Bowler Hat","SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"Name":"Cloak","SKU":345664,"Details":{"Weight":2,"Dimensions":"30 x 20 x 210"}}],"Total Price":245.79}]}'
Expected: '{"Order":[{"ID":"order103","Product":[{"Name":"Bowler Hat","SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"Name":"Trilby hat","SKU":858236,"Details":{"Weight":0.6,"Dimensions":"300 x 200 x 210"}}],"Total Price":90.57000000000001},{"ID":"order104","Product":[{"Name":"Bowler Hat","SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"Name":"Cloak","SKU":345664,"Details":{"Weight":2,"Dimensions":"30 x 20 x 210"}}],"Total Price":245.79000000000002}]}'
]]></output>
                </test-case>
                <test-case id="0-2262" name="object-constructor.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1888308914" result="Passed" start-time="2024-02-19T13:49:38.8518877Z" end-time="2024-02-19T13:49:38.8521035Z" duration="0.000216" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{  &quot;Order&quot;: Account.Order.{      &quot;ID&quot;: OrderID,      &quot;Product&quot;: Product.{          &quot;Name&quot;: `Product Name`,          &quot;SKU&quot;: ProductID,          &quot;Details&quot;: {            &quot;Weight&quot;: Description.Weight,            &quot;Dimensions&quot;: Description.(Width &amp; &quot; x &quot; &amp; Height &amp; &quot; x &quot; &amp; Depth)          }        },      &quot;Total Price&quot;: $sum(Product.(Price * Quantity))    }}';&#xA; result: {&quot;Order&quot;:[{&quot;ID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Name&quot;:&quot;Bowler Hat&quot;,&quot;SKU&quot;:858383,&quot;Details&quot;:{&quot;Weight&quot;:0.75,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}},{&quot;Name&quot;:&quot;Trilby hat&quot;,&quot;SKU&quot;:858236,&quot;Details&quot;:{&quot;Weight&quot;:0.6,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}}],&quot;Total Price&quot;:90.57000000000001},{&quot;ID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Name&quot;:&quot;Bowler Hat&quot;,&quot;SKU&quot;:858383,&quot;Details&quot;:{&quot;Weight&quot;:0.75,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}},{&quot;Name&quot;:&quot;Cloak&quot;,&quot;SKU&quot;:345664,&quot;Details&quot;:{&quot;Weight&quot;:2,&quot;Dimensions&quot;:&quot;30 x 20 x 210&quot;}}],&quot;Total Price&quot;:245.79000000000002}]}" />
                  </properties>
                  <output><![CDATA[Expr is '{  "Order": Account.Order.{      "ID": OrderID,      "Product": Product.{          "Name": `Product Name`,          "SKU": ProductID,          "Details": {            "Weight": Description.Weight,            "Dimensions": Description.(Width & " x " & Height & " x " & Depth)          }        },      "Total Price": $sum(Product.(Price * Quantity))    }}'
Result: '{"Order":[{"ID":"order103","Product":[{"Name":"Bowler Hat","SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"Name":"Trilby hat","SKU":858236,"Details":{"Weight":0.6,"Dimensions":"300 x 200 x 210"}}],"Total Price":90.57},{"ID":"order104","Product":[{"Name":"Bowler Hat","SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"Name":"Cloak","SKU":345664,"Details":{"Weight":2,"Dimensions":"30 x 20 x 210"}}],"Total Price":245.79}]}'
Expected: '{"Order":[{"ID":"order103","Product":[{"Name":"Bowler Hat","SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"Name":"Trilby hat","SKU":858236,"Details":{"Weight":0.6,"Dimensions":"300 x 200 x 210"}}],"Total Price":90.57000000000001},{"ID":"order104","Product":[{"Name":"Bowler Hat","SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"Name":"Cloak","SKU":345664,"Details":{"Weight":2,"Dimensions":"30 x 20 x 210"}}],"Total Price":245.79000000000002}]}'
]]></output>
                </test-case>
                <test-case id="0-2263" name="object-constructor.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1908165612" result="Passed" start-time="2024-02-19T13:49:38.8521124Z" end-time="2024-02-19T13:49:38.8522288Z" duration="0.000117" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Phone{type: $join(number, &quot;, &quot;), &quot;phone&quot;:number}';&#xA; result: {&quot;home&quot;:&quot;0203 544 1234&quot;,&quot;phone&quot;:[&quot;0203 544 1234&quot;,&quot;01962 001234&quot;,&quot;01962 001235&quot;,&quot;077 7700 1234&quot;],&quot;office&quot;:&quot;01962 001234, 01962 001235&quot;,&quot;mobile&quot;:&quot;077 7700 1234&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'Phone{type: $join(number, ", "), "phone":number}'
Result: '{"home":"0203 544 1234","phone":["0203 544 1234","01962 001234","01962 001235","077 7700 1234"],"office":"01962 001234, 01962 001235","mobile":"077 7700 1234"}'
Expected: '{"home":"0203 544 1234","phone":["0203 544 1234","01962 001234","01962 001235","077 7700 1234"],"office":"01962 001234, 01962 001235","mobile":"077 7700 1234"}'
]]></output>
                </test-case>
                <test-case id="0-2264" name="object-constructor.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1451065705" result="Passed" start-time="2024-02-19T13:49:38.8522372Z" end-time="2024-02-19T13:49:38.8527428Z" duration="0.000506" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$.{ type: $average(value), kind: $sum(value) } ';&#xA; result: error D1009" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D1009.
Actually thrown D1009.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$.{ type: $average(value), kind: $sum(value) } '
]]></output>
                </test-case>
                <test-case id="0-2265" name="object-constructor.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1345320536" result="Passed" start-time="2024-02-19T13:49:38.8527550Z" end-time="2024-02-19T13:49:38.8531128Z" duration="0.000358" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '{ type: $average(value), kind: $sum(value) } ';&#xA; result: error T1003" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1003.
Actually thrown T1003.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '{ type: $average(value), kind: $sum(value) } '
]]></output>
                </test-case>
                <test-case id="0-2266" name="object-constructor.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.object-constructor.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1460792754" result="Passed" start-time="2024-02-19T13:49:38.8531231Z" end-time="2024-02-19T13:49:38.8540248Z" duration="0.000902" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$each(jsonata, λ($v, $k){&#xD;&#xA;{&#xD;&#xA;  'date': $k,&#xD;&#xA;  'count': $v&#xD;&#xA;}&#xD;&#xA;}){&#xD;&#xA;  $substring(date, 0, 7): $sum(count)&#xD;&#xA;}&#xD;&#xA;';&#xA; result: {&quot;2019-01&quot;:68281,&quot;2019-02&quot;:63672,&quot;2019-03&quot;:78625,&quot;2019-04&quot;:76505,&quot;2019-05&quot;:129360,&quot;2019-06&quot;:484244,&quot;2019-07&quot;:698748,&quot;2019-08&quot;:788322}" />
                  </properties>
                  <output><![CDATA[Expr is '$each(jsonata, λ($v, $k){
{
  'date': $k,
  'count': $v
}
}){
  $substring(date, 0, 7): $sum(count)
}
'
Result: '{"2019-01":68281,"2019-02":63672,"2019-03":78625,"2019-04":76505,"2019-05":129360,"2019-06":484244,"2019-07":698748,"2019-08":788322}'
Expected: '{"2019-01":68281,"2019-02":63672,"2019-03":78625,"2019-04":76505,"2019-05":129360,"2019-06":484244,"2019-07":698748,"2019-08":788322}'
]]></output>
                </test-case>
                <test-case id="0-2267" name="parent-operator.errors[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="886353837" result="Passed" start-time="2024-02-19T13:49:38.8540347Z" end-time="2024-02-19T13:49:38.8551874Z" duration="0.001153" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '{'hello': 'world'}.% ';&#xA; result: error S0217" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0217.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '{'hello': 'world'}.% '
]]></output>
                </test-case>
                <test-case id="0-2268" name="parent-operator.errors[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2011282791" result="Passed" start-time="2024-02-19T13:49:38.8552236Z" end-time="2024-02-19T13:49:38.8560599Z" duration="0.000837" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '%';&#xA; result: error S0217" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0217.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '%'
]]></output>
                </test-case>
                <test-case id="0-2269" name="parent-operator.errors[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1565528850" result="Passed" start-time="2024-02-19T13:49:38.8560757Z" end-time="2024-02-19T13:49:38.8567142Z" duration="0.000639" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '%()';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '%()'
]]></output>
                </test-case>
                <test-case id="0-2270" name="parent-operator.errors[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1781682033" result="Passed" start-time="2024-02-19T13:49:38.8567312Z" end-time="2024-02-19T13:49:38.8574879Z" duration="0.000757" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '%(1)';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '%(1)'
]]></output>
                </test-case>
                <test-case id="0-2271" name="parent-operator.errors[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1582047806" result="Passed" start-time="2024-02-19T13:49:38.8575031Z" end-time="2024-02-19T13:49:38.8581967Z" duration="0.000694" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '%%';&#xA; result: error S0207" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0207.
Actually thrown S0207.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '%%'
]]></output>
                </test-case>
                <test-case id="0-2272" name="parent-operator.errors[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1727752300" result="Passed" start-time="2024-02-19T13:49:38.8582120Z" end-time="2024-02-19T13:49:38.8588582Z" duration="0.000646" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '(%)';&#xA; result: error S0217" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0217.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '(%)'
]]></output>
                </test-case>
                <test-case id="0-2273" name="parent-operator.errors[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1086950560" result="Passed" start-time="2024-02-19T13:49:38.8588731Z" end-time="2024-02-19T13:49:38.8593460Z" duration="0.000473" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '(%%)';&#xA; result: error S0211" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0211.
Actually thrown S0211.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '(%%)'
]]></output>
                </test-case>
                <test-case id="0-2274" name="parent-operator.errors[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="875063480" result="Passed" start-time="2024-02-19T13:49:38.8593612Z" end-time="2024-02-19T13:49:38.8599400Z" duration="0.000579" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans.%%';&#xA; result: error S0207" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0207.
Actually thrown S0207.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans.%%'
]]></output>
                </test-case>
                <test-case id="0-2275" name="parent-operator.errors[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1952179568" result="Passed" start-time="2024-02-19T13:49:38.8599518Z" end-time="2024-02-19T13:49:38.8607258Z" duration="0.000774" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$.%';&#xA; result: error S0217" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0217.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$.%'
]]></output>
                </test-case>
                <test-case id="0-2276" name="parent-operator.errors[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1800668833" result="Passed" start-time="2024-02-19T13:49:38.8607397Z" end-time="2024-02-19T13:49:38.8612634Z" duration="0.000524" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$$.%';&#xA; result: error S0217" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0217.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$$.%'
]]></output>
                </test-case>
                <test-case id="0-2277" name="parent-operator.errors[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1404420930" result="Passed" start-time="2024-02-19T13:49:38.8612755Z" end-time="2024-02-19T13:49:38.8618392Z" duration="0.000564" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans.%.%.%';&#xA; result: error S0217" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0217.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans.%.%.%'
]]></output>
                </test-case>
                <test-case id="0-2278" name="parent-operator.errors[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1763336234" result="Passed" start-time="2024-02-19T13:49:38.8618550Z" end-time="2024-02-19T13:49:38.8625212Z" duration="0.000666" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.%%%';&#xA; result: error S0217" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0217.
Actually thrown S0217.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.%%%'
]]></output>
                </test-case>
                <test-case id="0-2279" name="parent-operator.errors[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1036039447" result="Passed" start-time="2024-02-19T13:49:38.8625340Z" end-time="2024-02-19T13:49:38.8631748Z" duration="0.000641" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.(%%%)';&#xA; result: error T2001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2001.
Actually thrown T2001.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.(%%%)'
]]></output>
                </test-case>
                <test-case id="0-2280" name="parent-operator.errors[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1840524217" result="Passed" start-time="2024-02-19T13:49:38.8631918Z" end-time="2024-02-19T13:49:38.8640654Z" duration="0.000874" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.(%% %)';&#xA; result: error T2001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2001.
Actually thrown T2001.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.(%% %)'
]]></output>
                </test-case>
                <test-case id="0-2281" name="parent-operator.errors[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="70370605" result="Passed" start-time="2024-02-19T13:49:38.8640792Z" end-time="2024-02-19T13:49:38.8657894Z" duration="0.001711" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.(% %%)';&#xA; result: error T2001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2001.
Actually thrown T2001.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.(% %%)'
]]></output>
                </test-case>
                <test-case id="0-2282" name="parent-operator.errors[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.errors[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="186754942" result="Passed" start-time="2024-02-19T13:49:38.8658055Z" end-time="2024-02-19T13:49:38.8663592Z" duration="0.000554" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.(% % %)';&#xA; result: error T2001" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2001.
Actually thrown T2001.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.(% % %)'
]]></output>
                </test-case>
                <test-case id="0-2283" name="parent-operator.parent[1]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[1]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="758381559" result="Passed" start-time="2024-02-19T13:49:38.8663723Z" end-time="2024-02-19T13:49:38.8665753Z" duration="0.000203" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{&#xD;&#xA;  &quot;order&quot;: %.OrderID,&#xD;&#xA;  &quot;Product&quot;: `Product Name`,&#xD;&#xA;  &quot;Weight&quot;: Description.Weight&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;order&quot;:&quot;order103&quot;,&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Weight&quot;:0.75},{&quot;order&quot;:&quot;order103&quot;,&quot;Product&quot;:&quot;Trilby hat&quot;,&quot;Weight&quot;:0.6},{&quot;order&quot;:&quot;order104&quot;,&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Weight&quot;:0.75},{&quot;order&quot;:&quot;order104&quot;,&quot;Product&quot;:&quot;Cloak&quot;,&quot;Weight&quot;:2}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.{
  "order": %.OrderID,
  "Product": `Product Name`,
  "Weight": Description.Weight
}
'
Result: '[{"order":"order103","Product":"Bowler Hat","Weight":0.75},{"order":"order103","Product":"Trilby hat","Weight":0.6},{"order":"order104","Product":"Bowler Hat","Weight":0.75},{"order":"order104","Product":"Cloak","Weight":2}]'
Expected: '[{"order":"order103","Product":"Bowler Hat","Weight":0.75},{"order":"order103","Product":"Trilby hat","Weight":0.6},{"order":"order104","Product":"Bowler Hat","Weight":0.75},{"order":"order104","Product":"Cloak","Weight":2}]'
]]></output>
                </test-case>
                <test-case id="0-2284" name="parent-operator.parent[2]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[2]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="923742173" result="Passed" start-time="2024-02-19T13:49:38.8665871Z" end-time="2024-02-19T13:49:38.8667695Z" duration="0.000183" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.(Order.Product).{&#xD;&#xA;  &quot;order&quot;: %.OrderID,&#xD;&#xA;  &quot;Product&quot;: `Product Name`,&#xD;&#xA;  &quot;Weight&quot;: Description.Weight&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;order&quot;:&quot;order103&quot;,&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Weight&quot;:0.75},{&quot;order&quot;:&quot;order103&quot;,&quot;Product&quot;:&quot;Trilby hat&quot;,&quot;Weight&quot;:0.6},{&quot;order&quot;:&quot;order104&quot;,&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Weight&quot;:0.75},{&quot;order&quot;:&quot;order104&quot;,&quot;Product&quot;:&quot;Cloak&quot;,&quot;Weight&quot;:2}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.(Order.Product).{
  "order": %.OrderID,
  "Product": `Product Name`,
  "Weight": Description.Weight
}
'
Result: '[{"order":"order103","Product":"Bowler Hat","Weight":0.75},{"order":"order103","Product":"Trilby hat","Weight":0.6},{"order":"order104","Product":"Bowler Hat","Weight":0.75},{"order":"order104","Product":"Cloak","Weight":2}]'
Expected: '[{"order":"order103","Product":"Bowler Hat","Weight":0.75},{"order":"order103","Product":"Trilby hat","Weight":0.6},{"order":"order104","Product":"Bowler Hat","Weight":0.75},{"order":"order104","Product":"Cloak","Weight":2}]'
]]></output>
                </test-case>
                <test-case id="0-2285" name="parent-operator.parent[3]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[3]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2027262500" result="Failed" start-time="2024-02-19T13:49:38.8667917Z" end-time="2024-02-19T13:49:38.8678925Z" duration="0.001101" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.[`Product Name`, %.OrderID]';&#xA; result: [&quot;Bowler Hat&quot;,&quot;order103&quot;,&quot;Trilby hat&quot;,&quot;order103&quot;,&quot;Bowler Hat&quot;,&quot;order104&quot;,&quot;Cloak&quot;,&quot;order104&quot;]" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '["Bowler Hat","order103","Trilby hat","order103","Bowler Hat","order104","Cloak","order104"]', got '[["Bowler Hat","order103"],["Trilby hat","order103"],["Bowler Hat","order104"],["Cloak","order104"]]'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is 'Account.Order.Product.[`Product Name`, %.OrderID]'
Result: '[["Bowler Hat","order103"],["Trilby hat","order103"],["Bowler Hat","order104"],["Cloak","order104"]]'
Expected: '["Bowler Hat","order103","Trilby hat","order103","Bowler Hat","order104","Cloak","order104"]'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '["Bowler Hat","order103","Trilby hat","order103","Bowler Hat","order104","Cloak","order104"]', got '[["Bowler Hat","order103"],["Trilby hat","order103"],["Bowler Hat","order104"],["Cloak","order104"]]'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2286" name="parent-operator.parent[4]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[4]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1702201458" result="Passed" start-time="2024-02-19T13:49:38.8679085Z" end-time="2024-02-19T13:49:38.8680532Z" duration="0.000145" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{ `Product Name`: [Quantity, %.OrderID] }';&#xA; result: [{&quot;Bowler Hat&quot;:[2,&quot;order103&quot;]},{&quot;Trilby hat&quot;:[1,&quot;order103&quot;]},{&quot;Bowler Hat&quot;:[4,&quot;order104&quot;]},{&quot;Cloak&quot;:[1,&quot;order104&quot;]}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.{ `Product Name`: [Quantity, %.OrderID] }'
Result: '[{"Bowler Hat":[2,"order103"]},{"Trilby hat":[1,"order103"]},{"Bowler Hat":[4,"order104"]},{"Cloak":[1,"order104"]}]'
Expected: '[{"Bowler Hat":[2,"order103"]},{"Trilby hat":[1,"order103"]},{"Bowler Hat":[4,"order104"]},{"Cloak":[1,"order104"]}]'
]]></output>
                </test-case>
                <test-case id="0-2287" name="parent-operator.parent[5]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[5]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="970110569" result="Passed" start-time="2024-02-19T13:49:38.8680625Z" end-time="2024-02-19T13:49:38.8681928Z" duration="0.000130" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{ `Product Name`: [Quantity, (%.OrderID)] }';&#xA; result: [{&quot;Bowler Hat&quot;:[2,&quot;order103&quot;]},{&quot;Trilby hat&quot;:[1,&quot;order103&quot;]},{&quot;Bowler Hat&quot;:[4,&quot;order104&quot;]},{&quot;Cloak&quot;:[1,&quot;order104&quot;]}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.{ `Product Name`: [Quantity, (%.OrderID)] }'
Result: '[{"Bowler Hat":[2,"order103"]},{"Trilby hat":[1,"order103"]},{"Bowler Hat":[4,"order104"]},{"Cloak":[1,"order104"]}]'
Expected: '[{"Bowler Hat":[2,"order103"]},{"Trilby hat":[1,"order103"]},{"Bowler Hat":[4,"order104"]},{"Cloak":[1,"order104"]}]'
]]></output>
                </test-case>
                <test-case id="0-2288" name="parent-operator.parent[6]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[6]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="513504596" result="Passed" start-time="2024-02-19T13:49:38.8682011Z" end-time="2024-02-19T13:49:38.8682994Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product[%.OrderID='order104'].SKU';&#xA; result: [&quot;040657863&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product[%.OrderID='order104'].SKU'
Result: '["040657863","0406654603"]'
Expected: '["040657863","0406654603"]'
]]></output>
                </test-case>
                <test-case id="0-2289" name="parent-operator.parent[7]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[7]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2060164248" result="Passed" start-time="2024-02-19T13:49:38.8683381Z" end-time="2024-02-19T13:49:38.8684708Z" duration="0.000133" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product[%.%.`Account Name`='Firefly'].SKU';&#xA; result: [&quot;0406654608&quot;,&quot;0406634348&quot;,&quot;040657863&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product[%.%.`Account Name`='Firefly'].SKU'
Result: '["0406654608","0406634348","040657863","0406654603"]'
Expected: '["0406654608","0406634348","040657863","0406654603"]'
]]></output>
                </test-case>
                <test-case id="0-2290" name="parent-operator.parent[8]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[8]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="113979270" result="Passed" start-time="2024-02-19T13:49:38.8684806Z" end-time="2024-02-19T13:49:38.8685860Z" duration="0.000105" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Price[%.%.OrderID='order103']';&#xA; result: [34.45,21.67]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Price[%.%.OrderID='order103']'
Result: '[34.45,21.67]'
Expected: '[34.45,21.67]'
]]></output>
                </test-case>
                <test-case id="0-2291" name="parent-operator.parent[9]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[9]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="785592107" result="Passed" start-time="2024-02-19T13:49:38.8685934Z" end-time="2024-02-19T13:49:38.8686888Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Price.%[%.OrderID='order103'].SKU';&#xA; result: [&quot;0406654608&quot;,&quot;0406634348&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Price.%[%.OrderID='order103'].SKU'
Result: '["0406654608","0406634348"]'
Expected: '["0406654608","0406634348"]'
]]></output>
                </test-case>
                <test-case id="0-2292" name="parent-operator.parent[10]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[10]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1639884299" result="Passed" start-time="2024-02-19T13:49:38.8686958Z" end-time="2024-02-19T13:49:38.8687900Z" duration="0.000094" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product[%.OrderID='order104'][%.%.`Account Name`='Firefly'].SKU';&#xA; result: [&quot;040657863&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product[%.OrderID='order104'][%.%.`Account Name`='Firefly'].SKU'
Result: '["040657863","0406654603"]'
Expected: '["040657863","0406654603"]'
]]></output>
                </test-case>
                <test-case id="0-2293" name="parent-operator.parent[11]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[11]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="254711461" result="Passed" start-time="2024-02-19T13:49:38.8687968Z" end-time="2024-02-19T13:49:38.8689056Z" duration="0.000109" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(Account.Order.Product)[%.OrderID='order104'].SKU';&#xA; result: [&quot;040657863&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '(Account.Order.Product)[%.OrderID='order104'].SKU'
Result: '["040657863","0406654603"]'
Expected: '["040657863","0406654603"]'
]]></output>
                </test-case>
                <test-case id="0-2294" name="parent-operator.parent[12]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[12]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1044336267" result="Passed" start-time="2024-02-19T13:49:38.8689167Z" end-time="2024-02-19T13:49:38.8690581Z" duration="0.000141" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{ %.OrderID: Price * Quantity }';&#xA; result: [{&quot;order103&quot;:68.9},{&quot;order103&quot;:21.67},{&quot;order104&quot;:137.8},{&quot;order104&quot;:107.99}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.{ %.OrderID: Price * Quantity }'
Result: '[{"order103":68.9},{"order103":21.67},{"order104":137.8},{"order104":107.99}]'
Expected: '[{"order103":68.9},{"order103":21.67},{"order104":137.8},{"order104":107.99}]'
]]></output>
                </test-case>
                <test-case id="0-2295" name="parent-operator.parent[13]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[13]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="861343900" result="Passed" start-time="2024-02-19T13:49:38.8690698Z" end-time="2024-02-19T13:49:38.8691717Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.().%';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.().%'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2296" name="parent-operator.parent[14]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[14]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1339387981" result="Passed" start-time="2024-02-19T13:49:38.8691840Z" end-time="2024-02-19T13:49:38.8693584Z" duration="0.000175" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.{&#xD;&#xA;  'Product': `Product Name`,&#xD;&#xA;  'Order': %.OrderID,&#xD;&#xA;  'Account': %.%.`Account Name`&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Trilby hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Cloak&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.{
  'Product': `Product Name`,
  'Order': %.OrderID,
  'Account': %.%.`Account Name`
}
'
Result: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
Expected: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
]]></output>
                </test-case>
                <test-case id="0-2297" name="parent-operator.parent[15]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[15]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1870939931" result="Passed" start-time="2024-02-19T13:49:38.8693686Z" end-time="2024-02-19T13:49:38.8695310Z" duration="0.000163" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.(Product).{&#xD;&#xA;  'Product': `Product Name`,&#xD;&#xA;  'Order': %.OrderID,&#xD;&#xA;  'Account': %.%.`Account Name`&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Trilby hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Cloak&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.(Product).{
  'Product': `Product Name`,
  'Order': %.OrderID,
  'Account': %.%.`Account Name`
}
'
Result: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
Expected: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
]]></output>
                </test-case>
                <test-case id="0-2298" name="parent-operator.parent[16]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[16]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1891719189" result="Passed" start-time="2024-02-19T13:49:38.8695441Z" end-time="2024-02-19T13:49:38.8697041Z" duration="0.000160" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.(Order.(Product)).{&#xD;&#xA;  'Product': `Product Name`,&#xD;&#xA;  'Order': %.OrderID,&#xD;&#xA;  'Account': %.%.`Account Name`&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Trilby hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Cloak&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.(Order.(Product)).{
  'Product': `Product Name`,
  'Order': %.OrderID,
  'Account': %.%.`Account Name`
}
'
Result: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
Expected: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
]]></output>
                </test-case>
                <test-case id="0-2299" name="parent-operator.parent[17]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[17]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2062859031" result="Passed" start-time="2024-02-19T13:49:38.8697168Z" end-time="2024-02-19T13:49:38.8698930Z" duration="0.000176" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.(Order).(Product).{&#xD;&#xA;  'Product': `Product Name`,&#xD;&#xA;  'Order': %.OrderID,&#xD;&#xA;  'Account': %.%.`Account Name`&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Trilby hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Cloak&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.(Order).(Product).{
  'Product': `Product Name`,
  'Order': %.OrderID,
  'Account': %.%.`Account Name`
}
'
Result: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
Expected: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
]]></output>
                </test-case>
                <test-case id="0-2300" name="parent-operator.parent[18]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[18]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="951521176" result="Passed" start-time="2024-02-19T13:49:38.8699026Z" end-time="2024-02-19T13:49:38.8701023Z" duration="0.000200" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(Account.Order).(Product).{&#xD;&#xA;  'Product': `Product Name`,&#xD;&#xA;  'Order': %.OrderID,&#xD;&#xA;  'Account': %.%.`Account Name`&#xD;&#xA;}&#xD;&#xA;';&#xA; result: [{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Trilby hat&quot;,&quot;Order&quot;:&quot;order103&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;},{&quot;Product&quot;:&quot;Cloak&quot;,&quot;Order&quot;:&quot;order104&quot;,&quot;Account&quot;:&quot;Firefly&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is '(Account.Order).(Product).{
  'Product': `Product Name`,
  'Order': %.OrderID,
  'Account': %.%.`Account Name`
}
'
Result: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
Expected: '[{"Product":"Bowler Hat","Order":"order103","Account":"Firefly"},{"Product":"Trilby hat","Order":"order103","Account":"Firefly"},{"Product":"Bowler Hat","Order":"order104","Account":"Firefly"},{"Product":"Cloak","Order":"order104","Account":"Firefly"}]'
]]></output>
                </test-case>
                <test-case id="0-2301" name="parent-operator.parent[19]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[19]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1079087413" result="Passed" start-time="2024-02-19T13:49:38.8701140Z" end-time="2024-02-19T13:49:38.8721466Z" duration="0.002033" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.SKU^(%.Price)';&#xA; result: [&quot;0406634348&quot;,&quot;0406654608&quot;,&quot;040657863&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.SKU^(%.Price)'
Result: '["0406634348","0406654608","040657863","0406654603"]'
Expected: '["0406634348","0406654608","040657863","0406654603"]'
]]></output>
                </test-case>
                <test-case id="0-2302" name="parent-operator.parent[20]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[20]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="462273340" result="Passed" start-time="2024-02-19T13:49:38.8721643Z" end-time="2024-02-19T13:49:38.8723609Z" duration="0.000197" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.SKU^(%.Price, &gt;%.%.OrderID)';&#xA; result: [&quot;0406634348&quot;,&quot;040657863&quot;,&quot;0406654608&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.SKU^(%.Price, >%.%.OrderID)'
Result: '["0406634348","040657863","0406654608","0406654603"]'
Expected: '["0406634348","040657863","0406654608","0406654603"]'
]]></output>
                </test-case>
                <test-case id="0-2303" name="parent-operator.parent[21]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[21]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="287313181" result="Passed" start-time="2024-02-19T13:49:38.8723744Z" end-time="2024-02-19T13:49:38.8725628Z" duration="0.000188" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Description.{ 'Colour': Colour, 'Total': %.Price * %.Quantity }';&#xA; result: [{&quot;Colour&quot;:&quot;Purple&quot;,&quot;Total&quot;:68.9},{&quot;Colour&quot;:&quot;Orange&quot;,&quot;Total&quot;:21.67},{&quot;Colour&quot;:&quot;Purple&quot;,&quot;Total&quot;:137.8},{&quot;Colour&quot;:&quot;Black&quot;,&quot;Total&quot;:107.99}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Description.{ 'Colour': Colour, 'Total': %.Price * %.Quantity }'
Result: '[{"Colour":"Purple","Total":68.9},{"Colour":"Orange","Total":21.67},{"Colour":"Purple","Total":137.8},{"Colour":"Black","Total":107.99}]'
Expected: '[{"Colour":"Purple","Total":68.9},{"Colour":"Orange","Total":21.67},{"Colour":"Purple","Total":137.8},{"Colour":"Black","Total":107.99}]'
]]></output>
                </test-case>
                <test-case id="0-2304" name="parent-operator.parent[22]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[22]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1495687754" result="Passed" start-time="2024-02-19T13:49:38.8725762Z" end-time="2024-02-19T13:49:38.8727696Z" duration="0.000194" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Description.{ 'Item': Colour &amp; ' ' &amp; %.`Product Name`, 'Discounted': (%.%.OrderID = 'order103') ? %.Price / 2 : %.Price }';&#xA; result: [{&quot;Item&quot;:&quot;Purple Bowler Hat&quot;,&quot;Discounted&quot;:17.225},{&quot;Item&quot;:&quot;Orange Trilby hat&quot;,&quot;Discounted&quot;:10.835},{&quot;Item&quot;:&quot;Purple Bowler Hat&quot;,&quot;Discounted&quot;:34.45},{&quot;Item&quot;:&quot;Black Cloak&quot;,&quot;Discounted&quot;:107.99}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Description.{ 'Item': Colour & ' ' & %.`Product Name`, 'Discounted': (%.%.OrderID = 'order103') ? %.Price / 2 : %.Price }'
Result: '[{"Item":"Purple Bowler Hat","Discounted":17.225},{"Item":"Orange Trilby hat","Discounted":10.835},{"Item":"Purple Bowler Hat","Discounted":34.45},{"Item":"Black Cloak","Discounted":107.99}]'
Expected: '[{"Item":"Purple Bowler Hat","Discounted":17.225},{"Item":"Orange Trilby hat","Discounted":10.835},{"Item":"Purple Bowler Hat","Discounted":34.45},{"Item":"Black Cloak","Discounted":107.99}]'
]]></output>
                </test-case>
                <test-case id="0-2305" name="parent-operator.parent[23]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[23]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1586315222" result="Passed" start-time="2024-02-19T13:49:38.8727801Z" end-time="2024-02-19T13:49:38.8728798Z" duration="0.000100" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.( $parent := %; %.OrderID )';&#xA; result: [&quot;order103&quot;,&quot;order103&quot;,&quot;order104&quot;,&quot;order104&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.( $parent := %; %.OrderID )'
Result: '["order103","order103","order104","order104"]'
Expected: '["order103","order103","order104","order104"]'
]]></output>
                </test-case>
                <test-case id="0-2306" name="parent-operator.parent[24]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[24]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="882435649" result="Passed" start-time="2024-02-19T13:49:38.8728878Z" end-time="2024-02-19T13:49:38.8729674Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.( $parent := %; $parent.OrderID )';&#xA; result: [&quot;order103&quot;,&quot;order103&quot;,&quot;order104&quot;,&quot;order104&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.( $parent := %; $parent.OrderID )'
Result: '["order103","order103","order104","order104"]'
Expected: '["order103","order103","order104","order104"]'
]]></output>
                </test-case>
                <test-case id="0-2307" name="parent-operator.parent[25]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[25]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="549168567" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.8729739Z" end-time="2024-02-19T13:49:38.8739950Z" duration="0.001021" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$L.books@$B[$L.isbn=$B.isbn].{ 'book': $B.title, 'parent': $keys(%) }';&#xA; result: [{&quot;book&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]},{&quot;book&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]},{&quot;book&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$L.books@$B[$L.isbn=$B.isbn].{ 'book': $B.title, 'parent': $keys(%) }'
]]></output>
                </test-case>
                <test-case id="0-2308" name="parent-operator.parent[26]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[26]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="581954587" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.8740095Z" end-time="2024-02-19T13:49:38.8747479Z" duration="0.000739" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$L.books@$B[$L.isbn=$B.isbn].customers[id=$L.customer].{ 'book': $B.title, 'customer': name, 'parent': $keys(%) }';&#xA; result: [{&quot;book&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;Joe Doe&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]},{&quot;book&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;Jason Arthur&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]},{&quot;book&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;Jason Arthur&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$L.books@$B[$L.isbn=$B.isbn].customers[id=$L.customer].{ 'book': $B.title, 'customer': name, 'parent': $keys(%) }'
]]></output>
                </test-case>
                <test-case id="0-2309" name="parent-operator.parent[27]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[27]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1467898794" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.8747593Z" end-time="2024-02-19T13:49:38.8753611Z" duration="0.000602" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$L.books@$B[$L.isbn=$B.isbn].customers[id=$L.customer].{ 'book': $B.title, 'customer': name, 'parent': $keys(%.%) }';&#xA; result: [{&quot;book&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;Joe Doe&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]},{&quot;book&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;Jason Arthur&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]},{&quot;book&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;Jason Arthur&quot;,&quot;parent&quot;:[&quot;books&quot;,&quot;loans&quot;,&quot;customers&quot;]}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$L.books@$B[$L.isbn=$B.isbn].customers[id=$L.customer].{ 'book': $B.title, 'customer': name, 'parent': $keys(%.%) }'
]]></output>
                </test-case>
                <test-case id="0-2310" name="parent-operator.parent[28]" fullname="Jsonata.Net.Native.TestSuite.Tests.parent-operator.parent[28]" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1967126121" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:38.8753746Z" end-time="2024-02-19T13:49:38.8759989Z" duration="0.000625" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'library.loans@$L.books@$B[$L.isbn=$B.isbn].customers@$C[$C.id=$L.customer].{ 'book': $B.title, 'customer': $C.name, 'grandparent': $keys(%.%) }';&#xA; result: [{&quot;book&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;Joe Doe&quot;,&quot;grandparent&quot;:&quot;library&quot;},{&quot;book&quot;:&quot;Compilers: Principles, Techniques, and Tools&quot;,&quot;customer&quot;:&quot;Jason Arthur&quot;,&quot;grandparent&quot;:&quot;library&quot;},{&quot;book&quot;:&quot;Structure and Interpretation of Computer Programs&quot;,&quot;customer&quot;:&quot;Jason Arthur&quot;,&quot;grandparent&quot;:&quot;library&quot;}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: @
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'library.loans@$L.books@$B[$L.isbn=$B.isbn].customers@$C[$C.id=$L.customer].{ 'book': $B.title, 'customer': $C.name, 'grandparent': $keys(%.%) }'
]]></output>
                </test-case>
                <test-case id="0-2311" name="parentheses.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.parentheses.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="317709080" result="Passed" start-time="2024-02-19T13:49:38.8760109Z" end-time="2024-02-19T13:49:38.8761195Z" duration="0.000109" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.(blah).baz.fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.(blah).baz.fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2312" name="parentheses.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.parentheses.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1078224288" result="Passed" start-time="2024-02-19T13:49:38.8761282Z" end-time="2024-02-19T13:49:38.8762123Z" duration="0.000084" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.(blah.baz).fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.(blah.baz).fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2313" name="parentheses.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.parentheses.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="591773515" result="Passed" start-time="2024-02-19T13:49:38.8762200Z" end-time="2024-02-19T13:49:38.8763503Z" duration="0.000131" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz).fud';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz).fud'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2314" name="parentheses.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.parentheses.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="342217980" result="Passed" start-time="2024-02-19T13:49:38.8763629Z" end-time="2024-02-19T13:49:38.8764559Z" duration="0.000093" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.(baz.fud)';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.(baz.fud)'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2315" name="parentheses.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.parentheses.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="77473299" result="Passed" start-time="2024-02-19T13:49:38.8764648Z" end-time="2024-02-19T13:49:38.8765870Z" duration="0.000122" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2316" name="parentheses.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.parentheses.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1975552804" result="Passed" start-time="2024-02-19T13:49:38.8765981Z" end-time="2024-02-19T13:49:38.8767033Z" duration="0.000105" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo).(blah).baz.(fud)';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '(foo).(blah).baz.(fud)'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2317" name="parentheses.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.parentheses.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1129927355" result="Passed" start-time="2024-02-19T13:49:38.8767143Z" end-time="2024-02-19T13:49:38.8768051Z" duration="0.000091" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.(blah).baz.fud)';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.(blah).baz.fud)'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2318" name="parentheses.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.parentheses.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="984423439" result="Passed" start-time="2024-02-19T13:49:38.8768140Z" end-time="2024-02-19T13:49:38.8768977Z" duration="0.000084" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(4 + 2) / 2';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '(4 + 2) / 2'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-2319" name="partial-application.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.partial-application.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1571286852" result="Passed" start-time="2024-02-19T13:49:38.8769080Z" end-time="2024-02-19T13:49:38.8770288Z" duration="0.000121" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $add := function($x, $y){$x+$y};  $add2 := $add(?, 2);  $add2(3))';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '(  $add := function($x, $y){$x+$y};  $add2 := $add(?, 2);  $add2(3))'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-2320" name="partial-application.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.partial-application.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1790602725" result="Passed" start-time="2024-02-19T13:49:38.8770398Z" end-time="2024-02-19T13:49:38.8771440Z" duration="0.000104" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $add := function($x, $y){$x+$y};  $add2 := $add(2, ?);  $add2(4))';&#xA; result: 6" />
                  </properties>
                  <output><![CDATA[Expr is '(  $add := function($x, $y){$x+$y};  $add2 := $add(2, ?);  $add2(4))'
Result: '6'
Expected: '6'
]]></output>
                </test-case>
                <test-case id="0-2321" name="partial-application.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.partial-application.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="490682185" result="Passed" start-time="2024-02-19T13:49:38.8771524Z" end-time="2024-02-19T13:49:38.8772575Z" duration="0.000105" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $firstn := $substring(?, 0, ?);  $first5 := $firstn(?, 5);  $first5(&quot;Hello World&quot;))';&#xA; result: &quot;Hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(  $firstn := $substring(?, 0, ?);  $first5 := $firstn(?, 5);  $first5("Hello World"))'
Result: '"Hello"'
Expected: '"Hello"'
]]></output>
                </test-case>
                <test-case id="0-2322" name="partial-application.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.partial-application.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="372849241" result="Passed" start-time="2024-02-19T13:49:38.8772671Z" end-time="2024-02-19T13:49:38.8778122Z" duration="0.000545" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'substring(?, 0, ?)';&#xA; result: error T1007" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1007.
Actually thrown T1008.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'substring(?, 0, ?)'
]]></output>
                </test-case>
                <test-case id="0-2323" name="partial-application.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.partial-application.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2098602190" result="Passed" start-time="2024-02-19T13:49:38.8778231Z" end-time="2024-02-19T13:49:38.8781590Z" duration="0.000336" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'unknown(?)';&#xA; result: error T1008" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1008.
Actually thrown T1008.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'unknown(?)'
]]></output>
                </test-case>
                <test-case id="0-2324" name="predicates.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.predicates.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1451549580" result="Passed" start-time="2024-02-19T13:49:38.8781690Z" end-time="2024-02-19T13:49:38.8782344Z" duration="0.000066" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nothing[x=6][y=3].number';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'nothing[x=6][y=3].number'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2325" name="predicates.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.predicates.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="996089926" result="Passed" start-time="2024-02-19T13:49:38.8782409Z" end-time="2024-02-19T13:49:38.8783014Z" duration="0.000061" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'clues[x=6][y=3].number';&#xA; result: 7" />
                  </properties>
                  <output><![CDATA[Expr is 'clues[x=6][y=3].number'
Result: '7'
Expected: '7'
]]></output>
                </test-case>
                <test-case id="0-2326" name="predicates.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.predicates.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2089647154" result="Passed" start-time="2024-02-19T13:49:38.8783076Z" end-time="2024-02-19T13:49:38.8783663Z" duration="0.000059" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[x=6][y=3].number';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$[x=6][y=3].number'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2327" name="predicates.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.predicates.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1473040839" result="Passed" start-time="2024-02-19T13:49:38.8783746Z" end-time="2024-02-19T13:49:38.8785982Z" duration="0.000224" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product[$lowercase(Description.Colour) = &quot;purple&quot;][0].Price';&#xA; result: [34.45,34.45]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product[$lowercase(Description.Colour) = "purple"][0].Price'
Result: '[34.45,34.45]'
Expected: '[34.45,34.45]'
]]></output>
                </test-case>
                <test-case id="0-2328" name="quoted-selectors.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="42614293" result="Passed" start-time="2024-02-19T13:49:38.8786111Z" end-time="2024-02-19T13:49:38.8787794Z" duration="0.000168" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.&quot;blah&quot;';&#xA; result: [{&quot;baz&quot;:{&quot;fud&quot;:&quot;hello&quot;}},{&quot;baz&quot;:{&quot;fud&quot;:&quot;world&quot;}},{&quot;bazz&quot;:&quot;gotcha&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo."blah"'
Result: '[{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"}]'
Expected: '[{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"}]'
]]></output>
                </test-case>
                <test-case id="0-2329" name="quoted-selectors.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="13719580" result="Passed" start-time="2024-02-19T13:49:38.8787907Z" end-time="2024-02-19T13:49:38.8789494Z" duration="0.000159" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.&quot;blah&quot;.baz.'fud'';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo."blah".baz.'fud''
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2330" name="quoted-selectors.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="612791587" result="Passed" start-time="2024-02-19T13:49:38.8789618Z" end-time="2024-02-19T13:49:38.8792331Z" duration="0.000271" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;foo&quot;.&quot;blah&quot;.&quot;baz&quot;.&quot;fud&quot;';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '"foo"."blah"."baz"."fud"'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2331" name="quoted-selectors.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2077212549" result="Passed" start-time="2024-02-19T13:49:38.8792447Z" end-time="2024-02-19T13:49:38.8793862Z" duration="0.000142" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.&quot;blah.baz&quot;';&#xA; result: &quot;here&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo."blah.baz"'
Result: '"here"'
Expected: '"here"'
]]></output>
                </test-case>
                <test-case id="0-2332" name="quoted-selectors.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1660185388" result="Passed" start-time="2024-02-19T13:49:38.8794177Z" end-time="2024-02-19T13:49:38.8795604Z" duration="0.000143" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.`blah`';&#xA; result: [{&quot;baz&quot;:{&quot;fud&quot;:&quot;hello&quot;}},{&quot;baz&quot;:{&quot;fud&quot;:&quot;world&quot;}},{&quot;bazz&quot;:&quot;gotcha&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.`blah`'
Result: '[{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"}]'
Expected: '[{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"}]'
]]></output>
                </test-case>
                <test-case id="0-2333" name="quoted-selectors.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1847960850" result="Passed" start-time="2024-02-19T13:49:38.8795728Z" end-time="2024-02-19T13:49:38.8796665Z" duration="0.000094" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.`blah`.baz.'fud'';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.`blah`.baz.'fud''
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2334" name="quoted-selectors.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="84518271" result="Passed" start-time="2024-02-19T13:49:38.8796767Z" end-time="2024-02-19T13:49:38.8797464Z" duration="0.000070" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '`foo`.`blah`.`baz`.`fud`';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '`foo`.`blah`.`baz`.`fud`'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2335" name="quoted-selectors.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.quoted-selectors.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="761436804" result="Passed" start-time="2024-02-19T13:49:38.8797548Z" end-time="2024-02-19T13:49:38.8798332Z" duration="0.000078" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.`blah.baz`';&#xA; result: &quot;here&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.`blah.baz`'
Result: '"here"'
Expected: '"here"'
]]></output>
                </test-case>
                <test-case id="0-2336" name="range-operator.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1755580912" result="Passed" start-time="2024-02-19T13:49:38.8798409Z" end-time="2024-02-19T13:49:38.8799695Z" duration="0.000129" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[0..9]';&#xA; result: [0,1,2,3,4,5,6,7,8,9]" />
                  </properties>
                  <output><![CDATA[Expr is '[0..9]'
Result: '[0,1,2,3,4,5,6,7,8,9]'
Expected: '[0,1,2,3,4,5,6,7,8,9]'
]]></output>
                </test-case>
                <test-case id="0-2337" name="range-operator.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2046925408" result="Passed" start-time="2024-02-19T13:49:38.8799822Z" end-time="2024-02-19T13:49:38.8800791Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[0..9][$ % 2 = 0]';&#xA; result: [0,2,4,6,8]" />
                  </properties>
                  <output><![CDATA[Expr is '[0..9][$ % 2 = 0]'
Result: '[0,2,4,6,8]'
Expected: '[0,2,4,6,8]'
]]></output>
                </test-case>
                <test-case id="0-2338" name="range-operator.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1410177452" result="Passed" start-time="2024-02-19T13:49:38.8800899Z" end-time="2024-02-19T13:49:38.8801628Z" duration="0.000073" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[0, 4..9, 20, 22]';&#xA; result: [0,4,5,6,7,8,9,20,22]" />
                  </properties>
                  <output><![CDATA[Expr is '[0, 4..9, 20, 22]'
Result: '[0,4,5,6,7,8,9,20,22]'
Expected: '[0,4,5,6,7,8,9,20,22]'
]]></output>
                </test-case>
                <test-case id="0-2339" name="range-operator.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1484910598" result="Passed" start-time="2024-02-19T13:49:38.8801702Z" end-time="2024-02-19T13:49:38.8802196Z" duration="0.000050" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[5..2]';&#xA; result: []" />
                  </properties>
                  <output><![CDATA[Expr is '[5..2]'
Result: '[]'
Expected: '[]'
]]></output>
                </test-case>
                <test-case id="0-2340" name="range-operator.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1144826851" result="Passed" start-time="2024-02-19T13:49:38.8802254Z" end-time="2024-02-19T13:49:38.8803018Z" duration="0.000077" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[5..2, 2..5]';&#xA; result: [2,3,4,5]" />
                  </properties>
                  <output><![CDATA[Expr is '[5..2, 2..5]'
Result: '[2,3,4,5]'
Expected: '[2,3,4,5]'
]]></output>
                </test-case>
                <test-case id="0-2341" name="range-operator.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1153032891" result="Passed" start-time="2024-02-19T13:49:38.8803114Z" end-time="2024-02-19T13:49:38.8804239Z" duration="0.000113" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[-2..2]';&#xA; result: [-2,-1,0,1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '[-2..2]'
Result: '[-2,-1,0,1,2]'
Expected: '[-2,-1,0,1,2]'
]]></output>
                </test-case>
                <test-case id="0-2342" name="range-operator.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="388155982" result="Passed" start-time="2024-02-19T13:49:38.8804355Z" end-time="2024-02-19T13:49:38.8805232Z" duration="0.000088" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[-2..2].($*$)';&#xA; result: [4,1,0,1,4]" />
                  </properties>
                  <output><![CDATA[Expr is '[-2..2].($*$)'
Result: '[4,1,0,1,4]'
Expected: '[4,1,0,1,4]'
]]></output>
                </test-case>
                <test-case id="0-2343" name="range-operator.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1193089449" result="Passed" start-time="2024-02-19T13:49:38.8805331Z" end-time="2024-02-19T13:49:38.8806532Z" duration="0.000120" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[-2..blah]';&#xA; result: []" />
                  </properties>
                  <output><![CDATA[Expr is '[-2..blah]'
Result: '[]'
Expected: '[]'
]]></output>
                </test-case>
                <test-case id="0-2344" name="range-operator.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="93038127" result="Passed" start-time="2024-02-19T13:49:38.8806631Z" end-time="2024-02-19T13:49:38.8808360Z" duration="0.000173" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[blah..5, 3, -2..blah]';&#xA; result: [3]" />
                  </properties>
                  <output><![CDATA[Expr is '[blah..5, 3, -2..blah]'
Result: '[3]'
Expected: '[3]'
]]></output>
                </test-case>
                <test-case id="0-2345" name="range-operator.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1943753837" result="Passed" start-time="2024-02-19T13:49:38.8808647Z" end-time="2024-02-19T13:49:38.8819666Z" duration="0.001102" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1.1 .. 5]';&#xA; result: error T2003" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2003.
Actually thrown T2003.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1.1 .. 5]'
]]></output>
                </test-case>
                <test-case id="0-2346" name="range-operator.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1854851466" result="Passed" start-time="2024-02-19T13:49:38.8819902Z" end-time="2024-02-19T13:49:38.8851892Z" duration="0.003199" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1 .. 5.5]';&#xA; result: error T2004" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2004.
Actually thrown T2004.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1 .. 5.5]'
]]></output>
                </test-case>
                <test-case id="0-2347" name="range-operator.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1048110784" result="Passed" start-time="2024-02-19T13:49:38.8852137Z" end-time="2024-02-19T13:49:38.8859296Z" duration="0.000716" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[10..1.5]';&#xA; result: error T2004" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2004.
Actually thrown T2004.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[10..1.5]'
]]></output>
                </test-case>
                <test-case id="0-2348" name="range-operator.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2059977128" result="Passed" start-time="2024-02-19T13:49:38.8859467Z" end-time="2024-02-19T13:49:38.8865466Z" duration="0.000600" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[true..false]';&#xA; result: error T2003" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2003.
Actually thrown T2003.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[true..false]'
]]></output>
                </test-case>
                <test-case id="0-2349" name="range-operator.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="966862968" result="Passed" start-time="2024-02-19T13:49:38.8865625Z" end-time="2024-02-19T13:49:38.8873829Z" duration="0.000821" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '['dogs'..'cats']';&#xA; result: error T2003" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2003.
Actually thrown T2003.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '['dogs'..'cats']'
]]></output>
                </test-case>
                <test-case id="0-2350" name="range-operator.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1033274743" result="Passed" start-time="2024-02-19T13:49:38.8873991Z" end-time="2024-02-19T13:49:38.8878678Z" duration="0.000469" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1..'']';&#xA; result: error T2004" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2004.
Actually thrown T2004.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1..'']'
]]></output>
                </test-case>
                <test-case id="0-2351" name="range-operator.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="209460626" result="Passed" start-time="2024-02-19T13:49:38.8878805Z" end-time="2024-02-19T13:49:38.8883721Z" duration="0.000492" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1..[]]';&#xA; result: error T2004" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2004.
Actually thrown T2004.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1..[]]'
]]></output>
                </test-case>
                <test-case id="0-2352" name="range-operator.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="886516492" result="Passed" start-time="2024-02-19T13:49:38.8883829Z" end-time="2024-02-19T13:49:38.8888939Z" duration="0.000511" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1..{}]';&#xA; result: error T2004" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2004.
Actually thrown T2004.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1..{}]'
]]></output>
                </test-case>
                <test-case id="0-2353" name="range-operator.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="320432337" result="Passed" start-time="2024-02-19T13:49:38.8889072Z" end-time="2024-02-19T13:49:38.8899943Z" duration="0.001088" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1..false]';&#xA; result: error T2004" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2004.
Actually thrown T2004.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1..false]'
]]></output>
                </test-case>
                <test-case id="0-2354" name="range-operator.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="272256306" result="Passed" start-time="2024-02-19T13:49:38.8900125Z" end-time="2024-02-19T13:49:38.8906620Z" duration="0.000650" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[2..true]';&#xA; result: error T2004" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2004.
Actually thrown T2004.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[2..true]'
]]></output>
                </test-case>
                <test-case id="0-2355" name="range-operator.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="460838991" result="Passed" start-time="2024-02-19T13:49:38.8906752Z" end-time="2024-02-19T13:49:38.8911472Z" duration="0.000472" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[$x..true]';&#xA; result: error T2004" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2004.
Actually thrown T2004.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[$x..true]'
]]></output>
                </test-case>
                <test-case id="0-2356" name="range-operator.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="706238172" result="Passed" start-time="2024-02-19T13:49:38.8911622Z" end-time="2024-02-19T13:49:38.8916875Z" duration="0.000525" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[false..$x]';&#xA; result: error T2003" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2003.
Actually thrown T2003.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[false..$x]'
]]></output>
                </test-case>
                <test-case id="0-2357" name="range-operator.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="511154797" result="Passed" start-time="2024-02-19T13:49:38.8917016Z" end-time="2024-02-19T13:49:40.5383406Z" duration="1.646639" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1..10000000] ~&gt; $count()';&#xA; result: 10000000" />
                  </properties>
                  <output><![CDATA[Expr is '[1..10000000] ~> $count()'
Result: '10000000'
Expected: '10000000'
]]></output>
                </test-case>
                <test-case id="0-2358" name="range-operator.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="983247248" result="Passed" start-time="2024-02-19T13:49:40.5383716Z" end-time="2024-02-19T13:49:40.5572172Z" duration="0.018846" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[0..10000000] ~&gt; $count()';&#xA; result: error D2014" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D2014.
Actually thrown D2014.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[0..10000000] ~> $count()'
]]></output>
                </test-case>
                <test-case id="0-2359" name="range-operator.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="499597828" result="Passed" start-time="2024-02-19T13:49:40.5572457Z" end-time="2024-02-19T13:49:40.5578453Z" duration="0.000600" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '[1..10000001] ~&gt; $count()';&#xA; result: error D2014" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D2014.
Actually thrown D2014.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '[1..10000001] ~> $count()'
]]></output>
                </test-case>
                <test-case id="0-2360" name="range-operator.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.range-operator.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1644151715" result="Passed" start-time="2024-02-19T13:49:40.5578639Z" end-time="2024-02-19T13:49:42.1669395Z" duration="1.609076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[100..10000099] ~&gt; $count()';&#xA; result: 10000000" />
                  </properties>
                  <output><![CDATA[Expr is '[100..10000099] ~> $count()'
Result: '10000000'
Expected: '10000000'
]]></output>
                </test-case>
                <test-case id="0-2361" name="regex.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1556878457" result="Passed" start-time="2024-02-19T13:49:42.1669667Z" end-time="2024-02-19T13:49:42.1671587Z" duration="0.000192" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;ababbxabbcc&quot;,/b+/)';&#xA; result: [&quot;a&quot;,&quot;a&quot;,&quot;xa&quot;,&quot;cc&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("ababbxabbcc",/b+/)'
Result: '["a","a","xa","cc"]'
Expected: '["a","a","xa","cc"]'
]]></output>
                </test-case>
                <test-case id="0-2362" name="regex.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="506554274" result="Passed" start-time="2024-02-19T13:49:42.1671766Z" end-time="2024-02-19T13:49:42.1672513Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;ababbxabbcc&quot;,/b+/, 2)';&#xA; result: [&quot;a&quot;,&quot;a&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("ababbxabbcc",/b+/, 2)'
Result: '["a","a"]'
Expected: '["a","a"]'
]]></output>
                </test-case>
                <test-case id="0-2363" name="regex.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="568235007" result="Passed" start-time="2024-02-19T13:49:42.1672591Z" end-time="2024-02-19T13:49:42.1673105Z" duration="0.000051" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$split(&quot;ababbxabbcc&quot;,/d+/)';&#xA; result: [&quot;ababbxabbcc&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$split("ababbxabbcc",/d+/)'
Result: '["ababbxabbcc"]'
Expected: '["ababbxabbcc"]'
]]></output>
                </test-case>
                <test-case id="0-2364" name="regex.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="855107207" result="Passed" start-time="2024-02-19T13:49:42.1673165Z" end-time="2024-02-19T13:49:42.1673714Z" duration="0.000055" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$contains(&quot;ababbxabbcc&quot;,/ab+/)';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$contains("ababbxabbcc",/ab+/)'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2365" name="regex.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2037397219" result="Passed" start-time="2024-02-19T13:49:42.1673766Z" end-time="2024-02-19T13:49:42.1674258Z" duration="0.000049" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$contains(&quot;ababbxabbcc&quot;,/ax+/)';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is '$contains("ababbxabbcc",/ax+/)'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2366" name="regex.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="805007339" result="Passed" start-time="2024-02-19T13:49:42.1674307Z" end-time="2024-02-19T13:49:42.1675352Z" duration="0.000105" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product[$contains($.&quot;Product Name&quot;, /hat/)].ProductID';&#xA; result: 858236" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product[$contains($."Product Name", /hat/)].ProductID'
Result: '858236'
Expected: '858236'
]]></output>
                </test-case>
                <test-case id="0-2367" name="regex.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1377747085" result="Passed" start-time="2024-02-19T13:49:42.1675409Z" end-time="2024-02-19T13:49:42.1677465Z" duration="0.000206" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product[$contains($.&quot;Product Name&quot;, /hat/i)].ProductID';&#xA; result: [858383,858236,858383]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product[$contains($."Product Name", /hat/i)].ProductID'
Result: '[858383,858236,858383]'
Expected: '[858383,858236,858383]'
]]></output>
                </test-case>
                <test-case id="0-2368" name="regex.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="507255244" result="Passed" start-time="2024-02-19T13:49:42.1677562Z" end-time="2024-02-19T13:49:42.1681592Z" duration="0.000403" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;ababbxabbcc&quot;,/b+/, &quot;yy&quot;)';&#xA; result: &quot;ayyayyxayycc&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("ababbxabbcc",/b+/, "yy")'
Result: '"ayyayyxayycc"'
Expected: '"ayyayyxayycc"'
]]></output>
                </test-case>
                <test-case id="0-2369" name="regex.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1728264823" result="Passed" start-time="2024-02-19T13:49:42.1681725Z" end-time="2024-02-19T13:49:42.1683350Z" duration="0.000163" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;ababbxabbcc&quot;,/b+/, &quot;yy&quot;, 2)';&#xA; result: &quot;ayyayyxabbcc&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("ababbxabbcc",/b+/, "yy", 2)'
Result: '"ayyayyxabbcc"'
Expected: '"ayyayyxabbcc"'
]]></output>
                </test-case>
                <test-case id="0-2370" name="regex.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="469376034" result="Passed" start-time="2024-02-19T13:49:42.1683449Z" end-time="2024-02-19T13:49:42.1684397Z" duration="0.000095" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;ababbxabbcc&quot;,/b+/, &quot;yy&quot;, 0)';&#xA; result: &quot;ababbxabbcc&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("ababbxabbcc",/b+/, "yy", 0)'
Result: '"ababbxabbcc"'
Expected: '"ababbxabbcc"'
]]></output>
                </test-case>
                <test-case id="0-2371" name="regex.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2076111043" result="Passed" start-time="2024-02-19T13:49:42.1684478Z" end-time="2024-02-19T13:49:42.1685235Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;ababbxabbcc&quot;,/d+/, &quot;yy&quot;)';&#xA; result: &quot;ababbxabbcc&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("ababbxabbcc",/d+/, "yy")'
Result: '"ababbxabbcc"'
Expected: '"ababbxabbcc"'
]]></output>
                </test-case>
                <test-case id="0-2372" name="regex.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1867233550" result="Passed" start-time="2024-02-19T13:49:42.1685308Z" end-time="2024-02-19T13:49:42.1686759Z" duration="0.000145" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;John Smith&quot;, /(\w+)\s(\w+)/, &quot;$2, $1&quot;)';&#xA; result: &quot;Smith, John&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("John Smith", /(\w+)\s(\w+)/, "$2, $1")'
Result: '"Smith, John"'
Expected: '"Smith, John"'
]]></output>
                </test-case>
                <test-case id="0-2373" name="regex.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1646996488" result="Passed" start-time="2024-02-19T13:49:42.1686857Z" end-time="2024-02-19T13:49:42.1687649Z" duration="0.000079" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;265USD&quot;, /([0-9]+)USD/, &quot;$$$1&quot;)';&#xA; result: &quot;$265&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("265USD", /([0-9]+)USD/, "$$$1")'
Result: '"$265"'
Expected: '"$265"'
]]></output>
                </test-case>
                <test-case id="0-2374" name="regex.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="426460001" result="Passed" start-time="2024-02-19T13:49:42.1687709Z" end-time="2024-02-19T13:49:42.1688557Z" duration="0.000085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;265USD&quot;, /([0-9]+)USD/, &quot;$w&quot;)';&#xA; result: &quot;$w&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("265USD", /([0-9]+)USD/, "$w")'
Result: '"$w"'
Expected: '"$w"'
]]></output>
                </test-case>
                <test-case id="0-2375" name="regex.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="637569834" result="Passed" start-time="2024-02-19T13:49:42.1688621Z" end-time="2024-02-19T13:49:42.1689242Z" duration="0.000062" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;265USD&quot;, /([0-9]+)USD/, &quot;$0 -&gt; $$$1&quot;)';&#xA; result: &quot;265USD -&gt; $265&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("265USD", /([0-9]+)USD/, "$0 -> $$$1")'
Result: '"265USD -> $265"'
Expected: '"265USD -> $265"'
]]></output>
                </test-case>
                <test-case id="0-2376" name="regex.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="102526203" result="Failed" start-time="2024-02-19T13:49:42.1689298Z" end-time="2024-02-19T13:49:42.1699076Z" duration="0.000978" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;265USD&quot;, /([0-9]+)USD/, &quot;$0$1$2&quot;)';&#xA; result: &quot;265USD265&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"265USD265"', got '"265USD265$2"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$replace("265USD", /([0-9]+)USD/, "$0$1$2")'
Result: '"265USD265$2"'
Expected: '"265USD265"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"265USD265"', got '"265USD265$2"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2377" name="regex.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1327243439" result="Passed" start-time="2024-02-19T13:49:42.1699259Z" end-time="2024-02-19T13:49:42.1700367Z" duration="0.000111" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abcd&quot;, /(ab)|(a)/, &quot;[1=$1][2=$2]&quot;)';&#xA; result: &quot;[1=ab][2=]cd&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abcd", /(ab)|(a)/, "[1=$1][2=$2]")'
Result: '"[1=ab][2=]cd"'
Expected: '"[1=ab][2=]cd"'
]]></output>
                </test-case>
                <test-case id="0-2378" name="regex.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2005564063" result="Passed" start-time="2024-02-19T13:49:42.1700456Z" end-time="2024-02-19T13:49:42.1701352Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abracadabra&quot;, /bra/, &quot;*&quot;)';&#xA; result: &quot;a*cada*&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abracadabra", /bra/, "*")'
Result: '"a*cada*"'
Expected: '"a*cada*"'
]]></output>
                </test-case>
                <test-case id="0-2379" name="regex.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1655279390" result="Passed" start-time="2024-02-19T13:49:42.1701433Z" end-time="2024-02-19T13:49:42.1702351Z" duration="0.000092" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abracadabra&quot;, /a.*a/, &quot;*&quot;)';&#xA; result: &quot;*&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abracadabra", /a.*a/, "*")'
Result: '"*"'
Expected: '"*"'
]]></output>
                </test-case>
                <test-case id="0-2380" name="regex.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1288722107" result="Passed" start-time="2024-02-19T13:49:42.1702429Z" end-time="2024-02-19T13:49:42.1703481Z" duration="0.000105" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abracadabra&quot;, /a.*?a/, &quot;*&quot;)';&#xA; result: &quot;*c*bra&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abracadabra", /a.*?a/, "*")'
Result: '"*c*bra"'
Expected: '"*c*bra"'
]]></output>
                </test-case>
                <test-case id="0-2381" name="regex.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1041536370" result="Passed" start-time="2024-02-19T13:49:42.1703551Z" end-time="2024-02-19T13:49:42.1704570Z" duration="0.000102" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abracadabra&quot;, /a/, &quot;&quot;)';&#xA; result: &quot;brcdbr&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abracadabra", /a/, "")'
Result: '"brcdbr"'
Expected: '"brcdbr"'
]]></output>
                </test-case>
                <test-case id="0-2382" name="regex.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1560547358" result="Passed" start-time="2024-02-19T13:49:42.1704676Z" end-time="2024-02-19T13:49:42.1705993Z" duration="0.000132" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abracadabra&quot;, /a(.)/, &quot;a$1$1&quot;)';&#xA; result: &quot;abbraccaddabbra&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abracadabra", /a(.)/, "a$1$1")'
Result: '"abbraccaddabbra"'
Expected: '"abbraccaddabbra"'
]]></output>
                </test-case>
                <test-case id="0-2383" name="regex.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1223234972" result="Failed" start-time="2024-02-19T13:49:42.1706090Z" end-time="2024-02-19T13:49:42.1714881Z" duration="0.000879" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abracadabra&quot;, /.*?/, &quot;$1&quot;)';&#xA; result: error D1004" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error D1004 (), got '"$1a$1b$1r$1a$1c$1a$1d$1a$1b$1r$1a$1"']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$replace("abracadabra", /.*?/, "$1")'
Result: '"$1a$1b$1r$1a$1c$1a$1d$1a$1b$1r$1a$1"'
Expected error D1004
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error D1004 (), got '"$1a$1b$1r$1a$1c$1a$1d$1a$1b$1r$1a$1"']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2384" name="regex.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1127928484" result="Passed" start-time="2024-02-19T13:49:42.1715041Z" end-time="2024-02-19T13:49:42.1716281Z" duration="0.000124" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;AAAA&quot;, /A+/, &quot;b&quot;)';&#xA; result: &quot;b&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("AAAA", /A+/, "b")'
Result: '"b"'
Expected: '"b"'
]]></output>
                </test-case>
                <test-case id="0-2385" name="regex.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="403330961" result="Passed" start-time="2024-02-19T13:49:42.1716360Z" end-time="2024-02-19T13:49:42.1717196Z" duration="0.000084" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;AAAA&quot;, /A+?/, &quot;b&quot;)';&#xA; result: &quot;bbbb&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("AAAA", /A+?/, "b")'
Result: '"bbbb"'
Expected: '"bbbb"'
]]></output>
                </test-case>
                <test-case id="0-2386" name="regex.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1190696057" result="Passed" start-time="2024-02-19T13:49:42.1717343Z" end-time="2024-02-19T13:49:42.1720470Z" duration="0.000313" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;darted&quot;, /^(.*?)d(.*)$/, &quot;$1c$2&quot;)';&#xA; result: &quot;carted&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("darted", /^(.*?)d(.*)$/, "$1c$2")'
Result: '"carted"'
Expected: '"carted"'
]]></output>
                </test-case>
                <test-case id="0-2387" name="regex.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1339753051" result="Failed" start-time="2024-02-19T13:49:42.1720806Z" end-time="2024-02-19T13:49:42.2108411Z" duration="0.038761" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abcdefghijklmno&quot;, /(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)/, &quot;$8$5$12$12$18$123&quot;)';&#xA; result: &quot;hella8l3no&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"hella8l3no"', got '"hell$18$123no"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$replace("abcdefghijklmno", /(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)(m)/, "$8$5$12$12$18$123")'
Result: '"hell$18$123no"'
Expected: '"hella8l3no"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"hella8l3no"', got '"hell$18$123no"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2388" name="regex.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1575704544" result="Passed" start-time="2024-02-19T13:49:42.2108695Z" end-time="2024-02-19T13:49:42.2109878Z" duration="0.000118" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abcdefghijklmno&quot;, /xyz/, &quot;$8$5$12$12$18$123&quot;)';&#xA; result: &quot;abcdefghijklmno&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abcdefghijklmno", /xyz/, "$8$5$12$12$18$123")'
Result: '"abcdefghijklmno"'
Expected: '"abcdefghijklmno"'
]]></output>
                </test-case>
                <test-case id="0-2389" name="regex.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1771162927" result="Failed" start-time="2024-02-19T13:49:42.2109940Z" end-time="2024-02-19T13:49:42.2114533Z" duration="0.000460" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abcdefghijklmno&quot;, /ijk/, &quot;$8$5$12$12$18$123&quot;)';&#xA; result: &quot;abcdefgh22823lmno&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"abcdefgh22823lmno"', got '"abcdefgh$8$5$12$12$18$123lmno"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$replace("abcdefghijklmno", /ijk/, "$8$5$12$12$18$123")'
Result: '"abcdefgh$8$5$12$12$18$123lmno"'
Expected: '"abcdefgh22823lmno"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"abcdefgh22823lmno"', got '"abcdefgh$8$5$12$12$18$123lmno"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2390" name="regex.case029" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case029" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="55198632" result="Failed" start-time="2024-02-19T13:49:42.2114663Z" end-time="2024-02-19T13:49:42.2120501Z" duration="0.000584" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abcdefghijklmno&quot;, /(ijk)/, &quot;$8$5$12$12$18$123&quot;)';&#xA; result: &quot;abcdefghijk2ijk2ijk8ijk23lmno&quot;" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '"abcdefghijk2ijk2ijk8ijk23lmno"', got '"abcdefgh$8$5$12$12$18$123lmno"'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '$replace("abcdefghijklmno", /(ijk)/, "$8$5$12$12$18$123")'
Result: '"abcdefgh$8$5$12$12$18$123lmno"'
Expected: '"abcdefghijk2ijk2ijk8ijk23lmno"'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '"abcdefghijk2ijk2ijk8ijk23lmno"', got '"abcdefgh$8$5$12$12$18$123lmno"'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2391" name="regex.case030" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case030" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1244426115" result="Passed" start-time="2024-02-19T13:49:42.2120645Z" end-time="2024-02-19T13:49:42.2121610Z" duration="0.000097" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abcdefghijklmno&quot;, /ijk/, &quot;$x&quot;)';&#xA; result: &quot;abcdefgh$xlmno&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abcdefghijklmno", /ijk/, "$x")'
Result: '"abcdefgh$xlmno"'
Expected: '"abcdefgh$xlmno"'
]]></output>
                </test-case>
                <test-case id="0-2392" name="regex.case031" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case031" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1063678160" result="Passed" start-time="2024-02-19T13:49:42.2121712Z" end-time="2024-02-19T13:49:42.2122593Z" duration="0.000088" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;abcdefghijklmno&quot;, /(ijk)/, &quot;$x$&quot;)';&#xA; result: &quot;abcdefgh$x$lmno&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("abcdefghijklmno", /(ijk)/, "$x$")'
Result: '"abcdefgh$x$lmno"'
Expected: '"abcdefgh$x$lmno"'
]]></output>
                </test-case>
                <test-case id="0-2393" name="regex.case032" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case032" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="910579624" result="Passed" start-time="2024-02-19T13:49:42.2122676Z" end-time="2024-02-19T13:49:42.2124531Z" duration="0.000186" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.$replace($.&quot;Product Name&quot;, /hat/i, function($match) { &quot;foo&quot; })';&#xA; result: [&quot;Bowler foo&quot;,&quot;Trilby foo&quot;,&quot;Bowler foo&quot;,&quot;Cloak&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.$replace($."Product Name", /hat/i, function($match) { "foo" })'
Result: '["Bowler foo","Trilby foo","Bowler foo","Cloak"]'
Expected: '["Bowler foo","Trilby foo","Bowler foo","Cloak"]'
]]></output>
                </test-case>
                <test-case id="0-2394" name="regex.case033" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case033" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1988242530" result="Passed" start-time="2024-02-19T13:49:42.2124638Z" end-time="2024-02-19T13:49:42.2126198Z" duration="0.000156" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.$replace($.&quot;Product Name&quot;, /(h)(at)/i, function($match) { $uppercase($match.match) })';&#xA; result: [&quot;Bowler HAT&quot;,&quot;Trilby HAT&quot;,&quot;Bowler HAT&quot;,&quot;Cloak&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.$replace($."Product Name", /(h)(at)/i, function($match) { $uppercase($match.match) })'
Result: '["Bowler HAT","Trilby HAT","Bowler HAT","Cloak"]'
Expected: '["Bowler HAT","Trilby HAT","Bowler HAT","Cloak"]'
]]></output>
                </test-case>
                <test-case id="0-2395" name="regex.case034" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case034" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1735432041" result="Passed" start-time="2024-02-19T13:49:42.2126269Z" end-time="2024-02-19T13:49:42.2127927Z" duration="0.000166" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$replace(&quot;temperature = 68F today&quot;, /(-?\d+(?:\.\d*)?)F\b/, function($m) { ($number($m.groups[0]) - 32) * 5/9 &amp; &quot;C&quot; })';&#xA; result: &quot;temperature = 20C today&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$replace("temperature = 68F today", /(-?\d+(?:\.\d*)?)F\b/, function($m) { ($number($m.groups[0]) - 32) * 5/9 & "C" })'
Result: '"temperature = 20C today"'
Expected: '"temperature = 20C today"'
]]></output>
                </test-case>
                <test-case id="0-2396" name="regex.case035" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case035" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="646478617" result="Passed" start-time="2024-02-19T13:49:42.2127998Z" end-time="2024-02-19T13:49:42.2133747Z" duration="0.000575" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.$replace($.&quot;Product Name&quot;, /hat/i, function($match) { true })';&#xA; result: error D3012" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3012.
Actually thrown D3012.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order.Product.$replace($."Product Name", /hat/i, function($match) { true })'
]]></output>
                </test-case>
                <test-case id="0-2397" name="regex.case036" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case036" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1967404622" result="Passed" start-time="2024-02-19T13:49:42.2133849Z" end-time="2024-02-19T13:49:42.2138573Z" duration="0.000472" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.$replace($.&quot;Product Name&quot;, /hat/i, function($match) { 42 })';&#xA; result: error D3012" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code D3012.
Actually thrown D3012.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order.Product.$replace($."Product Name", /hat/i, function($match) { 42 })'
]]></output>
                </test-case>
                <test-case id="0-2398" name="regex.case037" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case037" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="337982242" result="Passed" start-time="2024-02-19T13:49:42.2138655Z" end-time="2024-02-19T13:49:42.2139867Z" duration="0.000121" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$map($, $match(?, /^(\w*\s\w*)/)).match';&#xA; result: [&quot;Felicia Saunders&quot;,&quot;Jimmy Schultz&quot;,&quot;Dolores Figueroa&quot;,&quot;Craig Moreno&quot;,&quot;Lindsey Hall&quot;,&quot;Bonnie Russell&quot;,&quot;Kristin Stewart&quot;,&quot;Owen Reid&quot;,&quot;Brenda Sherman&quot;,&quot;Dwayne Baldwin&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$map($, $match(?, /^(\w*\s\w*)/)).match'
Result: '["Felicia Saunders","Jimmy Schultz","Dolores Figueroa","Craig Moreno","Lindsey Hall","Bonnie Russell","Kristin Stewart","Owen Reid","Brenda Sherman","Dwayne Baldwin"]'
Expected: '["Felicia Saunders","Jimmy Schultz","Dolores Figueroa","Craig Moreno","Lindsey Hall","Bonnie Russell","Kristin Stewart","Owen Reid","Brenda Sherman","Dwayne Baldwin"]'
]]></output>
                </test-case>
                <test-case id="0-2399" name="regex.case038" fullname="Jsonata.Net.Native.TestSuite.Tests.regex.case038" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="203124555" result="Passed" start-time="2024-02-19T13:49:42.2139931Z" end-time="2024-02-19T13:49:42.2140976Z" duration="0.000105" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$map($, function($i){ $match($i, /^(\w*\s\w*)/) }).match';&#xA; result: [&quot;Felicia Saunders&quot;,&quot;Jimmy Schultz&quot;,&quot;Dolores Figueroa&quot;,&quot;Craig Moreno&quot;,&quot;Lindsey Hall&quot;,&quot;Bonnie Russell&quot;,&quot;Kristin Stewart&quot;,&quot;Owen Reid&quot;,&quot;Brenda Sherman&quot;,&quot;Dwayne Baldwin&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$map($, function($i){ $match($i, /^(\w*\s\w*)/) }).match'
Result: '["Felicia Saunders","Jimmy Schultz","Dolores Figueroa","Craig Moreno","Lindsey Hall","Bonnie Russell","Kristin Stewart","Owen Reid","Brenda Sherman","Dwayne Baldwin"]'
Expected: '["Felicia Saunders","Jimmy Schultz","Dolores Figueroa","Craig Moreno","Lindsey Hall","Bonnie Russell","Kristin Stewart","Owen Reid","Brenda Sherman","Dwayne Baldwin"]'
]]></output>
                </test-case>
                <test-case id="0-2400" name="simple-array-selectors.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1138746498" result="Passed" start-time="2024-02-19T13:49:42.2141045Z" end-time="2024-02-19T13:49:42.2141584Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'nest0.nest1[0]';&#xA; result: [1,3,5,6]" />
                  </properties>
                  <output><![CDATA[Expr is 'nest0.nest1[0]'
Result: '[1,3,5,6]'
Expected: '[1,3,5,6]'
]]></output>
                </test-case>
                <test-case id="0-2401" name="simple-array-selectors.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="477104381" result="Passed" start-time="2024-02-19T13:49:42.2141634Z" end-time="2024-02-19T13:49:42.2142103Z" duration="0.000047" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah[0].baz.fud';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah[0].baz.fud'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-2402" name="simple-array-selectors.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="540855540" result="Passed" start-time="2024-02-19T13:49:42.2142149Z" end-time="2024-02-19T13:49:42.2142608Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah[1].baz.fud';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah[1].baz.fud'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-2403" name="simple-array-selectors.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="331712305" result="Passed" start-time="2024-02-19T13:49:42.2142652Z" end-time="2024-02-19T13:49:42.2143094Z" duration="0.000044" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah[-1].bazz';&#xA; result: &quot;gotcha&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah[-1].bazz'
Result: '"gotcha"'
Expected: '"gotcha"'
]]></output>
                </test-case>
                <test-case id="0-2404" name="simple-array-selectors.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="497486934" result="Passed" start-time="2024-02-19T13:49:42.2143141Z" end-time="2024-02-19T13:49:42.2143602Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah)[1].baz.fud';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah)[1].baz.fud'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-2405" name="simple-array-selectors.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1104647347" result="Passed" start-time="2024-02-19T13:49:42.2143647Z" end-time="2024-02-19T13:49:42.2144121Z" duration="0.000047" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz.fud[0]';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz.fud[0]'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2406" name="simple-array-selectors.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="489710723" result="Passed" start-time="2024-02-19T13:49:42.2144165Z" end-time="2024-02-19T13:49:42.2144649Z" duration="0.000048" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz.fud[-1]';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz.fud[-1]'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2407" name="simple-array-selectors.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1387003651" result="Passed" start-time="2024-02-19T13:49:42.2144693Z" end-time="2024-02-19T13:49:42.2145147Z" duration="0.000045" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)[0]';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)[0]'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-2408" name="simple-array-selectors.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2041455983" result="Passed" start-time="2024-02-19T13:49:42.2145200Z" end-time="2024-02-19T13:49:42.2145653Z" duration="0.000045" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)[1]';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)[1]'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-2409" name="simple-array-selectors.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1782170119" result="Passed" start-time="2024-02-19T13:49:42.2145695Z" end-time="2024-02-19T13:49:42.2146206Z" duration="0.000051" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)[5 * 0.2]';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)[5 * 0.2]'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-2410" name="simple-array-selectors.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="358312788" result="Passed" start-time="2024-02-19T13:49:42.2146256Z" end-time="2024-02-19T13:49:42.2146717Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)[-1]';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)[-1]'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-2411" name="simple-array-selectors.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1526478380" result="Passed" start-time="2024-02-19T13:49:42.2146762Z" end-time="2024-02-19T13:49:42.2147224Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)[-2]';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)[-2]'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-2412" name="simple-array-selectors.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="653074381" result="Passed" start-time="2024-02-19T13:49:42.2147269Z" end-time="2024-02-19T13:49:42.2147729Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)[2-4]';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)[2-4]'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-2413" name="simple-array-selectors.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1475451505" result="Passed" start-time="2024-02-19T13:49:42.2147772Z" end-time="2024-02-19T13:49:42.2148261Z" duration="0.000049" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)[-(4-2)]';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)[-(4-2)]'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-2414" name="simple-array-selectors.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1358359368" result="Passed" start-time="2024-02-19T13:49:42.2148306Z" end-time="2024-02-19T13:49:42.2148823Z" duration="0.000052" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz.fud)[$$.foo.bar / 30]';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz.fud)[$$.foo.bar / 30]'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-2415" name="simple-array-selectors.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="602615345" result="Passed" start-time="2024-02-19T13:49:42.2148869Z" end-time="2024-02-19T13:49:42.2149375Z" duration="0.000051" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah[0].baz';&#xA; result: {&quot;fud&quot;:&quot;hello&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah[0].baz'
Result: '{"fud":"hello"}'
Expected: '{"fud":"hello"}'
]]></output>
                </test-case>
                <test-case id="0-2416" name="simple-array-selectors.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2143814746" result="Passed" start-time="2024-02-19T13:49:42.2149422Z" end-time="2024-02-19T13:49:42.2149932Z" duration="0.000051" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah.baz[0]';&#xA; result: [{&quot;fud&quot;:&quot;hello&quot;},{&quot;fud&quot;:&quot;world&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah.baz[0]'
Result: '[{"fud":"hello"},{"fud":"world"}]'
Expected: '[{"fud":"hello"},{"fud":"world"}]'
]]></output>
                </test-case>
                <test-case id="0-2417" name="simple-array-selectors.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1430802949" result="Passed" start-time="2024-02-19T13:49:42.2149980Z" end-time="2024-02-19T13:49:42.2150443Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(foo.blah.baz)[0]';&#xA; result: {&quot;fud&quot;:&quot;hello&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is '(foo.blah.baz)[0]'
Result: '{"fud":"hello"}'
Expected: '{"fud":"hello"}'
]]></output>
                </test-case>
                <test-case id="0-2418" name="simple-array-selectors.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1587790170" result="Passed" start-time="2024-02-19T13:49:42.2150500Z" end-time="2024-02-19T13:49:42.2150898Z" duration="0.000040" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[0]';&#xA; result: [1,2]" />
                  </properties>
                  <output><![CDATA[Expr is '$[0]'
Result: '[1,2]'
Expected: '[1,2]'
]]></output>
                </test-case>
                <test-case id="0-2419" name="simple-array-selectors.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="451776246" result="Passed" start-time="2024-02-19T13:49:42.2150959Z" end-time="2024-02-19T13:49:42.2151443Z" duration="0.000048" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[1]';&#xA; result: [3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '$[1]'
Result: '[3,4]'
Expected: '[3,4]'
]]></output>
                </test-case>
                <test-case id="0-2420" name="simple-array-selectors.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="846701162" result="Passed" start-time="2024-02-19T13:49:42.2151494Z" end-time="2024-02-19T13:49:42.2151879Z" duration="0.000039" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[-1]';&#xA; result: [3,4]" />
                  </properties>
                  <output><![CDATA[Expr is '$[-1]'
Result: '[3,4]'
Expected: '[3,4]'
]]></output>
                </test-case>
                <test-case id="0-2421" name="simple-array-selectors.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1612737935" result="Passed" start-time="2024-02-19T13:49:42.2151920Z" end-time="2024-02-19T13:49:42.2152286Z" duration="0.000037" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[1][0]';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '$[1][0]'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-2422" name="simple-array-selectors.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.simple-array-selectors.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1949526188" result="Passed" start-time="2024-02-19T13:49:42.2152325Z" end-time="2024-02-19T13:49:42.2153878Z" duration="0.000155" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[1.1][0.9]';&#xA; result: 3" />
                  </properties>
                  <output><![CDATA[Expr is '$[1.1][0.9]'
Result: '3'
Expected: '3'
]]></output>
                </test-case>
                <test-case id="0-2423" name="sorting.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="883575964" result="Passed" start-time="2024-02-19T13:49:42.2153947Z" end-time="2024-02-19T13:49:42.2155008Z" duration="0.000106" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Price^($)';&#xA; result: [21.67,34.45,34.45,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Price^($)'
Result: '[21.67,34.45,34.45,107.99]'
Expected: '[21.67,34.45,34.45,107.99]'
]]></output>
                </test-case>
                <test-case id="0-2424" name="sorting.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1673066191" result="Passed" start-time="2024-02-19T13:49:42.2155071Z" end-time="2024-02-19T13:49:42.2155794Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Price^(&lt;$)';&#xA; result: [21.67,34.45,34.45,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Price^(<$)'
Result: '[21.67,34.45,34.45,107.99]'
Expected: '[21.67,34.45,34.45,107.99]'
]]></output>
                </test-case>
                <test-case id="0-2425" name="sorting.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1372433566" result="Passed" start-time="2024-02-19T13:49:42.2155849Z" end-time="2024-02-19T13:49:42.2156470Z" duration="0.000062" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product.Price^(&gt;$)';&#xA; result: [107.99,34.45,34.45,21.67]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product.Price^(>$)'
Result: '[107.99,34.45,34.45,21.67]'
Expected: '[107.99,34.45,34.45,21.67]'
]]></output>
                </test-case>
                <test-case id="0-2426" name="sorting.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1012432883" result="Passed" start-time="2024-02-19T13:49:42.2156518Z" end-time="2024-02-19T13:49:42.2213708Z" duration="0.005719" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price).Description.Colour';&#xA; result: [&quot;Orange&quot;,&quot;Purple&quot;,&quot;Purple&quot;,&quot;Black&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price).Description.Colour'
Result: '["Orange","Purple","Purple","Black"]'
Expected: '["Orange","Purple","Purple","Black"]'
]]></output>
                </test-case>
                <test-case id="0-2427" name="sorting.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="956653926" result="Passed" start-time="2024-02-19T13:49:42.2213925Z" end-time="2024-02-19T13:49:42.2215573Z" duration="0.000165" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price).SKU';&#xA; result: [&quot;0406634348&quot;,&quot;0406654608&quot;,&quot;040657863&quot;,&quot;0406654603&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price).SKU'
Result: '["0406634348","0406654608","040657863","0406654603"]'
Expected: '["0406634348","0406654608","040657863","0406654603"]'
]]></output>
                </test-case>
                <test-case id="0-2428" name="sorting.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1806237605" result="Passed" start-time="2024-02-19T13:49:42.2215646Z" end-time="2024-02-19T13:49:42.2217155Z" duration="0.000151" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price * Quantity).Description.Colour';&#xA; result: [&quot;Orange&quot;,&quot;Purple&quot;,&quot;Black&quot;,&quot;Purple&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price * Quantity).Description.Colour'
Result: '["Orange","Purple","Black","Purple"]'
Expected: '["Orange","Purple","Black","Purple"]'
]]></output>
                </test-case>
                <test-case id="0-2429" name="sorting.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="838511607" result="Passed" start-time="2024-02-19T13:49:42.2217261Z" end-time="2024-02-19T13:49:42.2218949Z" duration="0.000169" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Quantity, Description.Colour).Description.Colour';&#xA; result: [&quot;Black&quot;,&quot;Orange&quot;,&quot;Purple&quot;,&quot;Purple&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Quantity, Description.Colour).Description.Colour'
Result: '["Black","Orange","Purple","Purple"]'
Expected: '["Black","Orange","Purple","Purple"]'
]]></output>
                </test-case>
                <test-case id="0-2430" name="sorting.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2138574864" result="Passed" start-time="2024-02-19T13:49:42.2219041Z" end-time="2024-02-19T13:49:42.2220277Z" duration="0.000124" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Quantity, &gt;Description.Colour).Description.Colour';&#xA; result: [&quot;Orange&quot;,&quot;Black&quot;,&quot;Purple&quot;,&quot;Purple&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Quantity, >Description.Colour).Description.Colour'
Result: '["Orange","Black","Purple","Purple"]'
Expected: '["Orange","Black","Purple","Purple"]'
]]></output>
                </test-case>
                <test-case id="0-2431" name="sorting.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="282605228" result="Passed" start-time="2024-02-19T13:49:42.2220368Z" end-time="2024-02-19T13:49:42.2222180Z" duration="0.000181" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price).SKU';&#xA; result: [&quot;0406634348&quot;,&quot;040657863&quot;,&quot;0406654603&quot;,&quot;0406654608&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price).SKU'
Result: '["0406634348","040657863","0406654603","0406654608"]'
Expected: '["0406634348","040657863","0406654603","0406654608"]'
]]></output>
                </test-case>
                <test-case id="0-2432" name="sorting.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="989261197" result="Passed" start-time="2024-02-19T13:49:42.2222276Z" end-time="2024-02-19T13:49:42.2223493Z" duration="0.000122" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price).SKU';&#xA; result: [&quot;0406654608&quot;,&quot;040657863&quot;,&quot;0406654603&quot;,&quot;0406634348&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price).SKU'
Result: '["0406654608","040657863","0406654603","0406634348"]'
Expected: '["0406654608","040657863","0406654603","0406634348"]'
]]></output>
                </test-case>
                <test-case id="0-2433" name="sorting.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1802439508" result="Passed" start-time="2024-02-19T13:49:42.2223661Z" end-time="2024-02-19T13:49:42.2224494Z" duration="0.000083" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price).SKU';&#xA; result: [&quot;040657863&quot;,&quot;0406654603&quot;,&quot;0406654608&quot;,&quot;0406634348&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price).SKU'
Result: '["040657863","0406654603","0406654608","0406634348"]'
Expected: '["040657863","0406654603","0406654608","0406634348"]'
]]></output>
                </test-case>
                <test-case id="0-2434" name="sorting.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="516532892" result="Passed" start-time="2024-02-19T13:49:42.2224550Z" end-time="2024-02-19T13:49:42.2233115Z" duration="0.000857" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price).SKU';&#xA; result: error T2007" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2007.
Actually thrown T2007.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price).SKU'
]]></output>
                </test-case>
                <test-case id="0-2435" name="sorting.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="811617726" result="Passed" start-time="2024-02-19T13:49:42.2233218Z" end-time="2024-02-19T13:49:42.2237109Z" duration="0.000389" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price).SKU';&#xA; result: error T2008" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2008.
Actually thrown T2008.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price).SKU'
]]></output>
                </test-case>
                <test-case id="0-2436" name="sorting.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="500680830" result="Passed" start-time="2024-02-19T13:49:42.2237187Z" end-time="2024-02-19T13:49:42.2240456Z" duration="0.000327" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order.Product^(Price).SKU';&#xA; result: error T2008" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2008.
Actually thrown T2008.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order.Product^(Price).SKU'
]]></output>
                </test-case>
                <test-case id="0-2437" name="sorting.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1228835053" result="Passed" start-time="2024-02-19T13:49:42.2240531Z" end-time="2024-02-19T13:49:42.2241209Z" duration="0.000068" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$^(age).name';&#xA; result: [&quot;Sally&quot;,&quot;Bill&quot;,&quot;Jim&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '$^(age).name'
Result: '["Sally","Bill","Jim"]'
Expected: '["Sally","Bill","Jim"]'
]]></output>
                </test-case>
                <test-case id="0-2438" name="sorting.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="725748038" result="Passed" start-time="2024-02-19T13:49:42.2241263Z" end-time="2024-02-19T13:49:42.2241797Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($^(age)).name';&#xA; result: [&quot;Sally&quot;,&quot;Bill&quot;,&quot;Jim&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '($^(age)).name'
Result: '["Sally","Bill","Jim"]'
Expected: '["Sally","Bill","Jim"]'
]]></output>
                </test-case>
                <test-case id="0-2439" name="sorting.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="23281137" result="Passed" start-time="2024-02-19T13:49:42.2241851Z" end-time="2024-02-19T13:49:42.2242396Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$^(age)[0].name';&#xA; result: &quot;Sally&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$^(age)[0].name'
Result: '"Sally"'
Expected: '"Sally"'
]]></output>
                </test-case>
                <test-case id="0-2440" name="sorting.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2061103885" result="Passed" start-time="2024-02-19T13:49:42.2242445Z" end-time="2024-02-19T13:49:42.2242933Z" duration="0.000049" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($^(age))[0].name';&#xA; result: &quot;Sally&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($^(age))[0].name'
Result: '"Sally"'
Expected: '"Sally"'
]]></output>
                </test-case>
                <test-case id="0-2441" name="sorting.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1951176053" result="Passed" start-time="2024-02-19T13:49:42.2242980Z" end-time="2024-02-19T13:49:42.2243478Z" duration="0.000050" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($^(age)[0]).name';&#xA; result: &quot;Sally&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '($^(age)[0]).name'
Result: '"Sally"'
Expected: '"Sally"'
]]></output>
                </test-case>
                <test-case id="0-2442" name="sorting.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1445780715" result="Passed" start-time="2024-02-19T13:49:42.2243526Z" end-time="2024-02-19T13:49:42.2244220Z" duration="0.000070" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$[0]^(age)';&#xA; result: {&quot;name&quot;:&quot;Bill&quot;,&quot;age&quot;:35}" />
                  </properties>
                  <output><![CDATA[Expr is '$[0]^(age)'
Result: '{"name":"Bill","age":35}'
Expected: '{"name":"Bill","age":35}'
]]></output>
                </test-case>
                <test-case id="0-2443" name="sorting.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.sorting.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1941018072" result="Skipped" label="Ignored" start-time="2024-02-19T13:49:42.2244280Z" end-time="2024-02-19T13:49:42.2248430Z" duration="0.000415" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order#$o.Product^(ProductID).{ 'Product': `Product Name`, 'Order Index': $o }';&#xA; result: [{&quot;Product&quot;:&quot;Cloak&quot;,&quot;Order Index&quot;:1},{&quot;Product&quot;:&quot;Trilby hat&quot;,&quot;Order Index&quot;:0},{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order Index&quot;:0},{&quot;Product&quot;:&quot;Bowler Hat&quot;,&quot;Order Index&quot;:1}]" />
                  </properties>
                  <reason>
                    <message><![CDATA[Failed with exception: Not supported yet: #
(NotImplementedException)
   at Jsonata.Net.Native.Parsing.Lexer.scanName() in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 252
   at Jsonata.Net.Native.Parsing.Lexer.next(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Lexer.cs:line 160
   at Jsonata.Net.Native.Parsing.Parser.advance(Boolean allowRegex) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 180
   at Jsonata.Net.Native.Parsing.Parser.parseExpression(Int32 rbp) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 225
   at Jsonata.Net.Native.Parsing.Parser.Parse(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\Parsing\Parser.cs:line 18
   at Jsonata.Net.Native.JsonataQuery..ctor(String queryText) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native\JsonataQuery.cs:line 18
   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 93]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account.Order#$o.Product^(ProductID).{ 'Product': `Product Name`, 'Order Index': $o }'
]]></output>
                </test-case>
                <test-case id="0-2444" name="string-concat.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1412850139" result="Passed" start-time="2024-02-19T13:49:42.2248513Z" end-time="2024-02-19T13:49:42.2249161Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;foo&quot; &amp; &quot;bar&quot;';&#xA; result: &quot;foobar&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"foo" & "bar"'
Result: '"foobar"'
Expected: '"foobar"'
]]></output>
                </test-case>
                <test-case id="0-2445" name="string-concat.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="676203899" result="Passed" start-time="2024-02-19T13:49:42.2249218Z" end-time="2024-02-19T13:49:42.2249730Z" duration="0.000051" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;foo&quot;&amp;&quot;bar&quot;';&#xA; result: &quot;foobar&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"foo"&"bar"'
Result: '"foobar"'
Expected: '"foobar"'
]]></output>
                </test-case>
                <test-case id="0-2446" name="string-concat.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="591351734" result="Passed" start-time="2024-02-19T13:49:42.2249785Z" end-time="2024-02-19T13:49:42.2250347Z" duration="0.000056" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.blah[0].baz.fud &amp;foo.blah[1].baz.fud';&#xA; result: &quot;helloworld&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.blah[0].baz.fud &foo.blah[1].baz.fud'
Result: '"helloworld"'
Expected: '"helloworld"'
]]></output>
                </test-case>
                <test-case id="0-2447" name="string-concat.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1735710302" result="Passed" start-time="2024-02-19T13:49:42.2250394Z" end-time="2024-02-19T13:49:42.2250940Z" duration="0.000055" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.(blah[0].baz.fud &amp; blah[1].baz.fud)';&#xA; result: &quot;helloworld&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.(blah[0].baz.fud & blah[1].baz.fud)'
Result: '"helloworld"'
Expected: '"helloworld"'
]]></output>
                </test-case>
                <test-case id="0-2448" name="string-concat.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1699703903" result="Passed" start-time="2024-02-19T13:49:42.2250987Z" end-time="2024-02-19T13:49:42.2251491Z" duration="0.000050" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.(blah[0].baz.fud &amp; none)';&#xA; result: &quot;hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.(blah[0].baz.fud & none)'
Result: '"hello"'
Expected: '"hello"'
]]></output>
                </test-case>
                <test-case id="0-2449" name="string-concat.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1385627185" result="Passed" start-time="2024-02-19T13:49:42.2251538Z" end-time="2024-02-19T13:49:42.2252452Z" duration="0.000092" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.(none.here &amp; blah[1].baz.fud)';&#xA; result: &quot;world&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.(none.here & blah[1].baz.fud)'
Result: '"world"'
Expected: '"world"'
]]></output>
                </test-case>
                <test-case id="0-2450" name="string-concat.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1739100942" result="Passed" start-time="2024-02-19T13:49:42.2252551Z" end-time="2024-02-19T13:49:42.2253192Z" duration="0.000064" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1,2]&amp;[3,4]';&#xA; result: &quot;[1,2][3,4]&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '[1,2]&[3,4]'
Result: '"[1,2][3,4]"'
Expected: '"[1,2][3,4]"'
]]></output>
                </test-case>
                <test-case id="0-2451" name="string-concat.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1363159315" result="Passed" start-time="2024-02-19T13:49:42.2253248Z" end-time="2024-02-19T13:49:42.2253877Z" duration="0.000063" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1,2]&amp;3';&#xA; result: &quot;[1,2]3&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '[1,2]&3'
Result: '"[1,2]3"'
Expected: '"[1,2]3"'
]]></output>
                </test-case>
                <test-case id="0-2452" name="string-concat.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="379614452" result="Passed" start-time="2024-02-19T13:49:42.2253949Z" end-time="2024-02-19T13:49:42.2254575Z" duration="0.000063" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '1&amp;2';&#xA; result: &quot;12&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '1&2'
Result: '"12"'
Expected: '"12"'
]]></output>
                </test-case>
                <test-case id="0-2453" name="string-concat.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2033689643" result="Passed" start-time="2024-02-19T13:49:42.2254644Z" end-time="2024-02-19T13:49:42.2374311Z" duration="0.011967" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '1&amp;[2]';&#xA; result: &quot;1[2]&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '1&[2]'
Result: '"1[2]"'
Expected: '"1[2]"'
]]></output>
                </test-case>
                <test-case id="0-2454" name="string-concat.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1503907040" result="Passed" start-time="2024-02-19T13:49:42.2374518Z" end-time="2024-02-19T13:49:42.2375524Z" duration="0.000101" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;hello&quot;&amp;5';&#xA; result: &quot;hello5&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"hello"&5'
Result: '"hello5"'
Expected: '"hello5"'
]]></output>
                </test-case>
                <test-case id="0-2455" name="string-concat.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.string-concat.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1673492210" result="Passed" start-time="2024-02-19T13:49:42.2375586Z" end-time="2024-02-19T13:49:42.2376363Z" duration="0.000078" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;Prices: &quot; &amp; Account.Order.Product.Price';&#xA; result: &quot;Prices: [34.45,21.67,34.45,107.99]&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"Prices: " & Account.Order.Product.Price'
Result: '"Prices: [34.45,21.67,34.45,107.99]"'
Expected: '"Prices: [34.45,21.67,34.45,107.99]"'
]]></output>
                </test-case>
                <test-case id="0-2456" name="tail-recursion.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="675061840" result="Passed" start-time="2024-02-19T13:49:42.2376426Z" end-time="2024-02-19T13:49:42.2377066Z" duration="0.000064" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '            (              $f := function($n){()};              $f(1)            ) ';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '            (              $f := function($n){()};              $f(1)            ) '
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2457" name="tail-recursion.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1804763223" result="Failed" start-time="2024-02-19T13:49:42.2377125Z" end-time="2024-02-19T13:49:42.2390414Z" duration="0.001329" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $factorial := function($n){$n = 0 ? 1 : $n * $factorial($n - 1)};  $factorial(99))             ';&#xA; result: 9.33262154439441E+155" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '9.33262154439441E+155', got '0'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '(  $factorial := function($n){$n = 0 ? 1 : $n * $factorial($n - 1)};  $factorial(99))             '
Result: '0'
Expected: '9.33262154439441E+155'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '9.33262154439441E+155', got '0'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2458" name="tail-recursion.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="806129761" result="Failed" start-time="2024-02-19T13:49:42.2390566Z" end-time="2024-02-19T13:49:42.2397704Z" duration="0.000714" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '(  $factorial := function($n){$n = 0 ? 1 : $n * $factorial($n - 1)};  $factorial(100))             ';&#xA; result: error U1001" />
                  </properties>
                  <failure>
                    <message><![CDATA[Expected error U1001 (), got '0']]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '(  $factorial := function($n){$n = 0 ? 1 : $n * $factorial($n - 1)};  $factorial(100))             '
Result: '0'
Expected error U1001
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Expected error U1001 (), got '0']]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 148
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2459" name="tail-recursion.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1272537015" result="Passed" start-time="2024-02-19T13:49:42.2397800Z" end-time="2024-02-19T13:49:42.2398938Z" duration="0.000114" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $factorial := function($n){(    $iter := function($n, $acc) {      $n = 0 ? $acc : $iter($n - 1, $n * $acc)    };    $iter($n, 1)  )};  $factorial(5)) ';&#xA; result: 120" />
                  </properties>
                  <output><![CDATA[Expr is '(  $factorial := function($n){(    $iter := function($n, $acc) {      $n = 0 ? $acc : $iter($n - 1, $n * $acc)    };    $iter($n, 1)  )};  $factorial(5)) '
Result: '120'
Expected: '120'
]]></output>
                </test-case>
                <test-case id="0-2460" name="tail-recursion.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="92214464" result="Failed" start-time="2024-02-19T13:49:42.2399025Z" end-time="2024-02-19T13:49:42.2406689Z" duration="0.000767" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '(  $factorial := function($n){(    $iter := function($n, $acc) {      $n = 0 ? $acc : $iter($n - 1, $n * $acc)    };    $iter($n, 1)  )};  $factorial(150)) ';&#xA; result: 5.7133839564458575E+262" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected '5.7133839564458575E+262', got '0'
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Expr is '(  $factorial := function($n){(    $iter := function($n, $acc) {      $n = 0 ? $acc : $iter($n - 1, $n * $acc)    };    $iter($n, 1)  )};  $factorial(150)) '
Result: '0'
Expected: '5.7133839564458575E+262'
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected '5.7133839564458575E+262', got '0'
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 138
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2461" name="tail-recursion.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1680540444" result="Failed" start-time="2024-02-19T13:49:42.2406777Z" end-time="2024-02-19T13:49:42.2410595Z" duration="0.000382" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '(  $inf := function($n){$n+$inf($n-1)};  $inf(5))';&#xA; result: error U1001" />
                  </properties>
                  <failure>
                    <message><![CDATA[Tail recursion is not supported yet, and having StackOverflow here breaks tests]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 51
]]></stack-trace>
                  </failure>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Tail recursion is not supported yet, and having StackOverflow here breaks tests]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 51
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2462" name="tail-recursion.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1728249693" result="Failed" start-time="2024-02-19T13:49:42.2410680Z" end-time="2024-02-19T13:49:42.2414572Z" duration="0.000389" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '(  $inf := function(){$inf()};  $inf())';&#xA; result: error U1001" />
                  </properties>
                  <failure>
                    <message><![CDATA[Tail recursion is not supported yet, and having StackOverflow here breaks tests]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 51
]]></stack-trace>
                  </failure>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Tail recursion is not supported yet, and having StackOverflow here breaks tests]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 51
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2463" name="tail-recursion.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1202944376" result="Failed" start-time="2024-02-19T13:49:42.2414666Z" end-time="2024-02-19T13:49:42.2418258Z" duration="0.000359" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '        (          $even := function($n) { $n = 0 ? true : $odd($n-1) };           $odd := function($n) { $n = 0 ? false : $even($n-1) };           $odd(6555)         )';&#xA; result: true" />
                  </properties>
                  <failure>
                    <message><![CDATA[Tail recursion is not supported yet, and having StackOverflow here breaks tests]]></message>
                    <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 51
]]></stack-trace>
                  </failure>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[Tail recursion is not supported yet, and having StackOverflow here breaks tests]]></message>
                      <stack-trace><![CDATA[   at Jsonata.Net.Native.TestSuite.Tests.Test(CaseInfo caseInfo) in C:\Dev\VSProjects\jsonata.net.native\src\Jsonata.Net.Native.TestSuite\UnitTest1.cs:line 51
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-2464" name="tail-recursion.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1791078902" result="Passed" start-time="2024-02-19T13:49:42.2418341Z" end-time="2024-02-19T13:49:42.2432929Z" duration="0.001459" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($f := function($s, $x)&lt;an:s&gt; { $x &gt; 0 ? $f([$s, $s], $x-1) : $s};  $f('a', 2)  )';&#xA; result: [&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is '($f := function($s, $x)<an:s> { $x > 0 ? $f([$s, $s], $x-1) : $s};  $f('a', 2)  )'
Result: '["a","a","a","a"]'
Expected: '["a","a","a","a"]'
]]></output>
                </test-case>
                <test-case id="0-2465" name="tail-recursion.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.tail-recursion.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="75707560" result="Passed" start-time="2024-02-19T13:49:42.2433036Z" end-time="2024-02-19T13:49:42.2453343Z" duration="0.002031" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($f := function($s, $x)&lt;sn:s&gt; { $x &gt; 0 ? $f([$s, $s], $x-1) : $s};  $f('a', 2)  )';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '($f := function($s, $x)<sn:s> { $x > 0 ? $f([$s, $s], $x-1) : $s};  $f('a', 2)  )'
]]></output>
                </test-case>
                <test-case id="0-2466" name="token-conversion.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.token-conversion.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="537217183" result="Passed" start-time="2024-02-19T13:49:42.2453503Z" end-time="2024-02-19T13:49:42.2454478Z" duration="0.000098" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.'7a'';&#xA; result: 33" />
                  </properties>
                  <output><![CDATA[Expr is '$.'7a''
Result: '33'
Expected: '33'
]]></output>
                </test-case>
                <test-case id="0-2467" name="token-conversion.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.token-conversion.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="998118520" result="Passed" start-time="2024-02-19T13:49:42.2454552Z" end-time="2024-02-19T13:49:42.2455215Z" duration="0.000066" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.'7'';&#xA; result: 88" />
                  </properties>
                  <output><![CDATA[Expr is '$.'7''
Result: '88'
Expected: '88'
]]></output>
                </test-case>
                <test-case id="0-2468" name="token-conversion.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.token-conversion.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="958918613" result="Passed" start-time="2024-02-19T13:49:42.2455279Z" end-time="2024-02-19T13:49:42.2460047Z" duration="0.000477" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$.7a';&#xA; result: error S0201" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0201.
Actually thrown S0201.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$.7a'
]]></output>
                </test-case>
                <test-case id="0-2469" name="token-conversion.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.token-conversion.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="546741642" result="Passed" start-time="2024-02-19T13:49:42.2460184Z" end-time="2024-02-19T13:49:42.2464434Z" duration="0.000425" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$.7';&#xA; result: error S0213" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0213.
Actually thrown S0213.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$.7'
]]></output>
                </test-case>
                <test-case id="0-2470" name="transform.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="101934515" result="Passed" start-time="2024-02-19T13:49:42.2464538Z" end-time="2024-02-19T13:49:42.2467498Z" duration="0.000296" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '{'Order': Account.Order.{  'ID': OrderID,  'Product': Product.{    'SKU': ProductID,    'Details': {      'Weight': Description.Weight,      'Dimensions': Description.(Width &amp; ' x ' &amp; Height &amp; ' x ' &amp; Depth)    }  },  'Total Price': $sum(Product.(Price * Quantity))}}';&#xA; result: {&quot;Order&quot;:[{&quot;ID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;SKU&quot;:858383,&quot;Details&quot;:{&quot;Weight&quot;:0.75,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}},{&quot;SKU&quot;:858236,&quot;Details&quot;:{&quot;Weight&quot;:0.6,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}}],&quot;Total Price&quot;:90.57000000000001},{&quot;ID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;SKU&quot;:858383,&quot;Details&quot;:{&quot;Weight&quot;:0.75,&quot;Dimensions&quot;:&quot;300 x 200 x 210&quot;}},{&quot;SKU&quot;:345664,&quot;Details&quot;:{&quot;Weight&quot;:2,&quot;Dimensions&quot;:&quot;30 x 20 x 210&quot;}}],&quot;Total Price&quot;:245.79000000000002}]}" />
                  </properties>
                  <output><![CDATA[Expr is '{'Order': Account.Order.{  'ID': OrderID,  'Product': Product.{    'SKU': ProductID,    'Details': {      'Weight': Description.Weight,      'Dimensions': Description.(Width & ' x ' & Height & ' x ' & Depth)    }  },  'Total Price': $sum(Product.(Price * Quantity))}}'
Result: '{"Order":[{"ID":"order103","Product":[{"SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"SKU":858236,"Details":{"Weight":0.6,"Dimensions":"300 x 200 x 210"}}],"Total Price":90.57},{"ID":"order104","Product":[{"SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"SKU":345664,"Details":{"Weight":2,"Dimensions":"30 x 20 x 210"}}],"Total Price":245.79}]}'
Expected: '{"Order":[{"ID":"order103","Product":[{"SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"SKU":858236,"Details":{"Weight":0.6,"Dimensions":"300 x 200 x 210"}}],"Total Price":90.57000000000001},{"ID":"order104","Product":[{"SKU":858383,"Details":{"Weight":0.75,"Dimensions":"300 x 200 x 210"}},{"SKU":345664,"Details":{"Weight":2,"Dimensions":"30 x 20 x 210"}}],"Total Price":245.79000000000002}]}'
]]></output>
                </test-case>
                <test-case id="0-2471" name="transform.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="914979693" result="Passed" start-time="2024-02-19T13:49:42.2467581Z" end-time="2024-02-19T13:49:42.2469930Z" duration="0.000235" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&#xA;        (&#xA;          $tempReadings := $count(state.tempReadings) = 5 ?&#xA;              [state.tempReadings[[1..4]], event.t] :&#xA;              [state.tempReadings, event.t];&#xA;        &#xA;          {&#xA;            &quot;tempReadings&quot;: $tempReadings,&#xA;            &quot;sumTemperatures&quot;: $sum($tempReadings),&#xA;            &quot;avgTemperature&quot;: $average($tempReadings) ~&gt; $round(2),&#xA;            &quot;maxTemperature&quot;: $max($tempReadings),&#xA;            &quot;minTemperature&quot;: $min($tempReadings)&#xA;          }&#xA;        )';&#xA; result: {&quot;tempReadings&quot;:[28.9,28,28.2,28.4,28.4],&quot;sumTemperatures&quot;:141.9,&quot;avgTemperature&quot;:28.38,&quot;maxTemperature&quot;:28.9,&quot;minTemperature&quot;:28}" />
                  </properties>
                  <output><![CDATA[Expr is '
        (
          $tempReadings := $count(state.tempReadings) = 5 ?
              [state.tempReadings[[1..4]], event.t] :
              [state.tempReadings, event.t];
        
          {
            "tempReadings": $tempReadings,
            "sumTemperatures": $sum($tempReadings),
            "avgTemperature": $average($tempReadings) ~> $round(2),
            "maxTemperature": $max($tempReadings),
            "minTemperature": $min($tempReadings)
          }
        )'
Result: '{"tempReadings":[28.9,28,28.2,28.4,28.4],"sumTemperatures":141.9,"avgTemperature":28.38,"maxTemperature":28.9,"minTemperature":28}'
Expected: '{"tempReadings":[28.9,28,28.2,28.4,28.4],"sumTemperatures":141.9,"avgTemperature":28.38,"maxTemperature":28.9,"minTemperature":28}'
]]></output>
                </test-case>
                <test-case id="0-2472" name="transform.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="705054911" result="Passed" start-time="2024-02-19T13:49:42.2470008Z" end-time="2024-02-19T13:49:42.2526745Z" duration="0.005674" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: {&quot;output&quot;:{&quot;is&quot;:{&quot;same&quot;:{&quot;as&quot;:&quot;input&quot;}}}}" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: '{"output":{"is":{"same":{"as":"input"}}}}'
Expected: '{"output":{"is":{"same":{"as":"input"}}}}'
]]></output>
                </test-case>
                <test-case id="0-2473" name="transform.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1564509033" result="Passed" start-time="2024-02-19T13:49:42.2526965Z" end-time="2024-02-19T13:49:42.2527713Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo';&#xA; result: {&quot;bar&quot;:42}" />
                  </properties>
                  <output><![CDATA[Expr is 'foo'
Result: '{"bar":42}'
Expected: '{"bar":42}'
]]></output>
                </test-case>
                <test-case id="0-2474" name="transform.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="538156008" result="Passed" start-time="2024-02-19T13:49:42.2527774Z" end-time="2024-02-19T13:49:42.2528291Z" duration="0.000052" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'baz';&#xA; result: {&quot;gar&quot;:50}" />
                  </properties>
                  <output><![CDATA[Expr is 'baz'
Result: '{"gar":50}'
Expected: '{"gar":50}'
]]></output>
                </test-case>
                <test-case id="0-2475" name="transform.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1043008756" result="Passed" start-time="2024-02-19T13:49:42.2528347Z" end-time="2024-02-19T13:49:42.2528848Z" duration="0.000050" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Foo';&#xA; result: {&quot;mama&quot;:45}" />
                  </properties>
                  <output><![CDATA[Expr is 'Foo'
Result: '{"mama":45}'
Expected: '{"mama":45}'
]]></output>
                </test-case>
                <test-case id="0-2476" name="transform.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="166957220" result="Passed" start-time="2024-02-19T13:49:42.2528902Z" end-time="2024-02-19T13:49:42.2529395Z" duration="0.000049" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'food';&#xA; result: {&quot;wa&quot;:&quot;hume&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is 'food'
Result: '{"wa":"hume"}'
Expected: '{"wa":"hume"}'
]]></output>
                </test-case>
                <test-case id="0-2477" name="transform.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="8508116" result="Passed" start-time="2024-02-19T13:49:42.2529448Z" end-time="2024-02-19T13:49:42.2530091Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'maz.rar';&#xA; result: 42" />
                  </properties>
                  <output><![CDATA[Expr is 'maz.rar'
Result: '42'
Expected: '42'
]]></output>
                </test-case>
                <test-case id="0-2478" name="transform.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1618209472" result="Passed" start-time="2024-02-19T13:49:42.2530174Z" end-time="2024-02-19T13:49:42.2530980Z" duration="0.000081" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'jee.par.waa';&#xA; result: {&quot;bar&quot;:87}" />
                  </properties>
                  <output><![CDATA[Expr is 'jee.par.waa'
Result: '{"bar":87}'
Expected: '{"bar":87}'
]]></output>
                </test-case>
                <test-case id="0-2479" name="transform.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="996862292" result="Passed" start-time="2024-02-19T13:49:42.2531075Z" end-time="2024-02-19T13:49:42.2531720Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'foo'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2480" name="transform.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="781081832" result="Passed" start-time="2024-02-19T13:49:42.2531784Z" end-time="2024-02-19T13:49:42.2532247Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.bar';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.bar'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2481" name="transform.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1424206228" result="Passed" start-time="2024-02-19T13:49:42.2532298Z" end-time="2024-02-19T13:49:42.2532709Z" duration="0.000041" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: &quot;foo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: '"foo"'
Expected: '"foo"'
]]></output>
                </test-case>
                <test-case id="0-2482" name="transform.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1404433670" result="Passed" start-time="2024-02-19T13:49:42.2532755Z" end-time="2024-02-19T13:49:42.2533301Z" duration="0.000055" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar';&#xA; result: &quot;foo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'bar'
Result: '"foo"'
Expected: '"foo"'
]]></output>
                </test-case>
                <test-case id="0-2483" name="transform.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="420610420" result="Passed" start-time="2024-02-19T13:49:42.2533362Z" end-time="2024-02-19T13:49:42.2533839Z" duration="0.000048" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: 6754322" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: '6754322'
Expected: '6754322'
]]></output>
                </test-case>
                <test-case id="0-2484" name="transform.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1246894312" result="Passed" start-time="2024-02-19T13:49:42.2533916Z" end-time="2024-02-19T13:49:42.2534426Z" duration="0.000051" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: 0" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: '0'
Expected: '0'
]]></output>
                </test-case>
                <test-case id="0-2485" name="transform.case015" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case015" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="775415549" result="Passed" start-time="2024-02-19T13:49:42.2534485Z" end-time="2024-02-19T13:49:42.2535120Z" duration="0.000064" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: -24" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: '-24'
Expected: '-24'
]]></output>
                </test-case>
                <test-case id="0-2486" name="transform.case016" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case016" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2050474423" result="Passed" start-time="2024-02-19T13:49:42.2535194Z" end-time="2024-02-19T13:49:42.2535994Z" duration="0.000080" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar';&#xA; result: 6.54" />
                  </properties>
                  <output><![CDATA[Expr is 'bar'
Result: '6.54'
Expected: '6.54'
]]></output>
                </test-case>
                <test-case id="0-2487" name="transform.case017" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case017" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1103055201" result="Passed" start-time="2024-02-19T13:49:42.2536066Z" end-time="2024-02-19T13:49:42.2536533Z" duration="0.000047" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: true" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: 'true'
Expected: 'true'
]]></output>
                </test-case>
                <test-case id="0-2488" name="transform.case018" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case018" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="298532468" result="Passed" start-time="2024-02-19T13:49:42.2536584Z" end-time="2024-02-19T13:49:42.2537009Z" duration="0.000043" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar';&#xA; result: false" />
                  </properties>
                  <output><![CDATA[Expr is 'bar'
Result: 'false'
Expected: 'false'
]]></output>
                </test-case>
                <test-case id="0-2489" name="transform.case019" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case019" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="990524329" result="Passed" start-time="2024-02-19T13:49:42.2537060Z" end-time="2024-02-19T13:49:42.2537455Z" duration="0.000040" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: null" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: 'null'
Expected: 'null'
]]></output>
                </test-case>
                <test-case id="0-2490" name="transform.case020" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case020" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="136555886" result="Passed" start-time="2024-02-19T13:49:42.2537501Z" end-time="2024-02-19T13:49:42.2537904Z" duration="0.000040" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar';&#xA; result: null" />
                  </properties>
                  <output><![CDATA[Expr is 'bar'
Result: 'null'
Expected: 'null'
]]></output>
                </test-case>
                <test-case id="0-2491" name="transform.case021" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case021" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="843401254" result="Passed" start-time="2024-02-19T13:49:42.2537952Z" end-time="2024-02-19T13:49:42.2538338Z" duration="0.000039" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'bar'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2492" name="transform.case022" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case022" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="422705292" result="Passed" start-time="2024-02-19T13:49:42.2538383Z" end-time="2024-02-19T13:49:42.2538760Z" duration="0.000038" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2493" name="transform.case023" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case023" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1600694670" result="Passed" start-time="2024-02-19T13:49:42.2538805Z" end-time="2024-02-19T13:49:42.2539222Z" duration="0.000042" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar';&#xA; result: &quot;\&quot;Hello\&quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'bar'
Result: '"\"Hello\""'
Expected: '"\"Hello\""'
]]></output>
                </test-case>
                <test-case id="0-2494" name="transform.case024" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case024" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2078550320" result="Passed" start-time="2024-02-19T13:49:42.2539270Z" end-time="2024-02-19T13:49:42.2539659Z" duration="0.000039" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: &quot;\&quot;Hello\&quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: '"\"Hello\""'
Expected: '"\"Hello\""'
]]></output>
                </test-case>
                <test-case id="0-2495" name="transform.case025" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case025" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="380563441" result="Passed" start-time="2024-02-19T13:49:42.2539707Z" end-time="2024-02-19T13:49:42.2541178Z" duration="0.000147" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'bar';&#xA; result: &quot;'Hello'&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'bar'
Result: '"'Hello'"'
Expected: '"'Hello'"'
]]></output>
                </test-case>
                <test-case id="0-2496" name="transform.case026" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case026" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="222926360" result="Passed" start-time="2024-02-19T13:49:42.2541261Z" end-time="2024-02-19T13:49:42.2541699Z" duration="0.000044" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$';&#xA; result: &quot;'Hello'&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$'
Result: '"'Hello'"'
Expected: '"'Hello'"'
]]></output>
                </test-case>
                <test-case id="0-2497" name="transform.case027" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case027" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="242836339" result="Passed" start-time="2024-02-19T13:49:42.2541746Z" end-time="2024-02-19T13:49:42.2542352Z" duration="0.000061" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(Salutation)';&#xA; result: &quot;mr&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lowercase(Salutation)'
Result: '"mr"'
Expected: '"mr"'
]]></output>
                </test-case>
                <test-case id="0-2498" name="transform.case028" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case028" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="149939170" result="Passed" start-time="2024-02-19T13:49:42.2542406Z" end-time="2024-02-19T13:49:42.2542941Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(敷)';&#xA; result: &quot;steve&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lowercase(敷)'
Result: '"steve"'
Expected: '"steve"'
]]></output>
                </test-case>
                <test-case id="0-2499" name="transform.case029" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case029" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1337142579" result="Passed" start-time="2024-02-19T13:49:42.2542996Z" end-time="2024-02-19T13:49:42.2544306Z" duration="0.000131" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(Español)';&#xA; result: &quot;/ˈspænɪʃ/&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lowercase(Español)'
Result: '"/ˈspænɪʃ/"'
Expected: '"/ˈspænɪʃ/"'
]]></output>
                </test-case>
                <test-case id="0-2500" name="transform.case030" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case030" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="138986716" result="Passed" start-time="2024-02-19T13:49:42.2544382Z" end-time="2024-02-19T13:49:42.2544984Z" duration="0.000060" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lowercase($.&quot;NI.Number&quot;)';&#xA; result: &quot;no10furbzness&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lowercase($."NI.Number")'
Result: '"no10furbzness"'
Expected: '"no10furbzness"'
]]></output>
                </test-case>
                <test-case id="0-2501" name="transform.case031" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case031" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1740716861" result="Passed" start-time="2024-02-19T13:49:42.2545031Z" end-time="2024-02-19T13:49:42.2545551Z" duration="0.000052" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(&quot;COMPENSATION IS : &quot; &amp; Employment.&quot;Executive.Compensation&quot;)';&#xA; result: &quot;compensation is : 1400000&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lowercase("COMPENSATION IS : " & Employment."Executive.Compensation")'
Result: '"compensation is : 1400000"'
Expected: '"compensation is : 1400000"'
]]></output>
                </test-case>
                <test-case id="0-2502" name="transform.case032" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case032" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="776791689" result="Passed" start-time="2024-02-19T13:49:42.2545596Z" end-time="2024-02-19T13:49:42.2545981Z" duration="0.000039" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '&quot;Hello&quot;';&#xA; result: &quot;Hello&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '"Hello"'
Result: '"Hello"'
Expected: '"Hello"'
]]></output>
                </test-case>
                <test-case id="0-2503" name="transform.case033" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case033" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1152962261" result="Passed" start-time="2024-02-19T13:49:42.2546022Z" end-time="2024-02-19T13:49:42.2546466Z" duration="0.000044" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Salutation)';&#xA; result: &quot;MR&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase(Salutation)'
Result: '"MR"'
Expected: '"MR"'
]]></output>
                </test-case>
                <test-case id="0-2504" name="transform.case034" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case034" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1283692670" result="Passed" start-time="2024-02-19T13:49:42.2546510Z" end-time="2024-02-19T13:49:42.2546933Z" duration="0.000042" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(&quot;Hello World&quot;)';&#xA; result: &quot;HELLO WORLD&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase("Hello World")'
Result: '"HELLO WORLD"'
Expected: '"HELLO WORLD"'
]]></output>
                </test-case>
                <test-case id="0-2505" name="transform.case035" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case035" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="824121249" result="Passed" start-time="2024-02-19T13:49:42.2546986Z" end-time="2024-02-19T13:49:42.2547412Z" duration="0.000043" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(&quot;鯵噂ソ竹&quot;)';&#xA; result: &quot;鯵噂ソ竹&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase("鯵噂ソ竹")'
Result: '"鯵噂ソ竹"'
Expected: '"鯵噂ソ竹"'
]]></output>
                </test-case>
                <test-case id="0-2506" name="transform.case036" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case036" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="658104404" result="Passed" start-time="2024-02-19T13:49:42.2547481Z" end-time="2024-02-19T13:49:42.2548068Z" duration="0.000059" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Employment.Name &amp; &quot; is happy&quot;';&#xA; result: &quot;IBM UK is happy&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Employment.Name & " is happy"'
Result: '"IBM UK is happy"'
Expected: '"IBM UK is happy"'
]]></output>
                </test-case>
                <test-case id="0-2507" name="transform.case037" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case037" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="962589066" result="Passed" start-time="2024-02-19T13:49:42.2548139Z" end-time="2024-02-19T13:49:42.2548860Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Employment.Name &amp; &quot; is pleased to employ &quot; &amp; Salutation &amp; &quot; &quot; &amp; Surname';&#xA; result: &quot;IBM UK is pleased to employ Mr Smith&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Employment.Name & " is pleased to employ " & Salutation & " " & Surname'
Result: '"IBM UK is pleased to employ Mr Smith"'
Expected: '"IBM UK is pleased to employ Mr Smith"'
]]></output>
                </test-case>
                <test-case id="0-2508" name="transform.case038" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case038" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1495533635" result="Passed" start-time="2024-02-19T13:49:42.2548938Z" end-time="2024-02-19T13:49:42.2550205Z" duration="0.000127" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(&quot;Hello &quot; &amp; Salutation &amp; &quot; &quot; &amp; Surname)';&#xA; result: &quot;HELLO MR SMITH&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase("Hello " & Salutation & " " & Surname)'
Result: '"HELLO MR SMITH"'
Expected: '"HELLO MR SMITH"'
]]></output>
                </test-case>
                <test-case id="0-2509" name="transform.case039" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case039" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="460898284" result="Passed" start-time="2024-02-19T13:49:42.2550288Z" end-time="2024-02-19T13:49:42.2551114Z" duration="0.000083" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Salutation &amp; &quot; &quot; &amp; Surname &amp; &quot; - has &quot; &amp; Cars &amp; &quot; registered cars&quot;)';&#xA; result: &quot;MR SMITH - HAS 3 REGISTERED CARS&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase(Salutation & " " & Surname & " - has " & Cars & " registered cars")'
Result: '"MR SMITH - HAS 3 REGISTERED CARS"'
Expected: '"MR SMITH - HAS 3 REGISTERED CARS"'
]]></output>
                </test-case>
                <test-case id="0-2510" name="transform.case040" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case040" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1506534990" result="Passed" start-time="2024-02-19T13:49:42.2551203Z" end-time="2024-02-19T13:49:42.2551843Z" duration="0.000064" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Employment.ContractType)';&#xA; result: &quot;PERMANENT&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase(Employment.ContractType)'
Result: '"PERMANENT"'
Expected: '"PERMANENT"'
]]></output>
                </test-case>
                <test-case id="0-2511" name="transform.case041" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case041" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="666553724" result="Passed" start-time="2024-02-19T13:49:42.2551899Z" end-time="2024-02-19T13:49:42.2552545Z" duration="0.000065" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Hola&quot;, &quot;l&quot;)';&#xA; result: &quot;Ho&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("Hola", "l")'
Result: '"Ho"'
Expected: '"Ho"'
]]></output>
                </test-case>
                <test-case id="0-2512" name="transform.case042" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case042" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="186553751" result="Passed" start-time="2024-02-19T13:49:42.2552600Z" end-time="2024-02-19T13:49:42.2553156Z" duration="0.000056" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Hola&quot;, 'l')';&#xA; result: &quot;Ho&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("Hola", 'l')'
Result: '"Ho"'
Expected: '"Ho"'
]]></output>
                </test-case>
                <test-case id="0-2513" name="transform.case043" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case043" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1956751116" result="Passed" start-time="2024-02-19T13:49:42.2553207Z" end-time="2024-02-19T13:49:42.2553774Z" duration="0.000057" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Hola&quot;, &quot;Q&quot;)';&#xA; result: &quot;Hola&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("Hola", "Q")'
Result: '"Hola"'
Expected: '"Hola"'
]]></output>
                </test-case>
                <test-case id="0-2514" name="transform.case044" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case044" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="491455183" result="Passed" start-time="2024-02-19T13:49:42.2553863Z" end-time="2024-02-19T13:49:42.2554402Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Hola&quot;, &quot;&quot;)';&#xA; result: &quot;&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("Hola", "")'
Result: '""'
Expected: '""'
]]></output>
                </test-case>
                <test-case id="0-2515" name="transform.case045" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case045" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="815491883" result="Passed" start-time="2024-02-19T13:49:42.2554452Z" end-time="2024-02-19T13:49:42.2555126Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;鯵噂ソ竹&quot;, &quot;ソ&quot;)';&#xA; result: &quot;鯵噂&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringBefore("鯵噂ソ竹", "ソ")'
Result: '"鯵噂"'
Expected: '"鯵噂"'
]]></output>
                </test-case>
                <test-case id="0-2516" name="transform.case046" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case046" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="276106774" result="Passed" start-time="2024-02-19T13:49:42.2555184Z" end-time="2024-02-19T13:49:42.2555760Z" duration="0.000058" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;Coca&quot; &amp; &quot;Cola&quot;, &quot;ca&quot;)';&#xA; result: &quot;Cola&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter("Coca" & "Cola", "ca")'
Result: '"Cola"'
Expected: '"Cola"'
]]></output>
                </test-case>
                <test-case id="0-2517" name="transform.case047" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case047" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1307639273" result="Passed" start-time="2024-02-19T13:49:42.2555811Z" end-time="2024-02-19T13:49:42.2556443Z" duration="0.000063" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(Salutation &amp; &quot; &quot; &amp; MiddleName &amp;&quot; &quot; &amp; Surname, MiddleName)';&#xA; result: &quot; Smith&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter(Salutation & " " & MiddleName &" " & Surname, MiddleName)'
Result: '" Smith"'
Expected: '" Smith"'
]]></output>
                </test-case>
                <test-case id="0-2518" name="transform.case048" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case048" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2103533711" result="Passed" start-time="2024-02-19T13:49:42.2556499Z" end-time="2024-02-19T13:49:42.2557214Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(Salutation &amp; &quot; &quot; &amp; Employment.Role, Salutation)';&#xA; result: &quot; Senior Physician&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter(Salutation & " " & Employment.Role, Salutation)'
Result: '" Senior Physician"'
Expected: '" Senior Physician"'
]]></output>
                </test-case>
                <test-case id="0-2519" name="transform.case049" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case049" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1015663353" result="Passed" start-time="2024-02-19T13:49:42.2557297Z" end-time="2024-02-19T13:49:42.2558151Z" duration="0.000085" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;Hola&quot;, 'l')';&#xA; result: &quot;a&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter("Hola", 'l')'
Result: '"a"'
Expected: '"a"'
]]></output>
                </test-case>
                <test-case id="0-2520" name="transform.case050" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case050" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="172716784" result="Passed" start-time="2024-02-19T13:49:42.2558223Z" end-time="2024-02-19T13:49:42.2559034Z" duration="0.000081" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;Hola&quot;, &quot;Q&quot;)';&#xA; result: &quot;Hola&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substringAfter("Hola", "Q")'
Result: '"Hola"'
Expected: '"Hola"'
]]></output>
                </test-case>
                <test-case id="0-2521" name="transform.case051" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case051" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1581645629" result="Passed" start-time="2024-02-19T13:49:42.2559189Z" end-time="2024-02-19T13:49:42.2559861Z" duration="0.000067" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(Employment.Role) &amp; &quot; (&quot; &amp; Employment.Role &amp; &quot;)&quot;';&#xA; result: &quot;senior physician (Senior Physician)&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$lowercase(Employment.Role) & " (" & Employment.Role & ")"'
Result: '"senior physician (Senior Physician)"'
Expected: '"senior physician (Senior Physician)"'
]]></output>
                </test-case>
                <test-case id="0-2522" name="transform.case052" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case052" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="699586052" result="Passed" start-time="2024-02-19T13:49:42.2559908Z" end-time="2024-02-19T13:49:42.2560518Z" duration="0.000061" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Employment.Years &amp; &quot; years of employment&quot;';&#xA; result: &quot;12 years of employment&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'Employment.Years & " years of employment"'
Result: '"12 years of employment"'
Expected: '"12 years of employment"'
]]></output>
                </test-case>
                <test-case id="0-2523" name="transform.case053" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case053" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2115877931" result="Passed" start-time="2024-02-19T13:49:42.2560594Z" end-time="2024-02-19T13:49:42.2561320Z" duration="0.000073" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Salutation &amp; &quot; &quot; &amp; Surname &amp; &quot; - has &quot; &amp; Employment.Years &amp; &quot; years of employment&quot;)';&#xA; result: &quot;MR SMITH - HAS 12 YEARS OF EMPLOYMENT&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase(Salutation & " " & Surname & " - has " & Employment.Years & " years of employment")'
Result: '"MR SMITH - HAS 12 YEARS OF EMPLOYMENT"'
Expected: '"MR SMITH - HAS 12 YEARS OF EMPLOYMENT"'
]]></output>
                </test-case>
                <test-case id="0-2524" name="transform.case054" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case054" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="410185756" result="Passed" start-time="2024-02-19T13:49:42.2561379Z" end-time="2024-02-19T13:49:42.2562094Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(Employment.Role, 7,4)';&#xA; result: &quot;Phys&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring(Employment.Role, 7,4)'
Result: '"Phys"'
Expected: '"Phys"'
]]></output>
                </test-case>
                <test-case id="0-2525" name="transform.case055" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case055" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1406016908" result="Passed" start-time="2024-02-19T13:49:42.2562167Z" end-time="2024-02-19T13:49:42.2563002Z" duration="0.000084" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(Employment.Role, -4,4)';&#xA; result: &quot;cian&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring(Employment.Role, -4,4)'
Result: '"cian"'
Expected: '"cian"'
]]></output>
                </test-case>
                <test-case id="0-2526" name="transform.case056" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case056" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="492274401" result="Passed" start-time="2024-02-19T13:49:42.2563069Z" end-time="2024-02-19T13:49:42.2563593Z" duration="0.000053" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;Hello World&quot;,Cars,5)';&#xA; result: &quot;lo Wo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("Hello World",Cars,5)'
Result: '"lo Wo"'
Expected: '"lo Wo"'
]]></output>
                </test-case>
                <test-case id="0-2527" name="transform.case057" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case057" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1251843888" result="Passed" start-time="2024-02-19T13:49:42.2563641Z" end-time="2024-02-19T13:49:42.2568715Z" duration="0.000508" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(&quot;Missing close brackets&quot;';&#xA; result: error S0203" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0203.
Actually thrown S0203.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$lowercase("Missing close brackets"'
]]></output>
                </test-case>
                <test-case id="0-2528" name="transform.case058" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case058" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1633442360" result="Passed" start-time="2024-02-19T13:49:42.2568797Z" end-time="2024-02-19T13:49:42.2572251Z" duration="0.000345" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$unknown(Salutation)';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$unknown(Salutation)'
]]></output>
                </test-case>
                <test-case id="0-2529" name="transform.case059" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case059" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="157592567" result="Passed" start-time="2024-02-19T13:49:42.2572334Z" end-time="2024-02-19T13:49:42.2575633Z" duration="0.000330" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$decrypt(Salutation)';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$decrypt(Salutation)'
]]></output>
                </test-case>
                <test-case id="0-2530" name="transform.case060" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case060" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="820082396" result="Passed" start-time="2024-02-19T13:49:42.2575712Z" end-time="2024-02-19T13:49:42.2578747Z" duration="0.000304" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Employment.authentication(Salutation)';&#xA; result: error T1006" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T1006.
Actually thrown T1006.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Employment.authentication(Salutation)'
]]></output>
                </test-case>
                <test-case id="0-2531" name="transform.case061" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case061" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2071604528" result="Passed" start-time="2024-02-19T13:49:42.2578824Z" end-time="2024-02-19T13:49:42.2579395Z" duration="0.000057" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Invalid)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase(Invalid)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2532" name="transform.case062" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case062" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2006052593" result="Passed" start-time="2024-02-19T13:49:42.2579444Z" end-time="2024-02-19T13:49:42.2579894Z" duration="0.000045" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Employment.Invalid)';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '$uppercase(Employment.Invalid)'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2533" name="transform.case063" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case063" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="281066893" result="Passed" start-time="2024-02-19T13:49:42.2579938Z" end-time="2024-02-19T13:49:42.2583197Z" duration="0.000326" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(&quot;Coca&quot;, &quot;Cola&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$lowercase("Coca", "Cola")'
]]></output>
                </test-case>
                <test-case id="0-2534" name="transform.case064" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case064" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="857875576" result="Passed" start-time="2024-02-19T13:49:42.2583276Z" end-time="2024-02-19T13:49:42.2586177Z" duration="0.000290" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(Salary)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$lowercase(Salary)'
]]></output>
                </test-case>
                <test-case id="0-2535" name="transform.case065" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case065" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1187848618" result="Passed" start-time="2024-02-19T13:49:42.2586251Z" end-time="2024-02-19T13:49:42.2698901Z" duration="0.011265" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(20)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$lowercase(20)'
]]></output>
                </test-case>
                <test-case id="0-2536" name="transform.case066" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case066" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="647414539" result="Passed" start-time="2024-02-19T13:49:42.2699063Z" end-time="2024-02-19T13:49:42.2704215Z" duration="0.000515" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(20.55)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$lowercase(20.55)'
]]></output>
                </test-case>
                <test-case id="0-2537" name="transform.case067" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case067" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="251471409" result="Passed" start-time="2024-02-19T13:49:42.2704329Z" end-time="2024-02-19T13:49:42.2708274Z" duration="0.000395" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(Employment)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$lowercase(Employment)'
]]></output>
                </test-case>
                <test-case id="0-2538" name="transform.case068" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case068" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1284401397" result="Passed" start-time="2024-02-19T13:49:42.2708360Z" end-time="2024-02-19T13:49:42.2711604Z" duration="0.000325" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$lowercase(Qualifications)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$lowercase(Qualifications)'
]]></output>
                </test-case>
                <test-case id="0-2539" name="transform.case069" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case069" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="422773063" result="Passed" start-time="2024-02-19T13:49:42.2711807Z" end-time="2024-02-19T13:49:42.2715998Z" duration="0.000419" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(&quot;Coca&quot;, &quot;Cola&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$uppercase("Coca", "Cola")'
]]></output>
                </test-case>
                <test-case id="0-2540" name="transform.case070" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case070" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="117311145" result="Passed" start-time="2024-02-19T13:49:42.2716109Z" end-time="2024-02-19T13:49:42.2719577Z" duration="0.000347" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Salary)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$uppercase(Salary)'
]]></output>
                </test-case>
                <test-case id="0-2541" name="transform.case071" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case071" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1087885357" result="Passed" start-time="2024-02-19T13:49:42.2719658Z" end-time="2024-02-19T13:49:42.2723154Z" duration="0.000350" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(28)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$uppercase(28)'
]]></output>
                </test-case>
                <test-case id="0-2542" name="transform.case072" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case072" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1755005213" result="Passed" start-time="2024-02-19T13:49:42.2723258Z" end-time="2024-02-19T13:49:42.2727630Z" duration="0.000437" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(20.55)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$uppercase(20.55)'
]]></output>
                </test-case>
                <test-case id="0-2543" name="transform.case073" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case073" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1985117831" result="Passed" start-time="2024-02-19T13:49:42.2727737Z" end-time="2024-02-19T13:49:42.2731228Z" duration="0.000349" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Cars)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$uppercase(Cars)'
]]></output>
                </test-case>
                <test-case id="0-2544" name="transform.case074" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case074" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1631472986" result="Passed" start-time="2024-02-19T13:49:42.2731307Z" end-time="2024-02-19T13:49:42.2734849Z" duration="0.000354" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Employment)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$uppercase(Employment)'
]]></output>
                </test-case>
                <test-case id="0-2545" name="transform.case075" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case075" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1617485809" result="Passed" start-time="2024-02-19T13:49:42.2734938Z" end-time="2024-02-19T13:49:42.2738594Z" duration="0.000366" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$uppercase(Qualifications)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$uppercase(Qualifications)'
]]></output>
                </test-case>
                <test-case id="0-2546" name="transform.case076" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case076" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="656847503" result="Passed" start-time="2024-02-19T13:49:42.2738687Z" end-time="2024-02-19T13:49:42.2741552Z" duration="0.000287" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;Coca&quot; &amp; &quot;ca&quot;)';&#xA; result: error T0411" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0411.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringBefore("Coca" & "ca")'
]]></output>
                </test-case>
                <test-case id="0-2547" name="transform.case077" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case077" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="613437823" result="Passed" start-time="2024-02-19T13:49:42.2741628Z" end-time="2024-02-19T13:49:42.2744891Z" duration="0.000326" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(Salary,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringBefore(Salary,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2548" name="transform.case078" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case078" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1109239487" result="Passed" start-time="2024-02-19T13:49:42.2744971Z" end-time="2024-02-19T13:49:42.2748061Z" duration="0.000309" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(22,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringBefore(22,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2549" name="transform.case079" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case079" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1263058437" result="Passed" start-time="2024-02-19T13:49:42.2748140Z" end-time="2024-02-19T13:49:42.2751142Z" duration="0.000300" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(22.55,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringBefore(22.55,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2550" name="transform.case080" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case080" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="104456667" result="Passed" start-time="2024-02-19T13:49:42.2751220Z" end-time="2024-02-19T13:49:42.2754289Z" duration="0.000307" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;22&quot;,2)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringBefore("22",2)'
]]></output>
                </test-case>
                <test-case id="0-2551" name="transform.case081" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case081" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1062770734" result="Passed" start-time="2024-02-19T13:49:42.2754366Z" end-time="2024-02-19T13:49:42.2757203Z" duration="0.000284" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(&quot;22.55&quot;,5)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringBefore("22.55",5)'
]]></output>
                </test-case>
                <test-case id="0-2552" name="transform.case082" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case082" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="286786275" result="Passed" start-time="2024-02-19T13:49:42.2757278Z" end-time="2024-02-19T13:49:42.2760065Z" duration="0.000279" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(Employment,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringBefore(Employment,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2553" name="transform.case083" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case083" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1281759464" result="Passed" start-time="2024-02-19T13:49:42.2760140Z" end-time="2024-02-19T13:49:42.2763246Z" duration="0.000311" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringBefore(Qualifications,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringBefore(Qualifications,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2554" name="transform.case084" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case084" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1164425795" result="Passed" start-time="2024-02-19T13:49:42.2763321Z" end-time="2024-02-19T13:49:42.2766079Z" duration="0.000276" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;Coca&quot; &amp; &quot;ca&quot;)';&#xA; result: error T0411" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0411.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringAfter("Coca" & "ca")'
]]></output>
                </test-case>
                <test-case id="0-2555" name="transform.case085" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case085" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="704824734" result="Passed" start-time="2024-02-19T13:49:42.2766153Z" end-time="2024-02-19T13:49:42.2768894Z" duration="0.000274" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(Salary,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringAfter(Salary,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2556" name="transform.case086" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case086" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1041130809" result="Passed" start-time="2024-02-19T13:49:42.2768968Z" end-time="2024-02-19T13:49:42.2771704Z" duration="0.000274" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(22,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringAfter(22,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2557" name="transform.case087" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case087" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="808397405" result="Passed" start-time="2024-02-19T13:49:42.2771778Z" end-time="2024-02-19T13:49:42.2774517Z" duration="0.000274" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(22.55,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringAfter(22.55,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2558" name="transform.case088" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case088" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="742776505" result="Passed" start-time="2024-02-19T13:49:42.2774591Z" end-time="2024-02-19T13:49:42.2777331Z" duration="0.000274" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;22&quot;,2)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringAfter("22",2)'
]]></output>
                </test-case>
                <test-case id="0-2559" name="transform.case089" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case089" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2025159409" result="Passed" start-time="2024-02-19T13:49:42.2777405Z" end-time="2024-02-19T13:49:42.2780140Z" duration="0.000274" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(&quot;22.55&quot;,5)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringAfter("22.55",5)'
]]></output>
                </test-case>
                <test-case id="0-2560" name="transform.case090" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case090" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="331846848" result="Passed" start-time="2024-02-19T13:49:42.2780212Z" end-time="2024-02-19T13:49:42.2782904Z" duration="0.000269" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(Employment,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringAfter(Employment,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2561" name="transform.case091" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case091" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1553744163" result="Passed" start-time="2024-02-19T13:49:42.2782977Z" end-time="2024-02-19T13:49:42.2832904Z" duration="0.004993" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substringAfter(Qualifications,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substringAfter(Qualifications,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2562" name="transform.case092" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case092" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1476630353" result="Passed" start-time="2024-02-19T13:49:42.2833024Z" end-time="2024-02-19T13:49:42.2838682Z" duration="0.000566" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;Coca&quot; &amp; &quot;ca&quot;, 2, 4, 5)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring("Coca" & "ca", 2, 4, 5)'
]]></output>
                </test-case>
                <test-case id="0-2563" name="transform.case093" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case093" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1337941068" result="Passed" start-time="2024-02-19T13:49:42.2838797Z" end-time="2024-02-19T13:49:42.2843460Z" duration="0.000466" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;Coca&quot;, &quot;Mr&quot;, 4)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring("Coca", "Mr", 4)'
]]></output>
                </test-case>
                <test-case id="0-2564" name="transform.case094" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case094" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1788299535" result="Passed" start-time="2024-02-19T13:49:42.2843570Z" end-time="2024-02-19T13:49:42.2847663Z" duration="0.000409" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;Coca&quot;, 3, &quot;Whoops&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring("Coca", 3, "Whoops")'
]]></output>
                </test-case>
                <test-case id="0-2565" name="transform.case095" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case095" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1582414109" result="Passed" start-time="2024-02-19T13:49:42.2847751Z" end-time="2024-02-19T13:49:42.2850876Z" duration="0.000313" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring(Salary,2,4)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring(Salary,2,4)'
]]></output>
                </test-case>
                <test-case id="0-2566" name="transform.case096" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case096" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="807984778" result="Passed" start-time="2024-02-19T13:49:42.2850955Z" end-time="2024-02-19T13:49:42.2990458Z" duration="0.013951" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;Hello&quot;,&quot;World&quot;,5)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring("Hello","World",5)'
]]></output>
                </test-case>
                <test-case id="0-2567" name="transform.case097" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case097" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2052970505" result="Passed" start-time="2024-02-19T13:49:42.2990639Z" end-time="2024-02-19T13:49:42.2995356Z" duration="0.000472" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;Hello&quot;,5,&quot;World&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring("Hello",5,"World")'
]]></output>
                </test-case>
                <test-case id="0-2568" name="transform.case098" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case098" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1098875540" result="Passed" start-time="2024-02-19T13:49:42.2995456Z" end-time="2024-02-19T13:49:42.2996359Z" duration="0.000090" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$substring(&quot;Hello World&quot;,5.5,5)';&#xA; result: &quot; Worl&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '$substring("Hello World",5.5,5)'
Result: '" Worl"'
Expected: '" Worl"'
]]></output>
                </test-case>
                <test-case id="0-2569" name="transform.case099" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case099" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1451090212" result="Passed" start-time="2024-02-19T13:49:42.2996443Z" end-time="2024-02-19T13:49:42.3001958Z" duration="0.000552" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring(Employment,&quot;xx&quot;)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring(Employment,"xx")'
]]></output>
                </test-case>
                <test-case id="0-2570" name="transform.case100" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case100" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="168077344" result="Passed" start-time="2024-02-19T13:49:42.3002065Z" end-time="2024-02-19T13:49:42.3008145Z" duration="0.000608" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '$substring(Qualifications,6,5)';&#xA; result: error T0410" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T0410.
Actually thrown T0410.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '$substring(Qualifications,6,5)'
]]></output>
                </test-case>
                <test-case id="0-2571" name="transform.case101" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case101" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="24635365" result="Passed" start-time="2024-02-19T13:49:42.3008816Z" end-time="2024-02-19T13:49:42.3010195Z" duration="0.000138" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'detail.contents';&#xA; result: &quot;stuff&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'detail.contents'
Result: '"stuff"'
Expected: '"stuff"'
]]></output>
                </test-case>
                <test-case id="0-2572" name="transform.case102" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case102" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="23237876" result="Passed" start-time="2024-02-19T13:49:42.3010286Z" end-time="2024-02-19T13:49:42.3011527Z" duration="0.000124" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'detail.meta';&#xA; result: &quot;boo&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'detail.meta'
Result: '"boo"'
Expected: '"boo"'
]]></output>
                </test-case>
                <test-case id="0-2573" name="transform.case103" fullname="Jsonata.Net.Native.TestSuite.Tests.transform.case103" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1680760648" result="Passed" start-time="2024-02-19T13:49:42.3011774Z" end-time="2024-02-19T13:49:42.3012914Z" duration="0.000114" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'detail.meta';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is 'detail.meta'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-2574" name="transforms.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="898352208" result="Passed" start-time="2024-02-19T13:49:42.3013017Z" end-time="2024-02-19T13:49:42.3037890Z" duration="0.002487" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ ~&gt; |Account.Order.Product|{&quot;Total&quot;:Price*Quantity},[&quot;Description&quot;, &quot;SKU&quot;]|';&#xA; result: {&quot;Account&quot;:{&quot;Account Name&quot;:&quot;Firefly&quot;,&quot;Order&quot;:[{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;Price&quot;:34.45,&quot;Quantity&quot;:2,&quot;Total&quot;:68.9},{&quot;Product Name&quot;:&quot;Trilby hat&quot;,&quot;ProductID&quot;:858236,&quot;Price&quot;:21.67,&quot;Quantity&quot;:1,&quot;Total&quot;:21.67}]},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;Price&quot;:34.45,&quot;Quantity&quot;:4,&quot;Total&quot;:137.8},{&quot;ProductID&quot;:345664,&quot;Product Name&quot;:&quot;Cloak&quot;,&quot;Price&quot;:107.99,&quot;Quantity&quot;:1,&quot;Total&quot;:107.99}]}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '$ ~> |Account.Order.Product|{"Total":Price*Quantity},["Description", "SKU"]|'
Result: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"Price":34.45,"Quantity":2,"Total":68.9},{"Product Name":"Trilby hat","ProductID":858236,"Price":21.67,"Quantity":1,"Total":21.67}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"Price":34.45,"Quantity":4,"Total":137.8},{"ProductID":345664,"Product Name":"Cloak","Price":107.99,"Quantity":1,"Total":107.99}]}]}}'
Expected: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"Price":34.45,"Quantity":2,"Total":68.9},{"Product Name":"Trilby hat","ProductID":858236,"Price":21.67,"Quantity":1,"Total":21.67}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"Price":34.45,"Quantity":4,"Total":137.8},{"ProductID":345664,"Product Name":"Cloak","Price":107.99,"Quantity":1,"Total":107.99}]}]}}'
]]></output>
                </test-case>
                <test-case id="0-2575" name="transforms.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1232315074" result="Passed" start-time="2024-02-19T13:49:42.3038016Z" end-time="2024-02-19T13:49:42.3039489Z" duration="0.000147" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account.Order ~&gt; |Product|{&quot;Total&quot;:Price*Quantity},[&quot;Description&quot;, &quot;SKU&quot;]|';&#xA; result: [{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;Price&quot;:34.45,&quot;Quantity&quot;:2,&quot;Total&quot;:68.9},{&quot;Product Name&quot;:&quot;Trilby hat&quot;,&quot;ProductID&quot;:858236,&quot;Price&quot;:21.67,&quot;Quantity&quot;:1,&quot;Total&quot;:21.67}]},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;Price&quot;:34.45,&quot;Quantity&quot;:4,&quot;Total&quot;:137.8},{&quot;ProductID&quot;:345664,&quot;Product Name&quot;:&quot;Cloak&quot;,&quot;Price&quot;:107.99,&quot;Quantity&quot;:1,&quot;Total&quot;:107.99}]}]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account.Order ~> |Product|{"Total":Price*Quantity},["Description", "SKU"]|'
Result: '[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"Price":34.45,"Quantity":2,"Total":68.9},{"Product Name":"Trilby hat","ProductID":858236,"Price":21.67,"Quantity":1,"Total":21.67}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"Price":34.45,"Quantity":4,"Total":137.8},{"ProductID":345664,"Product Name":"Cloak","Price":107.99,"Quantity":1,"Total":107.99}]}]'
Expected: '[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"Price":34.45,"Quantity":2,"Total":68.9},{"Product Name":"Trilby hat","ProductID":858236,"Price":21.67,"Quantity":1,"Total":21.67}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"Price":34.45,"Quantity":4,"Total":137.8},{"ProductID":345664,"Product Name":"Cloak","Price":107.99,"Quantity":1,"Total":107.99}]}]'
]]></output>
                </test-case>
                <test-case id="0-2576" name="transforms.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1974124063" result="Passed" start-time="2024-02-19T13:49:42.3039561Z" end-time="2024-02-19T13:49:42.3041050Z" duration="0.000149" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ ~&gt; |Account.Order.Product|{&quot;Total&quot;:Price*Quantity, &quot;Price&quot;: Price * 1.2}|';&#xA; result: {&quot;Account&quot;:{&quot;Account Name&quot;:&quot;Firefly&quot;,&quot;Order&quot;:[{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;0406654608&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Purple&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.75},&quot;Price&quot;:41.34,&quot;Quantity&quot;:2,&quot;Total&quot;:68.9},{&quot;Product Name&quot;:&quot;Trilby hat&quot;,&quot;ProductID&quot;:858236,&quot;SKU&quot;:&quot;0406634348&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Orange&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.6},&quot;Price&quot;:26.004,&quot;Quantity&quot;:1,&quot;Total&quot;:21.67}]},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;040657863&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Purple&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.75},&quot;Price&quot;:41.34,&quot;Quantity&quot;:4,&quot;Total&quot;:137.8},{&quot;ProductID&quot;:345664,&quot;SKU&quot;:&quot;0406654603&quot;,&quot;Product Name&quot;:&quot;Cloak&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Black&quot;,&quot;Width&quot;:30,&quot;Height&quot;:20,&quot;Depth&quot;:210,&quot;Weight&quot;:2},&quot;Price&quot;:129.588,&quot;Quantity&quot;:1,&quot;Total&quot;:107.99}]}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '$ ~> |Account.Order.Product|{"Total":Price*Quantity, "Price": Price * 1.2}|'
Result: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":41.34,"Quantity":2,"Total":68.9},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Description":{"Colour":"Orange","Width":300,"Height":200,"Depth":210,"Weight":0.6},"Price":26.004,"Quantity":1,"Total":21.67}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":41.34,"Quantity":4,"Total":137.8},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Description":{"Colour":"Black","Width":30,"Height":20,"Depth":210,"Weight":2},"Price":129.588,"Quantity":1,"Total":107.99}]}]}}'
Expected: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":41.34,"Quantity":2,"Total":68.9},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Description":{"Colour":"Orange","Width":300,"Height":200,"Depth":210,"Weight":0.6},"Price":26.004,"Quantity":1,"Total":21.67}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":41.34,"Quantity":4,"Total":137.8},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Description":{"Colour":"Black","Width":30,"Height":20,"Depth":210,"Weight":2},"Price":129.588,"Quantity":1,"Total":107.99}]}]}}'
]]></output>
                </test-case>
                <test-case id="0-2577" name="transforms.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="861951868" result="Passed" start-time="2024-02-19T13:49:42.3041114Z" end-time="2024-02-19T13:49:42.3042147Z" duration="0.000103" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ ~&gt; |Account.Order.Product|{},&quot;Description&quot;|';&#xA; result: {&quot;Account&quot;:{&quot;Account Name&quot;:&quot;Firefly&quot;,&quot;Order&quot;:[{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;0406654608&quot;,&quot;Price&quot;:34.45,&quot;Quantity&quot;:2},{&quot;Product Name&quot;:&quot;Trilby hat&quot;,&quot;ProductID&quot;:858236,&quot;SKU&quot;:&quot;0406634348&quot;,&quot;Price&quot;:21.67,&quot;Quantity&quot;:1}]},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;040657863&quot;,&quot;Price&quot;:34.45,&quot;Quantity&quot;:4},{&quot;ProductID&quot;:345664,&quot;SKU&quot;:&quot;0406654603&quot;,&quot;Product Name&quot;:&quot;Cloak&quot;,&quot;Price&quot;:107.99,&quot;Quantity&quot;:1}]}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '$ ~> |Account.Order.Product|{},"Description"|'
Result: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Price":34.45,"Quantity":2},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Price":21.67,"Quantity":1}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Price":34.45,"Quantity":4},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Price":107.99,"Quantity":1}]}]}}'
Expected: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Price":34.45,"Quantity":2},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Price":21.67,"Quantity":1}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Price":34.45,"Quantity":4},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Price":107.99,"Quantity":1}]}]}}'
]]></output>
                </test-case>
                <test-case id="0-2578" name="transforms.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="484404945" result="Passed" start-time="2024-02-19T13:49:42.3042208Z" end-time="2024-02-19T13:49:42.3043170Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ ~&gt; |Account.Order.Product|nomatch,&quot;Description&quot;|';&#xA; result: {&quot;Account&quot;:{&quot;Account Name&quot;:&quot;Firefly&quot;,&quot;Order&quot;:[{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;0406654608&quot;,&quot;Price&quot;:34.45,&quot;Quantity&quot;:2},{&quot;Product Name&quot;:&quot;Trilby hat&quot;,&quot;ProductID&quot;:858236,&quot;SKU&quot;:&quot;0406634348&quot;,&quot;Price&quot;:21.67,&quot;Quantity&quot;:1}]},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;040657863&quot;,&quot;Price&quot;:34.45,&quot;Quantity&quot;:4},{&quot;ProductID&quot;:345664,&quot;SKU&quot;:&quot;0406654603&quot;,&quot;Product Name&quot;:&quot;Cloak&quot;,&quot;Price&quot;:107.99,&quot;Quantity&quot;:1}]}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '$ ~> |Account.Order.Product|nomatch,"Description"|'
Result: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Price":34.45,"Quantity":2},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Price":21.67,"Quantity":1}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Price":34.45,"Quantity":4},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Price":107.99,"Quantity":1}]}]}}'
Expected: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Price":34.45,"Quantity":2},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Price":21.67,"Quantity":1}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Price":34.45,"Quantity":4},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Price":107.99,"Quantity":1}]}]}}'
]]></output>
                </test-case>
                <test-case id="0-2579" name="transforms.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="940183594" result="Passed" start-time="2024-02-19T13:49:42.3043235Z" end-time="2024-02-19T13:49:42.3044618Z" duration="0.000138" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ ~&gt; |(Account.Order.Product)[0]|{&quot;Description&quot;:&quot;blah&quot;}|';&#xA; result: {&quot;Account&quot;:{&quot;Account Name&quot;:&quot;Firefly&quot;,&quot;Order&quot;:[{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;0406654608&quot;,&quot;Description&quot;:&quot;blah&quot;,&quot;Price&quot;:34.45,&quot;Quantity&quot;:2},{&quot;Product Name&quot;:&quot;Trilby hat&quot;,&quot;ProductID&quot;:858236,&quot;SKU&quot;:&quot;0406634348&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Orange&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.6},&quot;Price&quot;:21.67,&quot;Quantity&quot;:1}]},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;040657863&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Purple&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.75},&quot;Price&quot;:34.45,&quot;Quantity&quot;:4},{&quot;ProductID&quot;:345664,&quot;SKU&quot;:&quot;0406654603&quot;,&quot;Product Name&quot;:&quot;Cloak&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Black&quot;,&quot;Width&quot;:30,&quot;Height&quot;:20,&quot;Depth&quot;:210,&quot;Weight&quot;:2},&quot;Price&quot;:107.99,&quot;Quantity&quot;:1}]}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '$ ~> |(Account.Order.Product)[0]|{"Description":"blah"}|'
Result: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Description":"blah","Price":34.45,"Quantity":2},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Description":{"Colour":"Orange","Width":300,"Height":200,"Depth":210,"Weight":0.6},"Price":21.67,"Quantity":1}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":34.45,"Quantity":4},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Description":{"Colour":"Black","Width":30,"Height":20,"Depth":210,"Weight":2},"Price":107.99,"Quantity":1}]}]}}'
Expected: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Description":"blah","Price":34.45,"Quantity":2},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Description":{"Colour":"Orange","Width":300,"Height":200,"Depth":210,"Weight":0.6},"Price":21.67,"Quantity":1}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":34.45,"Quantity":4},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Description":{"Colour":"Black","Width":30,"Height":20,"Depth":210,"Weight":2},"Price":107.99,"Quantity":1}]}]}}'
]]></output>
                </test-case>
                <test-case id="0-2580" name="transforms.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="749169405" result="Passed" start-time="2024-02-19T13:49:42.3044704Z" end-time="2024-02-19T13:49:42.3045815Z" duration="0.000111" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ ~&gt; |foo.bar|{&quot;Description&quot;:&quot;blah&quot;}|';&#xA; result: {&quot;Account&quot;:{&quot;Account Name&quot;:&quot;Firefly&quot;,&quot;Order&quot;:[{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;0406654608&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Purple&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.75},&quot;Price&quot;:34.45,&quot;Quantity&quot;:2},{&quot;Product Name&quot;:&quot;Trilby hat&quot;,&quot;ProductID&quot;:858236,&quot;SKU&quot;:&quot;0406634348&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Orange&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.6},&quot;Price&quot;:21.67,&quot;Quantity&quot;:1}]},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:[{&quot;Product Name&quot;:&quot;Bowler Hat&quot;,&quot;ProductID&quot;:858383,&quot;SKU&quot;:&quot;040657863&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Purple&quot;,&quot;Width&quot;:300,&quot;Height&quot;:200,&quot;Depth&quot;:210,&quot;Weight&quot;:0.75},&quot;Price&quot;:34.45,&quot;Quantity&quot;:4},{&quot;ProductID&quot;:345664,&quot;SKU&quot;:&quot;0406654603&quot;,&quot;Product Name&quot;:&quot;Cloak&quot;,&quot;Description&quot;:{&quot;Colour&quot;:&quot;Black&quot;,&quot;Width&quot;:30,&quot;Height&quot;:20,&quot;Depth&quot;:210,&quot;Weight&quot;:2},&quot;Price&quot;:107.99,&quot;Quantity&quot;:1}]}]}}" />
                  </properties>
                  <output><![CDATA[Expr is '$ ~> |foo.bar|{"Description":"blah"}|'
Result: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":34.45,"Quantity":2},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Description":{"Colour":"Orange","Width":300,"Height":200,"Depth":210,"Weight":0.6},"Price":21.67,"Quantity":1}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":34.45,"Quantity":4},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Description":{"Colour":"Black","Width":30,"Height":20,"Depth":210,"Weight":2},"Price":107.99,"Quantity":1}]}]}}'
Expected: '{"Account":{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"0406654608","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":34.45,"Quantity":2},{"Product Name":"Trilby hat","ProductID":858236,"SKU":"0406634348","Description":{"Colour":"Orange","Width":300,"Height":200,"Depth":210,"Weight":0.6},"Price":21.67,"Quantity":1}]},{"OrderID":"order104","Product":[{"Product Name":"Bowler Hat","ProductID":858383,"SKU":"040657863","Description":{"Colour":"Purple","Width":300,"Height":200,"Depth":210,"Weight":0.75},"Price":34.45,"Quantity":4},{"ProductID":345664,"SKU":"0406654603","Product Name":"Cloak","Description":{"Colour":"Black","Width":30,"Height":20,"Depth":210,"Weight":2},"Price":107.99,"Quantity":1}]}]}}'
]]></output>
                </test-case>
                <test-case id="0-2581" name="transforms.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2026320225" result="Passed" start-time="2024-02-19T13:49:42.3045902Z" end-time="2024-02-19T13:49:42.3046710Z" duration="0.000081" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account ~&gt; |Order|{&quot;Product&quot;:&quot;blah&quot;},nomatch|';&#xA; result: {&quot;Account Name&quot;:&quot;Firefly&quot;,&quot;Order&quot;:[{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:&quot;blah&quot;},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:&quot;blah&quot;}]}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account ~> |Order|{"Product":"blah"},nomatch|'
Result: '{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":"blah"},{"OrderID":"order104","Product":"blah"}]}'
Expected: '{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":"blah"},{"OrderID":"order104","Product":"blah"}]}'
]]></output>
                </test-case>
                <test-case id="0-2582" name="transforms.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="142604401" result="Passed" start-time="2024-02-19T13:49:42.3046789Z" end-time="2024-02-19T13:49:42.3047508Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo ~&gt; |foo.bar|{&quot;Description&quot;:&quot;blah&quot;}|';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is 'foo ~> |foo.bar|{"Description":"blah"}|'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2583" name="transforms.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="370383923" result="Passed" start-time="2024-02-19T13:49:42.3047594Z" end-time="2024-02-19T13:49:42.3052534Z" duration="0.000494" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account ~&gt; |Order|5|';&#xA; result: error T2011" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2011.
Actually thrown T2011.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account ~> |Order|5|'
]]></output>
                </test-case>
                <test-case id="0-2584" name="transforms.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="53135900" result="Passed" start-time="2024-02-19T13:49:42.3052617Z" end-time="2024-02-19T13:49:42.3056630Z" duration="0.000401" asserts="0">
                  <properties>
                    <property name="Description" value="expr: 'Account ~&gt; |Order|{},5|';&#xA; result: error T2012" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2012.
Actually thrown T2012.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is 'Account ~> |Order|{},5|'
]]></output>
                </test-case>
                <test-case id="0-2585" name="transforms.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1904795309" result="Passed" start-time="2024-02-19T13:49:42.3056713Z" end-time="2024-02-19T13:49:42.3057700Z" duration="0.000099" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account ~&gt; |Order|{&quot;Product&quot;:&quot;blah&quot;},nomatch|';&#xA; result: {&quot;Account Name&quot;:&quot;Firefly&quot;,&quot;Order&quot;:[{&quot;OrderID&quot;:&quot;order103&quot;,&quot;Product&quot;:&quot;blah&quot;},{&quot;OrderID&quot;:&quot;order104&quot;,&quot;Product&quot;:&quot;blah&quot;}]}" />
                  </properties>
                  <output><![CDATA[Expr is 'Account ~> |Order|{"Product":"blah"},nomatch|'
Result: '{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":"blah"},{"OrderID":"order104","Product":"blah"}]}'
Expected: '{"Account Name":"Firefly","Order":[{"OrderID":"order103","Product":"blah"},{"OrderID":"order104","Product":"blah"}]}'
]]></output>
                </test-case>
                <test-case id="0-2586" name="transforms.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1784818253" result="Passed" start-time="2024-02-19T13:49:42.3057768Z" end-time="2024-02-19T13:49:42.3061239Z" duration="0.000347" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '{} ~&gt; |$|['one', 'two', 'three']|';&#xA; result: error T2011" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code T2011.
Actually thrown T2011.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '{} ~> |$|['one', 'two', 'three']|'
]]></output>
                </test-case>
                <test-case id="0-2587" name="transforms.case013" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case013" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="724293129" result="Passed" start-time="2024-02-19T13:49:42.3061338Z" end-time="2024-02-19T13:49:42.3062293Z" duration="0.000096" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ ~&gt; | ** ['hi'] | {'hello': hi}, ['hi'] |';&#xA; result: {&quot;hello&quot;:&quot;world&quot;,&quot;bye&quot;:null}" />
                  </properties>
                  <output><![CDATA[Expr is '$ ~> | ** ['hi'] | {'hello': hi}, ['hi'] |'
Result: '{"bye":null,"hello":"world"}'
Expected: '{"hello":"world","bye":null}'
]]></output>
                </test-case>
                <test-case id="0-2588" name="transforms.case014" fullname="Jsonata.Net.Native.TestSuite.Tests.transforms.case014" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1264124745" result="Passed" start-time="2024-02-19T13:49:42.3062391Z" end-time="2024-02-19T13:49:42.3063153Z" duration="0.000076" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$ ~&gt; | ** [hi] | {'hello': hi}, ['hi'] |';&#xA; result: {&quot;bye&quot;:null,&quot;hello&quot;:&quot;world&quot;}" />
                  </properties>
                  <output><![CDATA[Expr is '$ ~> | ** [hi] | {'hello': hi}, ['hi'] |'
Result: '{"bye":null,"hello":"world"}'
Expected: '{"bye":null,"hello":"world"}'
]]></output>
                </test-case>
                <test-case id="0-2589" name="variables.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="153050842" result="Passed" start-time="2024-02-19T13:49:42.3063217Z" end-time="2024-02-19T13:49:42.3063802Z" duration="0.000059" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$price.foo.bar';&#xA; result: 45" />
                  </properties>
                  <output><![CDATA[Expr is '$price.foo.bar'
Result: '45'
Expected: '45'
]]></output>
                </test-case>
                <test-case id="0-2590" name="variables.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="146717809" result="Passed" start-time="2024-02-19T13:49:42.3063855Z" end-time="2024-02-19T13:49:42.3064393Z" duration="0.000054" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$price.foo.bar';&#xA; result: 45" />
                  </properties>
                  <output><![CDATA[Expr is '$price.foo.bar'
Result: '45'
Expected: '45'
]]></output>
                </test-case>
                <test-case id="0-2591" name="variables.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1986500781" result="Passed" start-time="2024-02-19T13:49:42.3064444Z" end-time="2024-02-19T13:49:42.3064942Z" duration="0.000050" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$var[1]';&#xA; result: 2" />
                  </properties>
                  <output><![CDATA[Expr is '$var[1]'
Result: '2'
Expected: '2'
]]></output>
                </test-case>
                <test-case id="0-2592" name="variables.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1656178551" result="Passed" start-time="2024-02-19T13:49:42.3064990Z" end-time="2024-02-19T13:49:42.3065444Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$.foo.bar';&#xA; result: 42" />
                  </properties>
                  <output><![CDATA[Expr is '$.foo.bar'
Result: '42'
Expected: '42'
]]></output>
                </test-case>
                <test-case id="0-2593" name="variables.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1406725635" result="Passed" start-time="2024-02-19T13:49:42.3065493Z" end-time="2024-02-19T13:49:42.3065857Z" duration="0.000036" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$a := 5';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '$a := 5'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-2594" name="variables.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="90926215" result="Passed" start-time="2024-02-19T13:49:42.3065901Z" end-time="2024-02-19T13:49:42.3066487Z" duration="0.000059" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '$a := $b := 5';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '$a := $b := 5'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-2595" name="variables.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="711050629" result="Passed" start-time="2024-02-19T13:49:42.3132390Z" end-time="2024-02-19T13:49:42.3134260Z" duration="0.000187" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($a := $b := 5; $a)';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '($a := $b := 5; $a)'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-2596" name="variables.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1758738651" result="Passed" start-time="2024-02-19T13:49:42.3134390Z" end-time="2024-02-19T13:49:42.3134890Z" duration="0.000050" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '($a := $b := 5; $b)';&#xA; result: 5" />
                  </properties>
                  <output><![CDATA[Expr is '($a := $b := 5; $b)'
Result: '5'
Expected: '5'
]]></output>
                </test-case>
                <test-case id="0-2597" name="variables.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="417064145" result="Passed" start-time="2024-02-19T13:49:42.3134994Z" end-time="2024-02-19T13:49:42.3135504Z" duration="0.000051" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $a := 5; $a := $a + 2; $a )';&#xA; result: 7" />
                  </properties>
                  <output><![CDATA[Expr is '( $a := 5; $a := $a + 2; $a )'
Result: '7'
Expected: '7'
]]></output>
                </test-case>
                <test-case id="0-2598" name="variables.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="196818296" result="Passed" start-time="2024-02-19T13:49:42.3135559Z" end-time="2024-02-19T13:49:42.3136071Z" duration="0.000051" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '[1,2,3].$v';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '[1,2,3].$v'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2599" name="variables.case010" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case010" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="49058877" result="Passed" start-time="2024-02-19T13:49:42.3136123Z" end-time="2024-02-19T13:49:42.3136667Z" duration="0.000055" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $foo := &quot;defined&quot;; ( $foo := nothing ); $foo )';&#xA; result: &quot;defined&quot;" />
                  </properties>
                  <output><![CDATA[Expr is '( $foo := "defined"; ( $foo := nothing ); $foo )'
Result: '"defined"'
Expected: '"defined"'
]]></output>
                </test-case>
                <test-case id="0-2600" name="variables.case011" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case011" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="809501031" result="Passed" start-time="2024-02-19T13:49:42.3136719Z" end-time="2024-02-19T13:49:42.3137204Z" duration="0.000049" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '( $foo := &quot;defined&quot;; ( $foo := nothing; $foo ) )';&#xA; result: undefined" />
                  </properties>
                  <output><![CDATA[Expr is '( $foo := "defined"; ( $foo := nothing; $foo ) )'
Result: 'undefined'
Expected 'undefined'
]]></output>
                </test-case>
                <test-case id="0-2601" name="variables.case012" fullname="Jsonata.Net.Native.TestSuite.Tests.variables.case012" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="751360645" result="Passed" start-time="2024-02-19T13:49:42.3137255Z" end-time="2024-02-19T13:49:42.3142326Z" duration="0.000507" asserts="0">
                  <properties>
                    <property name="Description" value="expr: '($a := [1,2]; $a[1]:=3; $a)';&#xA; result: error S0212" />
                  </properties>
                  <reason>
                    <message><![CDATA[Expected to throw error with code S0212.
Actually thrown S0212.
Not checking codes yet]]></message>
                  </reason>
                  <output><![CDATA[Expr is '($a := [1,2]; $a[1]:=3; $a)'
]]></output>
                </test-case>
                <test-case id="0-2602" name="wildcards.case000" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case000" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1662045930" result="Passed" start-time="2024-02-19T13:49:42.3142405Z" end-time="2024-02-19T13:49:42.3143139Z" duration="0.000074" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.*';&#xA; result: [42,{&quot;baz&quot;:{&quot;fud&quot;:&quot;hello&quot;}},{&quot;baz&quot;:{&quot;fud&quot;:&quot;world&quot;}},{&quot;bazz&quot;:&quot;gotcha&quot;},&quot;here&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.*'
Result: '[42,{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"},"here"]'
Expected: '[42,{"baz":{"fud":"hello"}},{"baz":{"fud":"world"}},{"bazz":"gotcha"},"here"]'
]]></output>
                </test-case>
                <test-case id="0-2603" name="wildcards.case001" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case001" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1805632922" result="Passed" start-time="2024-02-19T13:49:42.3143214Z" end-time="2024-02-19T13:49:42.3143850Z" duration="0.000064" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.*.baz';&#xA; result: [{&quot;fud&quot;:&quot;hello&quot;},{&quot;fud&quot;:&quot;world&quot;}]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.*.baz'
Result: '[{"fud":"hello"},{"fud":"world"}]'
Expected: '[{"fud":"hello"},{"fud":"world"}]'
]]></output>
                </test-case>
                <test-case id="0-2604" name="wildcards.case002" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case002" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1094981093" result="Passed" start-time="2024-02-19T13:49:42.3143905Z" end-time="2024-02-19T13:49:42.3144366Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.*.bazz';&#xA; result: &quot;gotcha&quot;" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.*.bazz'
Result: '"gotcha"'
Expected: '"gotcha"'
]]></output>
                </test-case>
                <test-case id="0-2605" name="wildcards.case003" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case003" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="79821302" result="Passed" start-time="2024-02-19T13:49:42.3144417Z" end-time="2024-02-19T13:49:42.3144884Z" duration="0.000047" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.*.baz.*';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.*.baz.*'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2606" name="wildcards.case004" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case004" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="1039532858" result="Passed" start-time="2024-02-19T13:49:42.3144930Z" end-time="2024-02-19T13:49:42.3145408Z" duration="0.000048" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.*.baz.*';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.*.baz.*'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2607" name="wildcards.case005" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case005" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="753509274" result="Passed" start-time="2024-02-19T13:49:42.3145453Z" end-time="2024-02-19T13:49:42.3145912Z" duration="0.000046" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'foo.*.baz.*';&#xA; result: [&quot;hello&quot;,&quot;world&quot;]" />
                  </properties>
                  <output><![CDATA[Expr is 'foo.*.baz.*'
Result: '["hello","world"]'
Expected: '["hello","world"]'
]]></output>
                </test-case>
                <test-case id="0-2608" name="wildcards.case006" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case006" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="383407256" result="Passed" start-time="2024-02-19T13:49:42.3145957Z" end-time="2024-02-19T13:49:42.3146678Z" duration="0.000072" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '*[type=&quot;home&quot;]';&#xA; result: [{&quot;type&quot;:&quot;home&quot;,&quot;number&quot;:&quot;0203 544 1234&quot;},{&quot;type&quot;:&quot;home&quot;,&quot;address&quot;:[&quot;freddy@my-social.com&quot;,&quot;frederic.smith@very-serious.com&quot;]}]" />
                  </properties>
                  <output><![CDATA[Expr is '*[type="home"]'
Result: '[{"type":"home","number":"0203 544 1234"},{"type":"home","address":["freddy@my-social.com","frederic.smith@very-serious.com"]}]'
Expected: '[{"type":"home","number":"0203 544 1234"},{"type":"home","address":["freddy@my-social.com","frederic.smith@very-serious.com"]}]'
]]></output>
                </test-case>
                <test-case id="0-2609" name="wildcards.case007" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case007" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="2079594368" result="Passed" start-time="2024-02-19T13:49:42.3146730Z" end-time="2024-02-19T13:49:42.3147482Z" duration="0.000075" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account[$$.Account.&quot;Account Name&quot; = &quot;Firefly&quot;].*[OrderID=&quot;order104&quot;].Product.Price';&#xA; result: [34.45,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account[$$.Account."Account Name" = "Firefly"].*[OrderID="order104"].Product.Price'
Result: '[34.45,107.99]'
Expected: '[34.45,107.99]'
]]></output>
                </test-case>
                <test-case id="0-2610" name="wildcards.case008" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case008" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="878184318" result="Passed" start-time="2024-02-19T13:49:42.3147533Z" end-time="2024-02-19T13:49:42.3148231Z" duration="0.000070" asserts="1">
                  <properties>
                    <property name="Description" value="expr: 'Account[$$.Account.`Account Name` = &quot;Firefly&quot;].*[OrderID=&quot;order104&quot;].Product.Price';&#xA; result: [34.45,107.99]" />
                  </properties>
                  <output><![CDATA[Expr is 'Account[$$.Account.`Account Name` = "Firefly"].*[OrderID="order104"].Product.Price'
Result: '[34.45,107.99]'
Expected: '[34.45,107.99]'
]]></output>
                </test-case>
                <test-case id="0-2611" name="wildcards.case009" fullname="Jsonata.Net.Native.TestSuite.Tests.wildcards.case009" methodname="Test" classname="Jsonata.Net.Native.TestSuite.Tests" runstate="Runnable" seed="179178941" result="Passed" start-time="2024-02-19T13:49:42.3148280Z" end-time="2024-02-19T13:49:42.3148703Z" duration="0.000042" asserts="1">
                  <properties>
                    <property name="Description" value="expr: '*';&#xA; result: [1,2,3]" />
                  </properties>
                  <output><![CDATA[Expr is '*'
Result: '[1,2,3]'
Expected: '[1,2,3]'
]]></output>
                </test-case>
              </test-suite>
            </test-suite>
          </test-suite>
        </test-suite>
      </test-suite>
    </test-suite>
  </test-suite>
</test-run>